;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: USBFS_drv.asm
;;  Version: 2.10, Updated on 2015/3/4 at 22:27:56
;;  Generated by PSoC Designer 5.4.3191
;;
;;  DESCRIPTION: USB Device User Module control endpoint driver
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "USBFS_macros.inc"
include "USBFS.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  USBFS_EP0_ISR
export _USBFS_EP0_ISR
export  USBFS_InitControlRead
export _USBFS_InitControlRead
export  USBFS_InitControlWrite
export _USBFS_InitControlWrite
export  USBFS_InitNoDataStageControlTransfer
export _USBFS_InitNoDataStageControlTransfer
export  USBFS_NoDataStageControlTransfer

;-----------------------------------------------
;  Macro Definitions
;-----------------------------------------------

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------

;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------
AREA InterruptRAM (RAM, REL, CON)
;----------------------------------------------------------------------------
; Current Device
;----------------------------------------------------------------------------
export USBFS_bCurrentDevice, _USBFS_bCurrentDevice
 USBFS_bCurrentDevice:
_USBFS_bCurrentDevice:                  BLK   1    ;  Current Device
;----------------------------------------------------------------------------
; Current Configuration
;----------------------------------------------------------------------------
export USBFS_Configuration, _USBFS_Configuration
 USBFS_Configuration:
_USBFS_Configuration:                   BLK   1    ;  Current Configuration
;----------------------------------------------------------------------------
; Current Device Status
;----------------------------------------------------------------------------
export USBFS_DeviceStatus, _USBFS_DeviceStatus
 USBFS_DeviceStatus:
_USBFS_DeviceStatus:                    BLK   1    ;  Current Device Status
;----------------------------------------------------------------------------
; Interface Setting
;----------------------------------------------------------------------------
;  User Module Parameter determines the number of interfaces
export USBFS_InterfaceSetting, _USBFS_InterfaceSetting
 USBFS_InterfaceSetting:
_USBFS_InterfaceSetting:                BLK   3h    ; Interface Setting
;----------------------------------------------------------------------------
; Endpoint Status--USB Status
;----------------------------------------------------------------------------
export USBFS_EndpointStatus, _USBFS_EndpointStatus
 USBFS_EndpointStatus:
_USBFS_EndpointStatus:                  BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
;----------------------------------------------------------------------------
; Last Packet Size
;----------------------------------------------------------------------------
export USBFS_LastSize
 USBFS_LastSize:                        BLK   1    ; Last Packet Size
;----------------------------------------------------------------------------
; Control Transfer State Machine
; State values for Control Write
; State values for Control Read
;----------------------------------------------------------------------------
export USBFS_TransferType
 USBFS_TransferType:                    BLK   1    ; Control Transfer State Machine
;----------------------------------------------------------------------------
; Control Transfer Intermediate Buffer--Shared among the requests
;----------------------------------------------------------------------------
export USBFS_TransferBuffer
 USBFS_TransferBuffer:                  BLK   8
;----------------------------------------------------------------------------
; Transfer Descriptor Data for Control Transfer
;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
;----------------------------------------------------------------------------
; Control Transfer Data Source
;   USB_DS_ROM
;   USB_DS_RAM
;   USB_DS_RAM_AS_NEEDED
;----------------------------------------------------------------------------
export USBFS_CurrentTD, _USBFS_CurrentTD
_USBFS_CurrentTD:
 USBFS_CurrentTD:
export USBFS_DataSource, _USBFS_DataSource
_USBFS_DataSource:
 USBFS_DataSource:                      BLK   1
;----------------------------------------------------------------------------
; Control Transfer Data Size
;----------------------------------------------------------------------------
export USBFS_TransferSize, _USBFS_TransferSize
_USBFS_TransferSize:
 USBFS_TransferSize:                    BLK   2
;----------------------------------------------------------------------------
; Control Transfer Data Pointer
;   Source for Control Read
;   Destination for Control Write
;----------------------------------------------------------------------------
export USBFS_DataPtr, _USBFS_DataPtr
_USBFS_DataPtr:
 USBFS_DataPtr:                         BLK   2
;----------------------------------------------------------------------------
; Transfer Completion Notification
;----------------------------------------------------------------------------
export USBFS_StatusBlockPtr, _USBFS_StatusBlockPtr
_USBFS_StatusBlockPtr:
 USBFS_StatusBlockPtr:                  BLK   2

;----------------------------------------------------------------------------
; Control Transfer _TransferByteCount (Actually transfered
;----------------------------------------------------------------------------
 USBFS_TransferByteCount:               BLK   2

;----------------------------------------------------------------------------
; Control Endpoint Data toggle / krypton uses this ONLY for EP0  
; For 20x6x devices: See USBFS_EPXDataToggle defined in usb.asm
export USBFS_EPDataToggle, _USBFS_EPDataToggle
 _USBFS_EPDataToggle:
 USBFS_EPDataToggle:
 USBFS_EP0DataToggle:                   BLK   1
;----------------------------------------------------------------------------
; Control Endpoint Data Pending Flag
export USBFS_fDataPending
 USBFS_fDataPending:                    BLK   1
;----------------------------------------------------------------------------
; Control Endpoint Data Pending Flag
;export USBFS_PendingData
; USBFS_PendingData:                    BLK   1
;----------------------------------------------------------------------------
; Temporary Data registers
export USBFS_t2, USBFS_t1, USBFS_t0
 USBFS_t2:                              BLK   1    ; Temporary shared by the UM
 USBFS_t1:                              BLK   1    ; Temporary shared by the UM
 USBFS_t0:                              BLK   1    ; Temporary shared by the UM

;export USBFS_IntState
; USBFS_IntState:                       BLK  1
;export USBFS_StackPointer
; USBFS_StackPointer:                   BLK  1
;export USBFS_TempMode
; USBFS_TempMode:                       BLK 1
;----------------------------------------------------------------------------
; Endpoint Transfer--API Status
;----------------------------------------------------------------------------
export USBFS_EndpointAPIStatus, _USBFS_EndpointAPIStatus
 USBFS_EndpointAPIStatus:
_USBFS_EndpointAPIStatus:               BLK   USB_NUM_ENDPOINTS    ; Endpoint Status

IF 1
ELSE
ERROR_RUN_USB_WIZARD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; In order for the USB User Module to compile properly the USB Wizard must be run.
; To do this navigate back to the Device Editor Window, right click on the icon for the
; USB User Module and select the 'USB Setup Wizard...'.  Configure the device as needed
; and then click OK.  Re-generate source before compiling again.
; For HID devices it is important that all instances of HID Class Descriptors point to a valid
; HID report.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ENDIF

AREA UserModules (ROM, REL)
;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_EP0_ISR

;
;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
;                 dispaches all SETUP, IN, and OUT transfers to the proper
;                 dispatch routines for all supported USB requests.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:   n/a
;
;  RETURNS:     n/a
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
 USBFS_EP0_ISR:
_USBFS_EP0_ISR:
    push    A
    push    X
    REG_PRESERVE MVW_PP
    REG_PRESERVE MVR_PP

    RAM_SETPAGE_MVW 0
    RAM_SETPAGE_MVR 0

    ; Dispatch to setup/in/out handlers
    mov     A, reg[USBFS_EP0MODE]       ; Get the mode reg

    mov     X, A ; store for later
    ; Check EP0_CR for the following cases:
    ; bit 7 is set but ack is not set or mode is not 1 => invalid setup
    ; bit 7 is not set, bit 5 or 6 is set, but bit 4 is not set => invalid in/out
    and     A, 9Fh
    cmp     A, 91h
    jz      USBFS_EP0_Setup
    ; Check if setup bit is set--if so then invalid EP0_CR reg read so exit
    and     A, 80h
    ; Getting here means there is an invalid setup; exit without modifying the mode
    jnz     USBFS_EP0_ISR_EXIT
    ; Getting here means the setup bit is not set, now check in/out
    mov     A, X   ; restore EP0_CR reg as read
    and     A, 70h
    cmp     A, 50h
    jz      USBFS_EP0_IN
    cmp     A, 30h
    jz      USBFS_EP0_OUT
    ; Getting here means there is an invalid in/out; exit without modifying the mode
    jmp     USBFS_EP0_ISR_EXIT  

; ISR Exit Point to update the mode register
;   mode and count have been pushed onto the stack
export USBFS_EP0_UPD_MODE_EXIT
USBFS_EP0_UPD_MODE_EXIT:
    mov     [USBFS_t0], A                    ; store EP0_CNT reg value for later
    mov     A, reg[USBFS_EP0MODE]            ; unlock registers  
    and     A, 80h                                      ; Check if SETUP bit is set
    jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR	
    mov     A, [USBFS_t0]                    ; restore EP0_CNT reg value
    mov     reg[USBFS_EP0CNT], A             ; Update the count register
    mov     A, reg[USBFS_EP0CNT]             ; writing check
    cmp     A, [USBFS_t0]                    ; if writing was not succesful,
    jnz     USBFS_EP0_ISR_EXIT               ;         then abort the ISR    

    mov     [USBFS_t0], X                     ; store EP0_MODE reg value for later
.ReWriteMODE:
    mov     A, reg[USBFS_EP0MODE]             ; unblock registers    
    and     A, 80h                                      ; Check if SETUP bit is set
    jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
    
    mov     A, [USBFS_t0]                     ; restore the new MODE
    mov     reg[USBFS_EP0MODE], A             ; Update the mode regiter
    
    mov     A, reg[USBFS_EP0MODE]             ; writing check
    and     A,  0Fh                                     ; clear 7-4 bits
    cmp     A, [USBFS_t0]                     ; if writing was succesful,
    jz      USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
                                                         ; if writing was not succesful,
    jmp      .ReWriteMODE                                 ;           then repeat write operation   



; Common Exit Point
USBFS_EP0_ISR_EXIT:
    REG_RESTORE MVR_PP
    REG_RESTORE MVW_PP
    pop     X                           ;
;       mov  A, [USBFS_TempMode]
;       mov  reg[USBFS_EP0MODE], A
    pop     A                           ; Restore Context
    reti


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_EP0_Setup
;
;  DESCRIPTION:   Dispatch a USB SETUP
;
;-----------------------------------------------------------------------------
 USBFS_EP0_Setup:
_USBFS_EP0_Setup:
; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
    mov     A, reg[USBFS_EP0MODE]    ; unlock registers
    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
    and     A, 80h                              ; Check if SETUP bit is set
    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
    push    A                          ; Save the mode register
    mov     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
    call    USBFS_UpdateStatusBlock
    pop     A                          ; Restore the mode register
    mov     A, reg[USBFS_EP0CNT]             ; Get the count reg
    cmp     A, (USB_CNT_VALID | 0x0A)
    jz      .dispatch

    jmp     USBFS_Not_Supported_Local_Drv


;-----------------------------------------------------------------------------
; Jump here to dispatch the request
; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
; 7, 6, 5, 1, 0 determine what the request is. Bits [2:4] are default to zero. The below code
; re-organizes [bmRequestType] to the following format:
; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
; "re-organization", the firmware will jump to an appropriate table to handle the request.
;-----------------------------------------------------------------------------
.dispatch:
    mov     A, reg[USBFS_EP0DATA+bmRequestType]   ; Get bmRequestType
    and     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
    push    A                                ; store value on the stack
    asr     A                                ; move bits 7-6-5 into 4-3-2's place
    asr     A                                ; "asr" instruction shift all bits one place to the right.
    asr     A                                ; Bit7 remains the same.
    mov     [USBFS_t2], A                    ; store shifted value
    pop     A                                ; get original value
    or      A, [USBFS_t2]                    ; or the two to get the 5-bit field
    and     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
                                             ; Bit0 is loaded with a Zero. This results in multiplying
                                             ; the accumulator by 2, and the reason to mutiply it by 2
                                             ; is that each "jmp" instruction in the tables is two bytes long.

    ljmp    USBFS_bmRequestType_Dispatch


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_EP0_IN
;
;  DESCRIPTION: Handles an IN request.  Depending on the state of the
;               enumeration sequence it decides what to do next
;
;-----------------------------------------------------------------------------
 USBFS_EP0_IN:
_USBFS_EP0_IN:
    mov     A, reg[USBFS_EP0MODE]    ; unlock registers
;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
;    and     A, 80h                              ; Check if SETUP bit is set
;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
    mov     A, [USBFS_TransferType]
;    call USBFS_ControlInDispatch
;    jmp  USBFS_EP0_ISR_EXIT                 ; And exit
USBFS_ControlInDispatch:
    jacc    USBFS_ControlInDispatchTable
USBFS_ControlInDispatchTable:
    jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
    jmp     USBFS_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
    jmp     USBFS_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
    jmp     USBFS_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_EP0_OUT
;
;  DESCRIPTION: HANDles an OUT request.  Depending on the state of the
;               enumeration sequence it decides what to do next
;
;-----------------------------------------------------------------------------
 USBFS_EP0_OUT:
_USBFS_EP0_OUT:
    mov     A, reg[USBFS_EP0MODE]    ; unlock registers
;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
;    and     A, 80h                              ; Check if SETUP bit is set
;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
    mov     A, [USBFS_TransferType]
    jacc    USBFS_ControlOutDispatchTable
USBFS_ControlOutDispatchTable:
    jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
    jmp     USBFS_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
    jmp     USBFS_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
    jmp     USBFS_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_InitControlRead
;
;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
;                 not called.  It assumes a tranfer descriptor has been loaded
;                 into the driver USBFS_CurrentTD data structure.
;
;-----------------------------------------------------------------------------
 USBFS_InitControlRead:
_USBFS_InitControlRead:
    mov     [USBFS_LastSize], A        ; Save the packet size?
    call    USBFS_InitializeStatusBlock
    mov     [USBFS_TransferType], USB_TRANS_STATE_CONTROL_READ

    ; Check the transfer size against the request size
    mov     A, reg[USBFS_EP0DATA+wLengthHi]   ; MSB of wLength
    cmp     A, [USBFS_TransferSize]
    jnz     .L1

    mov     A, reg[USBFS_EP0DATA+wLengthLo]   ; LSB of wLength
    cmp     A, [USBFS_TransferSize+1]
    jz      .L9
.L1:
    jnc     .L9
;
    mov    [USBFS_TransferSize+1], A   ;
    mov    A, reg[USBFS_EP0DATA+wLengthHi]   ;
    mov    [USBFS_TransferSize], A     ;
.L9:
    mov    [USBFS_TransferByteCount], 0   ;
    mov    [USBFS_TransferByteCount+1], 0   ;

    or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
    jmp    USBFS_LoadEndpoint          ;
;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_ControlReadDataStage
;
;  DESCRIPTION:   This routine processes the data stage of a control read.  It
;                 must be JUMPed to, not called.  It assumes a tranfer descriptor
;                 has been loaded into the driver USBFS_CurrentTD
;                 data structure.
;
;-----------------------------------------------------------------------------
 USBFS_ControlReadDataStage:
    jmp     USBFS_LoadEndpoint

;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_ControlReadStatusStage
;
;  DESCRIPTION:   This routine processes the status stage of a control read.  It
;                 must be JUMPed to, not called.  It handles short or 0 packet
;                 It assumes a tranfer descriptor has been loaded into the
;                 driver USBFS_CurrentTD data structure.
;
;-----------------------------------------------------------------------------
 USBFS_ControlReadStatusStage:
    mov    A, [USBFS_LastSize]         ; Get the number of bytes from the last transfer
    add    [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
    adc    [USBFS_TransferByteCount], 0   ;
    mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
    call   USBFS_UpdateStatusBlock
    mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE
    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STALL_IN_OUT
    jmp    USBFS_EP0_UPD_MODE_EXIT
;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_NoDataStageControlTransfer
;                 USBFS_InitNoDataStageControlTransfer
;
;  DESCRIPTION:   This routine processes the status stage of a no data control
;                 write.  It must be JUMPed to, not called.
;
;-----------------------------------------------------------------------------
 USBFS_NoDataStageControlTransfer:
_USBFS_InitNoDataStageControlTransfer:
 USBFS_InitNoDataStageControlTransfer:
    call    USBFS_InitializeStatusBlock

    mov    [USBFS_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL

    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STATUS_IN_ONLY
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_InitControlWrite
;
;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
;                 to, not called.  It assumes a tranfer descriptor has been loaded
;                 into the driver USBFS_CurrentTD data structure.
;
;-----------------------------------------------------------------------------
 USBFS_InitControlWrite:
_USBFS_InitControlWrite:
    mov     A, [USBFS_DataSource]      ; Need to make sure the destination is not ROM
    cmp     A, USB_DS_ROM
    jz      USBFS_Not_Supported_Local_Drv

    call    USBFS_InitializeStatusBlock

    mov    [USBFS_TransferType], USB_TRANS_STATE_CONTROL_WRITE

    or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle

    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_ACK_OUT_STATUS_IN
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_ControlWriteDataStage
;
;  DESCRIPTION:   This routine processes the data stage of a control
;                 write.  It must be JUMPed to, not called.  It assumes a
;                 tranfer descriptor has been loaded into the driver
;                 USBFS_CurrentTD data structure.
;
;-----------------------------------------------------------------------------
 USBFS_ControlWriteDataStage:
    xor    [USBFS_EP0DataToggle], 1    ; Update data toggle

    mov    A, reg[USBFS_EP0CNT]        ; Get the count

    and     A, 0x0F
    sub     A, 2                       ; Count include the two byte checksum

    mov     [USBFS_t2], A              ; Assume we have room to receive the whole packet

    mov     A, 0
    cmp     A, [USBFS_TransferSize]    ; If the MSB has anything just use the count
    jnz     .L1

    mov     A, [USBFS_t2]
    cmp     A, [USBFS_TransferSize+1]    ;
    jz      .L6
.L1:
    jc      .L6
    mov     [USBFS_t2], [USBFS_TransferSize+1]

.L6:
    mov     A, [USBFS_t2]
    sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
    sbb     [USBFS_TransferSize], 0    ;

    add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
    adc     [USBFS_TransferByteCount], 0   ;

    mov     X, 0                       ; Start the index at 0

IF SYSTEM_LARGE_MEMORY_MODEL
    REG_PRESERVE MVW_PP
    mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
    mov     reg[MVW_PP], A
ENDIF

.RAM_COPY:
    mov     A, reg[X+USBFS_EP0DATA]    ; Get the data
    mvi     [USBFS_DataPtr+1], A       ; Store the data, bump the destination

    inc     X                          ; Bump the destination offset
    mov     A, X                       ; Are we done?
    cmp     A, [USBFS_t2]
    jc      .RAM_COPY                  ; Not done

IF SYSTEM_LARGE_MEMORY_MODEL
    REG_RESTORE MVW_PP
ENDIF

    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_ACK_OUT_STATUS_IN
    jmp    USBFS_EP0_UPD_MODE_EXIT

; Jump here on data toggle error
.error:
    mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; This simply aborts the transfer
    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STALL_IN_OUT
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_ControlWriteStatusStage
;
;  DESCRIPTION:   This routine processes the status stage of a control
;                 write.  It must be JUMPed to, not called.  It assumes a
;                 tranfer descriptor has been loaded into the driver
;                 USBFS_CurrentTD data structure.
;
;-----------------------------------------------------------------------------
 USBFS_ControlWriteStatusStage:
    mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
    call   USBFS_UpdateStatusBlock
    mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; The packet is done
    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STALL_IN_OUT
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_NoDataControlStatusStage
;
;  DESCRIPTION:   This routine processes the status stage of a control
;                 write.  It must be JUMPed to, not called.  It assumes a
;                 tranfer descriptor has been loaded into the driver
;                 USBFS_CurrentTD data structure.
;
;                 USB Device Addressing happens here because we can't change
;                 the SIE Address before the Status IN is received.
;
;-----------------------------------------------------------------------------
 USBFS_NoDataControlStatusStage:
    mov     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
    call    USBFS_UpdateStatusBlock
    ; Dispatch to the proper handler
    cmp     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING
    jnz     .L1

    ; USB ADDRESS CHANGE
    mov     A, [USBFS_TransferBuffer]    ; Get the pending data

    or      A, USB_ADDR_ENABLE         ; Set the enable bit
    mov     reg[USBFS_ADDR], A         ; Update the SIE address
    jmp     .EXIT
.L1:

.EXIT:
    mov     [USBFS_fDataPending], 0    ; Clear data pending

    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_NoDataControlError
;
;  DESCRIPTION:   This routine handles the condition when we expected a
;                 status IN, but receive an OUT
;
;-----------------------------------------------------------------------------
 USBFS_NoDataControlError:
    mov    A, USB_XFER_ERROR           ; Return Transaction Error
    call   USBFS_UpdateStatusBlock
    mov    A, 0                        ; Count Register
    mov    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_LoadEndpoint
;
;  DESCRIPTION: Moves data from either RAM or ROM - depending on the request
;               type and then places the appropriate number of bytes -
;               depending on the request size into the endpoint FIFO.
;               It finally sets up the endpoint to send data.
;
USBFS_LoadEndpoint:
    mov     A, [USBFS_LastSize]        ; Get the number of bytes from the last transfer
    add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
    adc     [USBFS_TransferByteCount], 0   ;
    mov     A,  [USBFS_TransferSize]   ; Check to see if we have any
    or      A,  [USBFS_TransferSize+1]   ;  more data to send
    jnz     .cont                      ; Jump if we have to send more data

; Flow here if there is no more data to send
    cmp     [USBFS_LastSize], 8        ; Was it a full packet?
    JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)

; Flow here if we are entering the status stage
    mov     A, 0                       ; Count Register
    mov     [USBFS_LastSize], A        ; Clear the byte count
    mov     X, USB_MODE_STATUS_OUT_ONLY   ; Only ACK the Status Out
    jmp     USBFS_EP0_UPD_MODE_EXIT

; Jump here to determine how many bytes should we transfer
.cont:
    cmp     [USBFS_TransferSize], 0    ; Check the MSB
    jnz     .L1

    cmp     [USBFS_TransferSize+1], 8    ; Check the LSB
    jnc     .L1

    mov     A, [USBFS_TransferSize+1]     ; Transfer all the remaing data
    jmp     .L3

.L1:
    mov     A, 8                       ; Just transfer the next 8 bytes

.L3:

    sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
    sbb     [USBFS_TransferSize], 0
    mov     [USBFS_t2], A              ; Save the count
    mov     X, 0

    cmp     [USBFS_DataSource], USB_DS_ROM    ; RAM or ROM copy?
    jnz     .RAM_COPY

; Copy data from a ROM source
.ROM_COPY:
    push    X                          ; Save the destination offset
    mov     A, [USBFS_DataPtr]         ; Get the transfer source MSB
    mov     X, [USBFS_DataPtr+1]       ; Set the transfer source LSB
    inc     [USBFS_DataPtr+1]          ; Increment the data pointer
    adc     [USBFS_DataPtr], 0         ;   MSB if necessary

    romx                               ; Get the data byte

    pop     X                          ; Get the destination offset
    mov     reg[X + USBFS_EP0DATA], A  ; Load the data
    inc     X                          ; Bump the destination offset
    mov     A, X                       ; Are we done?
    cmp     A, [USBFS_t2]
    jc      .ROM_COPY                  ; Not done
    jmp     .START_TRANSFER            ; Otherwise go start the transfer

; Copy data from a RAM source
.RAM_COPY:
IF SYSTEM_LARGE_MEMORY_MODEL
    REG_PRESERVE MVR_PP
    mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
    mov     reg[MVR_PP], A
ENDIF
.CP1:
    mvi     A, [USBFS_DataPtr+1]       ; Get the data, bump the source

    mov     reg[X +USBFS_EP0DATA], A   ; Load the data
    inc     X                          ; Bump the destination offset
    mov     A, X                       ; Are we done?
    cmp     A, [USBFS_t2]
    jc      .CP1                       ; Not done

IF SYSTEM_LARGE_MEMORY_MODEL
    REG_RESTORE MVR_PP
    mov     A, X                       ; Restore A
ENDIF

;; Set up the IN transfer count/mode/etc
;    A contains the byte count
.START_TRANSFER:
    mov     [USBFS_LastSize], A        ; Save the packet size

    mov     A, 1
    and     A, [USBFS_EP0DataToggle]
    jz      .BYPASS_T1
    mov     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle

.BYPASS_T1:
    or      A, [USBFS_LastSize]
    xor     [USBFS_EP0DataToggle], 1      ; Update the data toggle for next time

    mov     X, USB_MODE_ACK_IN_STATUS_OUT    ; Set the mode register
    jmp    USBFS_EP0_UPD_MODE_EXIT


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_GetTableEntry
;
;  DESCRIPTION: This function figures out based on the various bytes in the
;               setup packet where to get the data from or put the data to.
;               Transfer Data structures are defined each of the supported
;               control transfers, this function finds the right one and
;               saves it in the CurrentTD structure in RAM.  It then
;               calls InitControlRead or InitControlWrite to being the
;               transaction.
;
;-----------------------------------------------------------------------------
export USBFS_GetTableEntry
USBFS_GetTableEntry:

    inc     X                          ; Point to the first table entry
    adc     A, 0                       ;

    TD_INDEX_TO_OFFSET USBFS_t2 ; Convert the index

    swap    A, X
    add     A, [USBFS_t2]
    swap    A, X
    adc     A, 0                       ; A:X now points to the descriptor table entry we want

; Flow here to load the Transfer Descriptor (TD_ENTRY)
    mov     [USBFS_t2], USBFS_CurrentTD    ; Use Temp as mvi pointer
    call     USBFS_GETBYTE             ; Get the descriptor data source
    call     USBFS_GETWORD             ; Get the descriptor size
    call     USBFS_GETWORD             ; Get the descriptor address
    call     USBFS_GETWORD             ; Get the Status Pointer
; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
    mov     A, reg[USBFS_EP0DATA+bmRequestType] ; Get bmRequestType
    and     A, 0x80                         ; Control Read or Write
    jz      .control_write

    jmp     USBFS_InitControlRead

.control_write:
    jmp     USBFS_InitControlWrite


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_LOOKUP
;
;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    A:X Point to the lookup table
;                USBFS_t2 contain the table index
;
;  RETURNS:      Address of the LT_ENTRY in A:X
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
export USBFS_LOOKUP
USBFS_LOOKUP:
    inc     X                          ; Point to the first table entry
    adc     A, 0                       ;

    LT_INDEX_TO_OFFSET USBFS_t2        ; Convert the index
    swap    A, X
    add     A, [USBFS_t2]              ;
    swap    A, X
    adc     A, 0
    ret


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_GETWORD/USBFS_GETBYTE
;
;  DESCRIPTION:    Get a word value from ROM
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    A:X is the ROM Address
;                USBFS_t2 is the destination address
;
;  RETURNS:      USBFS_t1
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;                USES USBFS_t2
;                A:X points to the subsequent locaction ROM location
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
export USBFS_GETWORD
USBFS_GETWORD:

    push    A                          ; Don't loose the pointer MSB
    romx                               ; Data source flag
    mvi     [USBFS_t2], A              ; Save the data source
    pop     A                          ; Get the MSB back
    inc     X                          ; Point to the next  entry
    adc     A, 0                       ;

export USBFS_GETBYTE
USBFS_GETBYTE:

    push    A                          ; Don't loose the pointer MSB
    romx                               ; Data source flag
    mvi     [USBFS_t2], A              ; Save the data source
    pop     A                          ; Get the MSB back
    inc     X                          ; Point to the next  entry
    adc     A, 0                       ;
    ret


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_GET_DEVICE_TABLE_ENTRY
;
;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
;                  Not intended for use by C fucntions
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:        A:X points the the current DEVICE_TABLE entry
;                  Carry flag is set if the current device index is out of range
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
export USBFS_GET_DEVICE_TABLE_ENTRY
USBFS_GET_DEVICE_TABLE_ENTRY:
    mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector

    mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
    mov     X, <USBFS_DEVICE_LOOKUP    ; Get the ROM Address LSB
    romx                               ; First entry is the table size (only a byte)
    cmp     A, [USBFS_t2]              ; Range check
    mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
    jc      .exit
; Flow here if the index is valid
    call    USBFS_LOOKUP               ; Look up the configuration
; Jump or flow here on exit
.exit:
    ret


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_GET_CONFIG_TABLE_ENTRY
;
;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
;                  Not intended fOR use by C fucntions
;                  Does not do range checking on
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:        A:X points the the current CONFIG_TABLE entry
;                  Carry flag is set if the current device index is out of range
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
export USBFS_GET_CONFIG_TABLE_ENTRY
USBFS_GET_CONFIG_TABLE_ENTRY:
    call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
    mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
    call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                       ; ITempW has the address
    mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
    mov     [USBFS_t2], A              ; Save it
    mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
    mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB

; A:X Points to the CONFIG_LOOKUP, so get the current entry
    mov     [USBFS_t2], [USBFS_Configuration]   ; Get the configuration number
    DEC     [USBFS_t2]                 ; We don't populate the 0th entry
    call    USBFS_LOOKUP               ; Look up the configuration
    ret


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_UpdateStatusBlock
;
;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
;                  block is updated with the completion code from the
;                  argument (A) and the _TransferByteCount.
;
;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
;                  to make sure no other updates are made to the StatusBlock by
;                  the USB User Module.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:      A contains the Completion Status Code
;
;  RETURNS:        None
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
USBFS_UpdateStatusBlock:
    mov     X, [USBFS_StatusBlockPtr + 1]   ;
    swap    A, X                       ; Don't loose the completion code
    cmp     A, 0                       ; NULL?
    jz      .done                      ; No update on NULL
; Flow here to update the VSR Completion Status Block
    swap    A, X                       ; Completion code A, Pointer in X
    mov     [X + 0], A                 ; Update the completion Code
    mov     A, [USBFS_TransferByteCount]   ; Actual Byte Count MSB
    mov     [X + 1], A
    mov     A, [USBFS_TransferByteCount + 1]   ; Actual Byte Count LSB
    mov     [X + 2], A
    mov     [USBFS_StatusBlockPtr + 1], 0   ; Clear the Block Pointer
.done:
    ret                                ; All done


;-----------------------------------------------------------------------------
;  FUNCTION NAME: USBFS_InitializeStatusBlock
;
;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
;                  The completion code is set to USB_XFER_IDLE.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:      None
;
;  RETURNS:        None
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
USBFS_InitializeStatusBlock:
    mov     A, [USBFS_StatusBlockPtr + 1]   ;
    cmp     A, 0                       ; NULL?
    jz      .done                      ; No update on NULL
; Flow here to initialize the Completion Status Block
    swap    A, X                       ; Pointer in X
    mov     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0)
    mov     [USBFS_TransferByteCount], 0   ; Clear the byte count
    mov     [USBFS_TransferByteCount + 1], 0   ;
.done:
    ret                                ; All done


;-----------------------------------------------------------------------------
;  FUNCTION NAME: ;  USB 1st Tier Dispactch Jump Table (based on bmRequestType)
;
;  DESCRIPTION:
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;-----------------------------------------------------------------------------
MACRO BMREQUEST_DISPATCH
IF (USB_CB_@0_@1_@2 & 1)
    jmp     USBFS_DT_@0_@1_@2_Dispatch
ELSE
    jmp     USBFS_Not_Supported_Local_Drv
ENDIF
ENDM

USBFS_DT_bmRequestType::
    BMREQUEST_DISPATCH    h2d, std, dev
    BMREQUEST_DISPATCH    h2d, std, ifc
    BMREQUEST_DISPATCH    h2d, std, ep
    BMREQUEST_DISPATCH    h2d, std, oth
    BMREQUEST_DISPATCH    h2d, cls, dev
    BMREQUEST_DISPATCH    h2d, cls, ifc
    BMREQUEST_DISPATCH    h2d, cls, ep
    BMREQUEST_DISPATCH    h2d, cls, oth
    BMREQUEST_DISPATCH    h2d, vnd, dev
    BMREQUEST_DISPATCH    h2d, vnd, ifc
    BMREQUEST_DISPATCH    h2d, vnd, ep
    BMREQUEST_DISPATCH    h2d, vnd, oth
    BMREQUEST_DISPATCH    h2d, rsv, dev
    BMREQUEST_DISPATCH    h2d, rsv, ifc
    BMREQUEST_DISPATCH    h2d, rsv, ep
    BMREQUEST_DISPATCH    h2d, rsv, oth
    BMREQUEST_DISPATCH    d2h, std, dev
    BMREQUEST_DISPATCH    d2h, std, ifc
    BMREQUEST_DISPATCH    d2h, std, ep
    BMREQUEST_DISPATCH    d2h, std, oth
    BMREQUEST_DISPATCH    d2h, cls, dev
    BMREQUEST_DISPATCH    d2h, cls, ifc
    BMREQUEST_DISPATCH    d2h, cls, ep
    BMREQUEST_DISPATCH    d2h, cls, oth
    BMREQUEST_DISPATCH    d2h, vnd, dev
    BMREQUEST_DISPATCH    d2h, vnd, ifc
    BMREQUEST_DISPATCH    d2h, vnd, ep
    BMREQUEST_DISPATCH    d2h, vnd, oth
    BMREQUEST_DISPATCH    d2h, rsv, dev
    BMREQUEST_DISPATCH    d2h, rsv, ifc
    BMREQUEST_DISPATCH    d2h, rsv, ep
    BMREQUEST_DISPATCH    d2h, rsv, oth
USBFS_DT_End:
USBFS_DT_Size: equ (USBFS_DT_End-USBFS_DT_bmRequestType) / 2
USBFS_bmRequestType_Dispatch::
    DISPATCHER USBFS_DT_bmRequestType, USBFS_DT_Size, USBFS_Not_Supported_Local_Drv

USBFS_Not_Supported_Local_Drv:
    ljmp     USBFS_Not_Supported


;-----------------------------------------------
; Add custom application code for routines
;-----------------------------------------------

   ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
   ;---------------------------------------------------
   ; Insert your custom code below this banner
   ;---------------------------------------------------

   ;---------------------------------------------------
   ; Insert your custom code above this banner
   ;---------------------------------------------------
   ;@PSoC_UserCode_END@ (Do not change this line.)

; End of File USBFS_drv.asm
