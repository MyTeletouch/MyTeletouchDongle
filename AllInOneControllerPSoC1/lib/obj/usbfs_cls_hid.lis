 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: USBFS_cls_hid.asm
 0000           ;;   Version: 2.10, Updated on 2015/3/4 at 22:27:56
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: USB Human Interface Device (HID) Class request implemenatation
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API
 0000           ;;        function returns. Even though these registers may be preserved now,
 0000           ;;        there is no guarantee they will be preserved in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Data Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_DR:   	  equ 40h		   ; PMA Data Register                        (RW)
 0041           PMA1_DR:   	  equ 41h		   ; PMA Data Register                        (RW)
 0042           PMA2_DR:   	  equ 42h		   ; PMA Data Register                        (RW)
 0043           PMA3_DR:   	  equ 43h		   ; PMA Data Register                        (RW)
 0044           PMA4_DR:   	  equ 44h		   ; PMA Data Register                        (RW)
 0045           PMA5_DR:   	  equ 45h		   ; PMA Data Register                        (RW)
 0046           PMA6_DR:   	  equ 46h		   ; PMA Data Register                        (RW)
 0047           PMA7_DR:   	  equ 47h		   ; PMA Data Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 0048           USB_SOF0:     equ 48h		   ; SOF Frame Number LSB(7:0)                (R)
 0049           USB_SOF1:     equ 49h		   ; SOF Frame Number MSB(10:8)               (R)
 0000           
 004A           USB_CR0:      equ 4Ah		   ; USB Control Register 0                   (RW)
 0080           USB_CR0_ENABLE:       equ 80h    ; MASK: enable/disable USB SIE	          (RW)
 007F           USB_CR0_DEVICE_ADDR:  equ 7Fh    ; MASK: USB Device Address               (RW)
 0000           
 004B           USBIO_CR0:    equ 4Bh		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR0_TEN:        equ 80h    ; MASK: enable/disable manual tx on D+ D-(RW)
 0040           USBIO_CR0_TSE0:       equ 40h    ; MASK: transmit a single ended 0        (RW)
 0020           USBIO_CR0_TD:         equ 20h    ; MASK: transmit J or K state on Bus     (RW)
 0001           USBIO_CR0_RD:         equ 01h    ; MASK: read state of differential rx    (R)
 0000           
 004C           USBIO_CR1:    equ 4Ch		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR1_IOMODE:     equ 80h    ; MASK: select Bit Bang Mode/USB Mode    (RW)
 0040           USBIO_CR1_DRIVE_MODE: equ 40h    ; MASK: select CMOS mode/Open Drain mode (RW)
 0020           USBIO_CR1_DPI:        equ 20h    ; MASK: drive D+ high/low                (RW)
 0010           USBIO_CR1_DMI:        equ 10h    ; MASK: drive D- high/low                (RW)
 0008           USBIO_CR1_PS2PUEN:    equ 08h    ; MASK: enable/disable 5K Pullup on D+/D-(RW)
 0004           USBIO_CR1_USBPUEN:    equ 04h    ; MASK: enable/disable USB Pullup on D+  (RW)
 0002           USBIO_CR1_DPO:        equ 02h    ; MASK: read D+ pin                      (R)
 0001           USBIO_CR1_DMO:        equ 01h    ; MASK: read D- pin                      (R)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Endpoint Registers
 0000           ;------------------------------------------------
 0000           
 004E           EP1_CNT1:     equ 4Eh		   ; Endpoint 1 Count Register 1              (#)
 0080           EP1_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP1_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP1_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 004F           EP1_CNT:      equ 4Fh		   ; Endpoint 1 Count Register 0              (RW)
 0000           
 0050           EP2_CNT1:     equ 50h		   ; Endpoint 2 Count Register 1              (#)
 0080           EP2_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP2_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP2_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0051           EP2_CNT:      equ 51h		   ; Endpoint 2 Count Register 0              (RW)
 0000           
 0052           EP3_CNT1:     equ 52h		   ; Endpoint 3 Count Register 1              (#)
 0080           EP3_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP3_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP3_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0053           EP3_CNT:      equ 53h		   ; Endpoint 3 Count Register 0              (RW)
 0000           
 0054           EP4_CNT1:     equ 54h		   ; Endpoint 4 Count Register 1              (#)
 0080           EP4_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP4_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP4_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0055           EP4_CNT:      equ 55h		   ; Endpoint 4 Count Register 0              (RW)
 0000           
 0056           EP0_CR:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           
 0000           ; ------------------------------------------------------------------------------
 0000           ; The following defines are depricated.  Left here for compatibility. 
 0056           EP0_CR0:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR0_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR0_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR0_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR0_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR0_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           ; ------------------------------------------------------------------------------
 0000           
 0057           EP0_CNT:      equ 57h          ; Endpoint 0 Count Register                (#)
 0080           EP0_CNT_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP0_CNT_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (RC)
 000F           EP0_CNT_BYTE_CNT:    equ 0Fh    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0058           EP0_DR0:      equ 58h          ; Endpoint 0 Data Register 0               (RW)
 0059           EP0_DR1:      equ 59h          ; Endpoint 0 Data Register 1               (RW)
 005A           EP0_DR2:      equ 5Ah          ; Endpoint 0 Data Register 2               (RW)
 005B           EP0_DR3:      equ 5Bh          ; Endpoint 0 Data Register 3               (RW)
 005C           EP0_DR4:      equ 5Ch          ; Endpoint 0 Data Register 4               (RW)
 005D           EP0_DR5:      equ 5Dh          ; Endpoint 0 Data Register 5               (RW)
 005E           EP0_DR6:      equ 5Eh          ; Endpoint 0 Data Register 6               (RW)
 005F           EP0_DR7:      equ 5Fh          ; Endpoint 0 Data Register 7               (RW)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUX_CFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUX_CFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUX_CFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUX_CFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUX_CFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           ;; Keep Old Left. here for compatibility.
 0061           AMUXCFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUXCFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUXCFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUXCFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUXCFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUXCFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_CLDIS0:       equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLDIX1:       equ 02h    ; MASK: Column 1 comparator bus synch
 0001           CMP_CR1_CLDIX0:       equ 01h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; USB Mask Register           (RW)
 0080           INT_MSK2_WAKEUP:           equ 80h ; MASK: enable/disable I2C interrupt
 0040           INT_MSK2_EP4:              equ 40h ; MASK: enable/disable SW interrupt
 0020           INT_MSK2_EP3:              equ 20h ; MASK: enable/disable I2C interrupt
 0010           INT_MSK2_EP2:              equ 10h ; MASK: enable/disable SW interrupt
 0008           INT_MSK2_EP1:              equ 08h ; MASK: enable/disable I2C interrupt
 0004           INT_MSK2_EP0:              equ 04h ; MASK: enable/disable SW interrupt
 0002           INT_MSK2_SOF:              equ 02h ; MASK: enable/disable I2C interrupt
 0001           INT_MSK2_BUS_RESET:        equ 01h ; MASK: enable/disable SW interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E4           DEC_DH:       equ 0E4h          ; Data High Register                       (RW)
 00E5           DEC_DL:       equ 0E5h          ; Data Low Register                        (RW)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers for compatibility only
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL_X:        equ 0E8h          ; Multiply Input X Register                (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiply Input Y Register                (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EA           MUL_RESULT:   equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC_DR1:      equ 0ECh          ; Accumulator Data Register 1              (RW)
 00EC           MAC_X:        equ ACC_DR1       ; Accumulator Data Register 1              (RW)
 00EC           ACC_LOW_WORD: equ ACC_DR1       ; Accumulator Data Register 1              (RW)
 00ED           ACC_DR0:      equ 0EDh          ; Accumulator Data Register 0              (RW)
 00ED           MAC_Y:        equ ACC_DR0       ; Accumulator Data Register 0              (RW)
 00EE           ACC_DR3:      equ 0EEh          ; Accumulator Data Register 3              (RW)
 00EE           MAC_CL0:      equ ACC_DR3       ; Accumulator Data Register 3              (RW)
 00EE           ACC_HI_WORD:  equ ACC_DR3       ; Accumulator Data Register 3              (RW)
 00EF           ACC_DR2:      equ 0EFh          ; Accumulator Data Register 2              (RW)
 00EF           MAC_CL1:      equ ACC_DR2       ; Accumulator Data Register 2              (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AA           MUL1_RESULT:  equ MUL1_DH       ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_LOW_WORD: equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1       (RW)
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AE           ACC1_HI_WORD: equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Write and Read Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_WA:   	  equ 40h		   ; PMA Write Pointer Register               (RW)
 0041           PMA1_WA:   	  equ 41h		   ; PMA Write Pointer Register               (RW)
 0042           PMA2_WA:   	  equ 42h		   ; PMA Write Pointer Register               (RW)
 0043           PMA3_WA:   	  equ 43h		   ; PMA Write Pointer Register               (RW)
 0044           PMA4_WA:   	  equ 44h		   ; PMA Write Pointer Register               (RW)
 0045           PMA5_WA:   	  equ 45h		   ; PMA Write Pointer Register               (RW)
 0046           PMA6_WA:   	  equ 46h		   ; PMA Write Pointer Register               (RW)
 0047           PMA7_WA:   	  equ 47h		   ; PMA Write Pointer Register               (RW)
 0000           
 0050           PMA0_RA:   	  equ 50h		   ;  PMA Read Pointer Register               (RW)
 0051           PMA1_RA:   	  equ 51h		   ;  PMA Read Pointer Register               (RW)
 0052           PMA2_RA:   	  equ 52h		   ;  PMA Read Pointer Register               (RW)
 0053           PMA3_RA:   	  equ 53h		   ;  PMA Read Pointer Register               (RW)
 0054           PMA4_RA:   	  equ 54h		   ;  PMA Read Pointer Register               (RW)
 0055           PMA5_RA:   	  equ 55h		   ;  PMA Read Pointer Register               (RW)
 0056           PMA6_RA:   	  equ 56h		   ;  PMA Read Pointer Register               (RW)
 0057           PMA7_RA:   	  equ 57h		   ;  PMA Read Pointer Register               (RW)
 0000           
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus 0/1 To Global Out Enable  (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus 2/3 To Global Out Enable  (RW)
 0080           CMP_GO_EN1_GOO7:      equ 80h    ; MASK: Selected Col 3 signal to GOO5
 0040           CMP_GO_EN1_GOO3:      equ 40h    ; MASK: Selected Col 3 signal to GOO1
 0030           CMP_GO_EN1_SEL3:      equ 30h    ; MASK: Column 3 Signal Select
 0008           CMP_GO_EN1_GOO6:      equ 08h    ; MASK: Selected Col 2 signal to GOO4
 0004           CMP_GO_EN1_GOO2:      equ 04h    ; MASK: Selected Col 2 signal to GOO0
 0003           CMP_GO_EN1_SEL2:      equ 03h    ; MASK: Column 2 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR0_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 3   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Column 1 Range 
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Column 0 Range
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 00C1           USB_CR1:      equ 0C1h          ; USB Control Register 1                   (#)
 0004           USB_CR1_BUS_ACTIVITY: equ 04h    ; MASK: monitors activity on USB bus     (RC)
 0002           USB_CR1_ENABLE_LOCK:  equ 02h    ; MASK: enable/disable auto lock of osc  (RW)
 0001           USB_CR1_REG_ENABLE:   equ 01h    ; MASK: set mode to reg. on/pass thru    (RW)
 0000           
 00C4           EP1_CR0:      equ 0C4h          ; EP1 Control Register 0                   (#)
 0080           EP1_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP1_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP1_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP1_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C5           EP2_CR0:      equ 0C5h          ; EP2 Control Register 0                   (#)
 0080           EP2_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP2_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP2_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP2_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C6           EP3_CR0:      equ 0C6h          ; EP3 Control Register 0                   (#)
 0080           EP3_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP3_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP3_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP3_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C7           EP4_CR0:      equ 0C7h          ; EP4 Control Register 0                   (#)
 0080           EP4_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP4_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP4_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP4_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  AMuxBus Mux Control Registers
 0000           ;------------------------------------------------
 0000           
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Bus Port 0 Bit Enables Reg    (RW)
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Bus Port 1 Bit Enables Reg    (RW)
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Bus Port 2 Bit Enables Reg    (RW)
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Bus Port 3 Bit Enables Reg    (RW)
 00EC           MUX_CR4:      equ 0ECh          ; Analog Mux Bus Port 4 Bit Enables Reg    (RW)
 00ED           MUX_CR5:      equ 0EDh          ; Analog Mux Bus Port 5 Bit Enables Reg    (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Data Control Register 2                  (RW)
 0000           
 00E8           IMO_TR:               equ 0E8h    ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:               equ 0E9h    ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:               equ 0EAh    ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:               equ 0EBh    ; External Oscillator Trim Register        (W)
 00EF           IMO_TR2:              equ 0EFh    ; Internal Main Oscillator Gain Trim Register (RW)
 0000           
 00FD           DAC_CR:       equ 0FDh          ; DAC Control Register                     (RW)
 0080           DAC_CR_SPLIT_MUX:     equ 80h    ; MASK: enable/disable Splitting of AMuxBuses
 0040           DAC_CR_MUXCLK_GE:     equ 40h    ; MASK: Connect/Disconnect AMuxBus to GOO[6]
 0008           DAC_CR_RANGE:	       equ 08h    ; MASK: High Range/Low Range
 0006           DAC_CR_OSCMODE:	    equ 06h    ; MASK: Sets Reset Mode for AMuxBus
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: enable/disable AMux Bus
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           MACRO   GET_WORD
 0000                   RAM_X_POINTS_TO_STACKPAGE                    ; Since called by interrupt we can call this
 0000               PUSH A                              ; Quickly get a RAM temp
 0000               PUSH A                              ; Save the source MSB
 0000               ROMX                                ; Get the first byte
 0000               PUSH X                              ; Save X
 0000               MOV  X,SP                           ; Get SP, to index to the temp 
 0000               MOV  [X - 3],A                      ; Save the first byte
 0000               POP  X                              ; Get back the source LSB
 0000               POP  A                              ; And the MSB
 0000               INC  X                              ; Point to the second byte
 0000               ADC  A, 0                           ; 
 0000               ROMX                                ; Get the second byte
 0000               MOV  X,A                            ; Save it in X
 0000               POP  A                              ; And the first byte in A
 0000               RAM_CHANGE_PAGE_MODE 00             ; Reset stack mode back
 0000           MACRO   NULL_PTR_CHECK
 0000               SWAP    A, X                        ; LSB non-zero?
 0000               JNZ     .ok                         ; Exit on non-zero
 0000               SWAP    A, X                        ; MSB zero
 0000               JZ      @0                          ; Jump to the null pointer handler
 0000               JMP     .exit
 0000           .ok:
 0000               SWAP    A, X                        ; Put them back
 0000           .exit:
 0000           NULL_PTR:   EQU 0                       ; Null pointer value
 0000           
 0000           ;--------------------------------------------------
 0000           ; TRANSFER DESCRIPTOR MACROS
 0000           ;--------------------------------------------------
 0000           
 0000           ;-----------------------------------------------
 0000           ; TD_START_TABLE MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = Number of table entries
 0000           ; Register setup
 0000           ;   N/A (builds ROM data at assembly time)
 0000           ;-----------------------------------------------
 0000           MACRO   TD_START_TABLE
 0000               DB      ((@0) - 1)                 ; Number of table entries - 1
 0000           MACRO   TD_ENTRY
 0000               DB  @0                             ; Data source (USB_DS_*)
 0000               DW  @1                             ; Transfer size
 0000               DW  @2                             ; Data source address
 0000               DW  @3                             ; Transfer Completion Status Block Address
 0000               DB  0xde                           ; Reserved 
 0008           TD_ENTRY_SIZE:                         EQU 8
 0001           TD_START_SIZE:                         EQU 1
 0000           ;-----------------------------------------------
 0000           ; TD_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (restored)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   TD_INDEX_TO_OFFSET
 0000               PUSH    A                          ; Save a work register
 0000               ASL     [@0]                       ; Index * 2
 0000               ASL     [@0]                       ; Index * 4
 0000               ASL     [@0]                       ; Index * 8
 0000               POP     A                          ; Restore the work register
 0000           MACRO LT_START
 0000               DB      (@0)                       ; Table size
 0000           MACRO LT_ENTRY
 0000               DW      (@0)                       ; Table entry
 0000               DW      (@1)                       ; Table entry
 0002           LT_ENTRY_SIZE:                         EQU 2
 0001           LT_START_SIZE:                         EQU 1
 0000           
 0000           ;-----------------------------------------------
 0000           ; LT_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (not used)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   LT_INDEX_TO_OFFSET
 0000               ASL     [@0]                       ; Simply shift (mult by 2)
 0000               ASL     [@0]                       ;              (mult by 4)
 0000           MACRO DISPATCHER
 0000               CMP   A,@1
 0000               JNC   .dispatch_not_supported
 0000               ASL   A
 0000               JACC  @0
 0000           .dispatch_not_supported:
 0000               JMP  @2    
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           ; end of file USBFS_macro.inc
 0005           USBFS_bNumStringDescrs: EQU    0x5
 0000           
 0005           USB_NUM_ENDPOINTS:                          EQU 5 
 0004           USB_MAX_EP_NUMBER:                          EQU (USB_NUM_ENDPOINTS - 1) 
 0000           
 0002           USB_3V_OPERATION:                           EQU 0x02
 0003           USB_5V_OPERATION:                           EQU 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for interrupt regs and masks
 0000           ;--------------------------------------------------
 00DF           USBFS_INT_REG:                             equ 0xDF
 0001           USBFS_INT_RESET_MASK:                      equ 0x01
 0002           USBFS_INT_SOF_MASK:                        equ 0x02
 0004           USBFS_INT_EP0_MASK:                        equ 0x04
 0008           USBFS_INT_EP1_MASK:                        equ 0x08
 0010           USBFS_INT_EP2_MASK:                        equ 0x10
 0020           USBFS_INT_EP3_MASK:                        equ 0x20
 0040           USBFS_INT_EP4_MASK:                        equ 0x40
 0080           USBFS_INT_WAKEUP_MASK:                     equ 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers for USBFS API's.
 0000           ;--------------------------------------------------
 0000           
 004A           USBFS_ADDR:                                 EQU 0x4a
 004B           USBFS_USBIO_CR0:                            EQU 0x4b
 004C           USBFS_USBIO_CR1:                            EQU 0x4c
 00C1           USBFS_USB_CR1:                              EQU 0xc1 
 0000           
 0056           USBFS_EP0MODE:                              EQU 0x56
 0057           USBFS_EP0CNT:                               EQU 0x57
 0058           USBFS_EP0DATA:                              EQU 0x58
 00C4           USBFS_EP1MODE:                              EQU 0xc4
 004F           USBFS_EP1CNT0:                              EQU 0x4f
 004E           USBFS_EP1CNT1:                              EQU 0x4e
 00C5           USBFS_EP2MODE:                              EQU 0xc5
 0051           USBFS_EP2CNT0:                              EQU 0x51
 0050           USBFS_EP2CNT1:                              EQU 0x50
 00C6           USBFS_EP3MODE:                              EQU 0xc6
 0053           USBFS_EP3CNT0:                              EQU 0x53
 0052           USBFS_EP3CNT1:                              EQU 0x52
 00C7           USBFS_EP4MODE:                              EQU 0xc7
 0055           USBFS_EP4CNT0:                              EQU 0x55
 0054           USBFS_EP4CNT1:                              EQU 0x54
 0000           
 0000           ;--------------------------------------------------
 0000           ; Endpoint 0 offsets (Table 9-2)
 0000           ;--------------------------------------------------
 0000           bmRequestType:                              EQU 0
 0001           bRequest:                                   EQU 1
 0002           wValue:                                     EQU 2
 0003           wValueHi:                                   EQU 3
 0002           wValueLo:                                   EQU 2
 0004           wIndex:                                     EQU 4
 0005           wIndexHi:                                   EQU 5
 0004           wIndexLo:                                   EQU 4
 0006           wLength:                                    EQU 6
 0007           wLengthHi:                                  EQU 7
 0006           wLengthLo:                                  EQU 6
 0000           
 0000           ;--------------------------------------------------
 0000           ; Request Types (Table 9-4)
 0000           ;--------------------------------------------------
 0000           USB_GET_STATUS:                             EQU    0x00
 0001           USB_CLEAR_FEATURE:                          EQU    0x01
 0003           USB_SET_FEATURE:                            EQU    0x03
 0005           USB_SET_ADDRESS:                            EQU    0x05
 0006           USB_GET_DESCRIPTOR:                         EQU    0x06
 0007           USB_SET_DESCRIPTOR:                         EQU    0x07
 0008           USB_GET_CONFIGURATION:                      EQU    0x08
 0009           USB_SET_CONFIGURATION:                      EQU    0x09
 000A           USB_GET_INTERFACE:                          EQU    0x0A
 000B           USB_SET_INTERFACE:                          EQU    0x0B
 000C           USB_SYNCH_FRAME:                            EQU    0x0C
 0000           
 0000           ;--------------------------------------------------
 0000           ; Descriptor Types (Table 9-5)
 0000           ;--------------------------------------------------
 0001           DESCR_TYPE_DEVICE:                          EQU     1
 0002           DESCR_TYPE_CONFIG:                          EQU     2
 0003           DESCR_TYPE_STRING:                          EQU     3
 0004           DESCR_TYPE_INTERFACE:                       EQU     4
 0005           DESCR_TYPE_ENDPOINT:                        EQU     5
 0006           DESCR_TYPE_DEVICE_QUALIFIER:                EQU     6
 0007           DESCR_TYPE_OTHER_SPEED:                     EQU     7
 0008           DESCR_TYPE_INTERFACE_POWER:                 EQU     8
 0000           
 0000           ;--------------------------------------------------
 0000           ; Feature Selectors (Table 9-6)
 0000           ;--------------------------------------------------
 0001           USB_DEVICE_REMOTE_WAKEUP:                   EQU    0x01
 0000           USB_ENDPOINT_HALT:                          EQU    0x00
 0002           USB_TEST_MODE:                              EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Device Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0000           USB_DEVICE_STATUS_BUS_POWERED:              EQU   0x00
 0001           USB_DEVICE_STATUS_SELF_POWERED:             EQU   0x01
 0002           USB_DEVICE_STATUS_REMOTE_WAKEUP:            EQU   0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0001           USB_ENDPOINT_STATUS_HALT:                   EQU    0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Directions
 0000           ;--------------------------------------------------
 0080           USB_DIR_IN:                                 EQU    0x80
 0000           USB_DIR_OUT:                                EQU    0x00
 007F           USB_DIR_UNUSED:                             EQU    0x7F
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Address Symbols 
 0000           ;--------------------------------------------------
 0000           EP0:                                        EQU    0x00
 0001           EP1:                                        EQU    0x01
 0002           EP2:                                        EQU    0x02
 0003           EP3:                                        EQU    0x03
 0004           EP4:                                        EQU    0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Endpoint States--These act as JACC jump values
 0000           ;--------------------------------------------------
 0000           USB_TRANS_STATE_IDLE:                       EQU     0x00         ;
 0002           USB_TRANS_STATE_CONTROL_READ:               EQU     0x02         ;
 0004           USB_TRANS_STATE_CONTROL_WRITE:              EQU     0x04         ;
 0006           USB_TRANS_STATE_NO_DATA_CONTROL:            EQU     0x06         ;
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Write flag values to indicate pending data changes
 0000           ;--------------------------------------------------
 0001           USB_ADDRESS_CHANGE_PENDING:     EQU     0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Constants for USBFS
 0000           ;--------------------------------------------------
 0080           USB_ADDR_ENABLE: 			                         EQU    0x80
 0040           USB_CNT_VALID: 				                          EQU    0x40
 0080           USB_CNT_TOGGLE: 			                          EQU    0x80
 0004           USB_PULLUP_ENABLE:			                        EQU    0x04
 0000           USB_AUTO_DPDM: 				                          EQU    0x00
 0003           USB_REG_ENABLE: 			                          EQU    0x03
 0002           USB_PASS_THRU: 				                          EQU    0x02
 0004           USB_BUS_ACTIVITY: 			                        EQU    0x04
 0000           
 0000           USB_MODE_DISABLE:                            EQU 0x00
 0001           USB_MODE_NAK_IN_OUT:                         EQU 0x01
 0002           USB_MODE_STATUS_OUT_ONLY:                    EQU 0x02
 0003           USB_MODE_STALL_IN_OUT:                       EQU 0x03
 0004           USB_MODE_RESERVED_0100:                      EQU 0x04
 0005           USB_MODE_ISO_OUT:                            EQU 0x05
 0006           USB_MODE_STATUS_IN_ONLY:                     EQU 0x06
 0007           USB_MODE_ISO_IN:                             EQU 0x07
 0008           USB_MODE_NAK_OUT:                            EQU 0x08
 0009           USB_MODE_ACK_OUT:                            EQU 0x09
 000A           USB_MODE_RESERVED_1010:                      EQU 0x0A
 000B           USB_MODE_ACK_OUT_STATUS_IN:                  EQU 0x0B
 000C           USB_MODE_NAK_IN:                             EQU 0x0C
 000D           USB_MODE_ACK_IN:                             EQU 0x0D
 000E           USB_MODE_RESERVED_1110:                      EQU 0x0E
 000F           USB_MODE_ACK_IN_STATUS_OUT:                  EQU 0x0F
 0080           USB_MODE_STALL_DATA_EP:                      EQU 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; LoadInEP Count Toggle (Argument values)
 0000           ;--------------------------------------------------
 0000           USB_NO_TOGGLE:                               EQU 0x00
 0001           USB_TOGGLE:                                  EQU 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; FORCE J/K/SE0 (Argument values)
 0000           ;--------------------------------------------------
 00A0           USB_FORCE_J:                                 EQU 0xA0
 0080           USB_FORCE_K:                                 EQU 0x80
 00C0           USB_FORCE_SE0:                               EQU 0xC0
 0000           USB_FORCE_NONE:                              EQU 0x00
 0001           USB_FORCE_STATE:                             EQU 0x01
 0000           
 0000           ;-----------------------------------------------
 0000           ; Endpoint event flags
 0000           ;-----------------------------------------------
 0002           NO_EVENT_ALLOWED:	equ               2
 0001           EVENT_PENDING:      equ               1
 0000           NO_EVENT_PENDING:   equ               0
 0000           
 0000           IN_BUFFER_FULL:     equ               NO_EVENT_PENDING
 0001           IN_BUFFER_EMPTY:    equ               EVENT_PENDING
 0001           OUT_BUFFER_FULL:    equ               EVENT_PENDING
 0000           OUT_BUFFER_EMPTY:   equ               NO_EVENT_PENDING
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Request Dispatch Functions, including overrides
 0000           ;--------------------------------------------------
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_dev_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_07: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_08: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_dev_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_03: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_04: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_05: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_09: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ifc_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_09: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_10: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ifc_00: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_09: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_10: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_11: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ep_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ep_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_09: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_10: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_11: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_12: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ep_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_ep_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to Host (d2h) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_d2h_cls_ifc_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_cls_ifc_01: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_02: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to Device (h2d) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_cls_ifc_00: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_cls_ifc_09: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_10: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_11: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_cls_ifc_12: equ USB_NOT_SUPPORTED
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Standard Requests
 0000           ;-----------------------------------------------
 0001           USB_CB_h2d_std_dev: equ 1
 0001           USB_CB_h2d_std_ifc: equ 1
 0001           USB_CB_h2d_std_ep:  equ 1
 0000           USB_CB_h2d_std_oth: equ 0
 0001           USB_CB_d2h_std_dev: equ 1
 0001           USB_CB_d2h_std_ifc: equ 1
 0001           USB_CB_d2h_std_ep:  equ 1
 0000           USB_CB_d2h_std_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Class Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_cls_dev: equ 0
 0001           USB_CB_h2d_cls_ifc: equ 1
 0000           USB_CB_h2d_cls_ep:  equ 0
 0000           USB_CB_h2d_cls_oth: equ 0
 0000           USB_CB_d2h_cls_dev: equ 0
 0001           USB_CB_d2h_cls_ifc: equ 1
 0000           USB_CB_d2h_cls_ep:  equ 0
 0000           USB_CB_d2h_cls_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_vnd_dev: equ 0
 0000           USB_CB_h2d_vnd_ifc: equ 0
 0000           USB_CB_h2d_vnd_ep:  equ 0
 0000           USB_CB_h2d_vnd_oth: equ 0
 0000           USB_CB_d2h_vnd_dev: equ 0
 0000           USB_CB_d2h_vnd_ifc: equ 0
 0000           USB_CB_d2h_vnd_ep:  equ 0
 0000           USB_CB_d2h_vnd_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Reserved Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_rsv_dev: equ 0
 0000           USB_CB_h2d_rsv_ifc: equ 0
 0000           USB_CB_h2d_rsv_ep:  equ 0
 0000           USB_CB_h2d_rsv_oth: equ 0
 0000           USB_CB_d2h_rsv_dev: equ 0
 0000           USB_CB_d2h_rsv_ifc: equ 0
 0000           USB_CB_d2h_rsv_ep:  equ 0
 0000           USB_CB_d2h_rsv_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; HID Descriptor Types
 0000           ;-----------------------------------------------
 0021           DESCR_TYPE_HID_CLASS:        equ      0x21
 0009           DESCR_SIZE_HID_CLASS:        equ      9
 0022           DESCR_TYPE_HID_REPORT:       equ      0x22
 0023           DESCR_TYPE_HID_PHYSICAL:     equ      0x23
 0000           
 0000           ;--------------------------------------------------
 0000           ; Idle Timer (Argument values)
 0000           ;--------------------------------------------------
 0002           USB_IDLE_TIMER_RUNNING:                      EQU 0x02
 0001           USB_IDLE_TIMER_EXPIRED:                      EQU 0x01
 0000           USB_IDLE_TIMER_INDEFINITE:                   EQU 0x00
 0000           
 0000           ;--------------------------------------------------
 0000           ; Transfer Descriptor--Data Source
 0000           ;--------------------------------------------------
 0000           USB_DS_ROM:                                      EQU 0x00
 0001           USB_DS_RAM:                                      EQU 0x01
 0002           USB_DS_RAM_CB:                                   EQU 0x02
 0003           USB_DS_RAM_MASK:                                 EQU 0x03
 0000           
 0000           ;-----------------------------------------------
 0000           ; Transfer Completion Notification
 0000           ;-----------------------------------------------
 0000           USB_XFER_IDLE:         equ      0x00
 0001           USB_XFER_STATUS_ACK:   equ      0x01
 0002           USB_XFER_PREMATURE:    equ      0x02
 0003           USB_XFER_ERROR:        equ      0x03
 0000           
 0000           ; This macro is used to allocate a completion status block
 0000           ; for all Requests.  The macro parameter is used
 0000           ; to prefix the two data elements.
 0000           USB_XFER_STATUS:       equ      0
 0001           USB_XFER_LENGTH:       equ      1
 0000           MACRO    USB_XFER_STATUS_BLOCK
 0000               BLK    1    ; Completion Status
 0000               BLK    2    ; Transfer Length
 0000           USB_CLASS_NONE:                        EQU    0x00
 0001           USB_CLASS_HID:                         EQU    0x01
 0001           USBFS_CLASS:                           EQU    USB_CLASS_HID
 0000               
 0000           ;-----------------------------------------------
 0000           ; Modify the supported requests by redefining
 0000           ; them within the custom code area below
 0000           ;-----------------------------------------------
 0000           
 0000              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 0000              ;---------------------------------------------------
 0000              ; Insert your custom assembly code below this banner
 0000              ;---------------------------------------------------
 0000              ;   NOTE: interrupt service routines must preserve
 0000              ;   the values of the A and X CPU registers.
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert your custom assembly code above this banner
 0000              ;---------------------------------------------------
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert a lcall to a C function below this banner
 0000              ; and un-comment the lines between these banners
 0000              ;---------------------------------------------------
 0000              
 0000              ;PRESERVE_CPU_CONTEXT
 0000              ;lcall _My_C_Function
 0000              ;RESTORE_CPU_CONTEXT
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert a lcall to a C function above this banner
 0000              ; and un-comment the lines between these banners
 0000              ;---------------------------------------------------
 0000              ;@PSoC_UserCode_END@ (Do not change this line.)
 0000           
 0000           ;-----------------------------------------------
 0000           ; Has the user enabled any of the Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USBFS_VSR_SUPPORT: EQU 0
                IF USB_CB_h2d_vnd_dev
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ifc
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ep
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_oth
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_dev
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ifc
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ep
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_oth
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                
                ; end of file USBFS.inc
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY7C64215.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
                EXPORT USBFS_UpdateHIDTimer
                EXPORT _USBFS_UpdateHIDTimer
                EXPORT USBFS_bGetProtocol
                EXPORT _USBFS_bGetProtocol
                ;export of the following items allows an application to initialize the data
                ; if necessary, possibly on reboot or other programatic events (usb reset).
                ; USBFS_Protocol is the variable controling boot/report mode for 
                ; HID devices.
                EXPORT  _USBFS_IdleReload    ; Idle Timer Reload Value
                EXPORT   USBFS_IdleReload    ; Idle Timer Reload Value
                EXPORT  _USBFS_Protocol   ; Active Protocol
                EXPORT   USBFS_Protocol    ; Active Protocol
                
                AREA InterruptRAM (RAM,REL,CON)
                ;-----------------------------------------------
                ;  Constant Definitions
                ;-----------------------------------------------
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                ;----------------------------------------------------------------------------
                ; Interface Setting
                ;----------------------------------------------------------------------------
 0000             USBFS_IdleReload:
 0000            _USBFS_IdleReload:                     BLK   3h    ; Idle Timer Reload Value
 0003            USBFS_IdleTimer:                       BLK   3h    ; Idle Timers
 0006             USBFS_Protocol:   
 0006            _USBFS_Protocol:                       BLK   3h    ; Active Protocol
 0009           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_bGetProtocol
                ;
                ;  DESCRIPTION:   Returns the selected protocol value to the application
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:    A: Interface number
                ;
                ;  RETURNS:      A: Protocol values
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                ;.SECTION
 0000            USBFS_bGetProtocol:
 0000           _USBFS_bGetProtocol:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0002 62D306          mov reg[IDX_PP], >USBFS_Protocol
                   ENDIF
 0005 5C            mov  X, A                          ; Argument is the index
 0006 5206          mov  A, [X + USBFS_Protocol] ; Return the protocol
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0008 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 000A 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 000C 7F            ret
 000D           ;.ENDSECTION
 000D           ;-----------------------------------------------------------------------------
 000D           ;  FUNCTION NAME: USBFS_UpdateHIDTimer
 000D           ;
 000D           ;  DESCRIPTION:    Updates the HID report timer and reloads it if it expires
 000D           ;
 000D           ;-----------------------------------------------------------------------------
 000D           ;
 000D           ;  ARGUMENTS:     A: Interface number
 000D           ;
 000D           ;  RETURNS:       A: USB_IDLE_TIMER_EXPIRED, if the timer is running and expired
 000D           ;                    USB_IDLE_TIMER_RUNNING, if the timer is running
 000D           ;                    USB_IDLE_TIMER_INDEFINITE, if the report should be made on change
 000D           ;
 000D           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 000D           ;
 000D           ;  THEORY of OPERATION or PROCEDURE:
 000D           ;
 000D           ;-----------------------------------------------------------------------------
 000D           ;.SECTION
 000D            USBFS_UpdateHIDTimer:
 000D           _USBFS_UpdateHIDTimer:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 000D 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 000F 62D300          mov reg[IDX_PP], >USBFS_IdleReload
                   ENDIF
 0012 5C            mov  X, A                          ; Make the argument the index
 0013           ; Flow here to check if the timer is "indefinite"
 0013 3D0000        cmp  [X + USBFS_IdleReload], 0     ; Indefinite?
 0016 A013          jz   .indefinite                   ; Jump if Indefinite?
 0018           ; Flow here to check the timers
 0018 7B03          DEC    [X + USBFS_IdleTimer]       ; Decrement the timer
 001A C008          jc   .expired
 001C           ; Flow here if the timer has not expired
 001C 5002          mov  A, USB_IDLE_TIMER_RUNNING     ; Return value (not expired)
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 001E 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0020 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0022 7F            ret                                ; Quick exit
 0023           ; Jump here if the timer expired
 0023           .expired:
 0023 5200          mov  A, [X + USBFS_IdleReload]     ; Reload the timer
 0025 5403          mov  [X + USBFS_IdleTimer], A      ; 
 0027 5001          mov  A, USB_IDLE_TIMER_EXPIRED     ; Return value (expired)
 0029 7F            ret                                ; Quick exit
 002A           ; Jump here to make return "on change/indefinite"
 002A           .indefinite:
 002A 5000          mov  A, USB_IDLE_TIMER_INDEFINITE  ; Return value (change/indefinite)
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 002C 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 002E 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0030 7F            ret                                ; Exit
 0031           ;.ENDSECTION
 0031           ;-----------------------------------------------------------------------------
 0031           ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_06
 0031           ;
 0031           ;  DESCRIPTION:   Get Interface Descriptor
 0031           ;
 0031           ;****************************************************************
 0031           ; STANDARD INTERFACE IN REQUEST: Get_Interface_Descriptor
 0031           ;****************************************************************
 0031           ;
 0031           ; bmRequestType   : (IN | STANDARD | INTERFACE)    = 81h
 0031           ; bRequest        : GET_DESCRIPTOR                 = 06h    
 0031           ; wValue          : DESCRIPTOR TYPE | INDEX        = xxxxh  
 0031           ; wIndex          : INTERFACE                      = --xxh
 0031           ; wLength         : DESCRIPTOR_LENGTH              = --xxh  
 0031           ; 
 0031           ; The GET_INTERFACE_DESCRIPTOR request returns the specified 
 0031           ; descriptor if the descriptor exists. 
 0031           ;
 0031           ; The upper byte of request_value contains the descriptor type and 
 0031           ; the lower byte contains the descriptor index. request_index 
 0031           ; contains either 0000h or the Language ID. request_length contains 
 0031           ; the descriptor length. The actual descriptor information is 
 0031           ; transferred in subsequent data packets. 
 0031           ;
 0031           ; USB defines only a DEVICE recipient but the HID spec added 
 0031           ; support for the INTERFACE recipient.
 0031           ;
 0031           ; Get Descriptor from an HID interface returns either HID, 
 0031           ; REPORT, or PHYSICAL descriptors.
 0031           ;
 0031           ;****************************************************************
                IF (USB_CB_SRC_d2h_std_ifc_06 & USB_UM_SUPPLIED)
                export  USBFS_CB_d2h_std_ifc_06
 0031           USBFS_CB_d2h_std_ifc_06:
 0031 9134          call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
 0033 08            push  A                            ; Save the MSB
 0034 5D5B          mov   A, REG[USBFS_EP0DATA+wValueHi] ; Get descriptor type
 0036 3921          cmp   A, DESCR_TYPE_HID_CLASS      ; HID Class descriptor?
 0038 A00E          jz    .send_hid_class_descr
 003A 3922          cmp   A, DESCR_TYPE_HID_REPORT     ; HID Report descriptor?
 003C A004          jz    .send_hid_report_descr
 003E           ; Jump or flow here if the request is not supported
 003E           .not_supported:
 003E 18            pop   A                            ; Restore the stack
 003F 817F          jmp   USBFS_Not_Supported_Local_Hid
 0041           ; Jump here to send the HID Report Descriptor
 0041           .send_hid_report_descr:
 0041 18            pop   A                            ; Restore the interface lookup table MSB
 0042 4B            swap  A, X                         ; Add the offset
 0043 0102          add   A, 2                         ; Point to the right table entry
 0045 8005          jmp   .finish
 0047           ; Jump here to send the HID Class Descriptor
 0047           .send_hid_class_descr:
 0047 18            pop   A                            ; Restore the interface lookup table MSB
 0048 4B            swap  A, X                         ; Add the offset
 0049 0104          add   A, 4                         ; Point to the right table entry
 004B           ; Jump or flow here with A:X Pointing to the 
 004B           .finish:
 004B 4B            swap  A, X                         ; Back where they belong
 004C 0900          adc   A, 0                         ; Don't forget the carry
 004E 550000        mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
 0051 9000          call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
 0053                                                  ; ITempW has the address
 0053           ; Get the interface number
 0053 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
 0055 5300          mov   [USBFS_t2], A                ; Save it for the call to LOOKUP
 0057 5100          mov   A, [USBFS_t1]                ; Get the transfer descriptor ROM Address MSB
 0059 5801          mov   X, [USBFS_t1+1]              ; Get the transfer descriptor ROM Address LSB
 005B           
 005B 8166          jmp   USBFS_GetTableEntry_Local_Hid
                ELSE
                IF (USB_CB_SRC_d2h_std_ifc_06 & USB_APP_SUPPLIED)
                export  USBFS_CB_d2h_std_ifc_06
                USBFS_CB_d2h_std_ifc_06:
                    LJMP    APP_USBFS_CB_d2h_std_ifc_06
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_01
                ;
                ;  DESCRIPTION:   Get Report
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE IN REQUEST: Get_Report   
                ;****************************************************************
                ;
                ; bmRequestType  : (IN | CLASS | INTERFACE)       = A1h
                ; bRequest       : GET_REPORT                     = 01h    
                ; wValue         : REPORT TYPE | REPORT ID        = xxxxh  
                ; wIndex         : INTERFACE                      = --xxh
                ; wLength        : REPORT LENGTH                  = --xxh  
                ; 
                ; The GET_REPORT request allows the host to receive a report from 
                ; a specific interface via the control pipe. 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_UM_SUPPLIED)
                export  USBFS_CB_d2h_cls_ifc_01
 005D           USBFS_CB_d2h_cls_ifc_01:
 005D           
 005D 9090          call    Find_Report
 005F 4B            SWAP    A, X                        ; LSB non-zero?
 0060 B006          JNZ     .ok                         ; Exit on non-zero
 0062 4B            SWAP    A, X                        ; MSB zero
 0063 A15B          JZ      USBFS_Not_Supported_Local_Hid                          ; Jump to the null pointer handler
 0065 8002          JMP     .exit
 0067           .ok:
 0067 4B            SWAP    A, X                        ; Put them back
 0068           .exit:
 0068               
 0068 8159          jmp     USBFS_GetTableEntry_Local_Hid
                ELSE
                IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_APP_SUPPLIED)
                export  USBFS_CB_d2h_cls_ifc_01
                USBFS_CB_d2h_cls_ifc_01:
                    LJMP    APP_USBFS_CB_d2h_cls_ifc_01
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_02
                ;
                ;  DESCRIPTION:   Get Idle
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE IN REQUEST: Get_Idle
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                ; bRequest       : GET_IDLE                       = 02h    
                ; wValue         : REPORT ID                      = 00xxh  
                ; wIndex         : INTERFACE                      = --xxh
                ; wLength        : Report Size                    = 0001h  
                ; 
                ; The GET_IDLE request reads the current idle rate for a given 
                ; input report on a specific interface. 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_UM_SUPPLIED)
 006A           .LITERAL
 006A           GetSetIdleTable:
 006A 02            DB      ((3h) - 1)                 ; Number of table entries - 1
 006B 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 006C 0001          DW  1                             ; Transfer size
 006E 0000          DW  USBFS_IdleReload                             ; Data source address
 0070 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 0072 DE            DB  0xde                           ; Reserved 
 0073 01            DB  USB_DS_RAM                             ; Data source (USB_DS_*)
 0074 0001          DW  1                             ; Transfer size
 0076 0001          DW  USBFS_IdleReload+1                             ; Data source address
 0078 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 007A DE            DB  0xde                           ; Reserved 
 007B           .ENDLITERAL
                export  USBFS_CB_d2h_cls_ifc_02
 007B           USBFS_CB_d2h_cls_ifc_02:
 007B 5D5A          mov   A, REG[USBFS_EP0DATA+wValueLo] ; Get the report number
 007D 3900          cmp   A, 0                         ; We don't support report by report idle
 007F B13F          jnz   USBFS_Not_Supported_Local_Hid
 0081           
 0081 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
 0083 3903          cmp   A, 3h                        ; We don't support report by report idle
 0085 D139          jnc   USBFS_Not_Supported_Local_Hid
 0087           
 0087           
 0087 5300          mov   [USBFS_t2], A                ; Use the UM temp var--Selector
 0089 506A          mov   A,>GetSetIdleTable           ; Get the ROM Address MSB
 008B 576A          mov   X,<GetSetIdleTable           ; Get the ROM Address LSB
 008D               
 008D 8134          jmp   USBFS_GetTableEntry_Local_Hid
                ELSE
                IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_APP_SUPPLIED)
                export  USBFS_CB_d2h_cls_ifc_02
                USBFS_CB_d2h_cls_ifc_02:
                    LJMP    APP_USBFS_CB_d2h_cls_ifc_02
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_03
                ;
                ;  DESCRIPTION:   Get Protocol
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE IN REQUEST: Get_Protocol
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                ; bRequest       : GET_PROTOCOL                   = 03h    
                ; wValue         : RESERVED                       = 0000h  
                ; wIndex         : INTERFACE                      = --xxh
                ; wLength        : SIZEOF_INTERFACE_PROTOCOL      = 0001h  
                ; 
                ; The GET_PROTOCOL request reads which protocol is currently 
                ; active.
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_UM_SUPPLIED)
 008F           .LITERAL
 008F           GetProtocolTable:
 008F 01            DB      ((2) - 1)                 ; Number of table entries - 1
 0090 00            DB  USB_DS_ROM                             ; Data source (USB_DS_*)
 0091 0001          DW  1                             ; Transfer size
 0093 00A0          DW  ROM_ZERO                             ; Data source address
 0095 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 0097 DE            DB  0xde                           ; Reserved 
 0098 00            DB  USB_DS_ROM                             ; Data source (USB_DS_*)
 0099 0001          DW  1                             ; Transfer size
 009B 00A1          DW  ROM_ONE                             ; Data source address
 009D 0000          DW  NULL_PTR                             ; Transfer Completion Status Block Address
 009F DE            DB  0xde                           ; Reserved 
 00A0 00        ROM_ZERO:   DB  0
 00A1 01        ROM_ONE:    DB  1
 00A2           .ENDLITERAL
                export  USBFS_CB_d2h_cls_ifc_03
 00A2           USBFS_CB_d2h_cls_ifc_03:
 00A2 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
 00A4 3903          cmp   A, 3h                        ; Range check
 00A6 D118          jnc   USBFS_Not_Supported_Local_Hid
 00A8           
 00A8 5C            mov   X, A                         ; Get the protocol for the requested interface
 00A9 5206          mov   A, [X + USBFS_Protocol]      ; 
 00AB           
 00AB 5300          mov   [USBFS_t2], A                ; Use the UM temp var--Selector
 00AD           
 00AD 508F          mov   A,>GetProtocolTable          ; Get the ROM Address MSB
 00AF 578F          mov   X,<GetProtocolTable          ; Get the ROM Address LSB
 00B1               
 00B1 8110          jmp   USBFS_GetTableEntry_Local_Hid
                ELSE
                IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_APP_SUPPLIED)
                export  USBFS_CB_d2h_cls_ifc_03
                USBFS_CB_d2h_cls_ifc_03:
                    LJMP    APP_USBFS_CB_d2h_cls_ifc_03
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_09
                ;
                ;  DESCRIPTION:   Set Report
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE OUT REQUEST: Set_Report
                ;****************************************************************
                ;
                ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                ; bRequest        : SET_REPORT                     = 09h    
                ; wValue          : REPORT TYPE | REPORT ID        = xxxxh  
                ; wIndex          : INTERFACE                      = --xxh
                ; wLength         : REPORT LENGTH                  = --xxh  
                ; 
                ; The SET_REPORT request allows the host to send a report to the 
                ; device, possibly setting the state of input, output or feature 
                ; controls. 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_UM_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_09
 00B3           USBFS_CB_h2d_cls_ifc_09:
 00B3 903A          CALL    Find_Report
 00B5 4B            SWAP    A, X                        ; LSB non-zero?
 00B6 B006          JNZ     .ok                         ; Exit on non-zero
 00B8 4B            SWAP    A, X                        ; MSB zero
 00B9 A105          JZ      USBFS_Not_Supported_Local_Hid                          ; Jump to the null pointer handler
 00BB 8002          JMP     .exit
 00BD           .ok:
 00BD 4B            SWAP    A, X                        ; Put them back
 00BE           .exit:
 00BE               
 00BE 8103          JMP     USBFS_GetTableEntry_Local_Hid
                ELSE
                IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_APP_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_09
                USBFS_CB_h2d_cls_ifc_09:
                    LJMP    APP_USBFS_CB_h2d_cls_ifc_09
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_10
                ;
                ;  DESCRIPTION:   Set Idle
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE OUT REQUEST: Set_Idle
                ;****************************************************************
                ;
                ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                ; bRequest        : SET_IDLE                       = 0Ah    
                ; wValue          : DURATION | REPORT ID           = xxxxh  
                ; wIndex          : INTERFACE                      = --xxh
                ; wLength         : ZERO                           = 0000h  
                ; 
                ; The SET_IDLE request silences a particular input report (or all 
                ; input reports) on a specific interface until a new event occurs 
                ; or the specified amount of time passes. 
                ;
                ;****************************************************************
                ; Note: This function does not support multiple reports per interface.
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_UM_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_10
 00C0           USBFS_CB_h2d_cls_ifc_10:
 00C0 5D5A          mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the report number
 00C2 3900          cmp   A, 0                         ; We don't support report by report idle
 00C4 B0FA          jnz   USBFS_Not_Supported_Local_Hid
 00C6           
 00C6 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
 00C8 3903          cmp   A, 3h                        ; Range Check
 00CA D0F4          jnc   USBFS_Not_Supported_Local_Hid
 00CC           
 00CC 5C            mov   X, A                         ; Interface Number becomes an index
 00CD           
 00CD 5D5B          mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the duration
 00CF           
 00CF 5400          mov   [X+USBFS_IdleReload], A      ; Save the reload immediately
 00D1 3900          cmp   A, 0                         ; Is this request setting the duration to indefinite?
 00D3 A006          jz    .reload                      ; If so, reload the timer 
 00D5           
 00D5               ; Otherwise, we need to determine if we reset the current expiry
 00D5               ; (HID Spec says to send the next report if we are within 4 ms (1 count)
 00D5               ; of sending the next report
 00D5 3D0301        cmp   [X+USBFS_IdleTimer], 1       ; Within 4 ms?
 00D8 A003          jz    .done                        ; Jump to let the timer expire "naturally" 
 00DA           
 00DA           ; Jump or Flow here to reload the timer
 00DA           .reload:
 00DA 5403          mov   [x+USBFS_IdleTimer], A       ; Reload the timer
 00DC                       
 00DC           .done:
 00DC 8000          jmp   USBFS_NoDataStageControlTransfer
                ELSE
                IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_APP_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_10
                USBFS_CB_h2d_cls_ifc_10:
                    LJMP    APP_USBFS_CB_h2d_cls_ifc_10
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_11
                ;
                ;  DESCRIPTION:   Set Idle
                ;
                ;****************************************************************
                ; HID CLASS INTERFACE OUT REQUEST: Set_Protocol
                ;****************************************************************
                ;
                ; bmRequestType  : (OUT | CLASS | INTERFACE)      = 21h
                ; bRequest       : SET_PROTOCOL                   = 0Bh    
                ; wValue         : DURATION | REPORT ID           = xxxxh  
                ; wIndex         : PROTOCOL                       = --xxh
                ; wLength        : ZERO                           = 0000h  
                ; 
                ; The SET_PROTOCOL request switches between the boot protocol and 
                ; the report protocol (or vice versa). 
                ;
                ;****************************************************************
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_UM_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_11
 00DE           USBFS_CB_h2d_cls_ifc_11:
 00DE 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
 00E0 3903          cmp   A, 3h                        ; Range check
 00E2 D0DC          jnc   USBFS_Not_Supported_Local_Hid
 00E4           
 00E4 5C            mov   X, A                         ; Save the interface number
 00E5           
 00E5 5D5A          mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the protocol
 00E7 3902          cmp   A, (1+1)                     ; Must be zero or one
 00E9 D0D5          jnc   USBFS_Not_Supported_Local_Hid
 00EB           
 00EB 5406          mov   [X + USBFS_Protocol], A      ; Save the new protocol
 00ED           
 00ED 8000          jmp   USBFS_NoDataStageControlTransfer
                ELSE
                IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_APP_SUPPLIED)
                export  USBFS_CB_h2d_cls_ifc_11
                USBFS_CB_h2d_cls_ifc_11:
                    LJMP    APP_USBFS_CB_h2d_cls_ifc_11
                ENDIF
                ENDIF
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME:   Find_Report
                ;
                ;  DESCRIPTION:     Scan the HID Report Tree and return a pointer to the 
                ;                   HID Report Transfer Descriptor (TD) or NULL
                ;                   This function is called in during the processing of
                ;                   GET_REPORT or SET_REPORT HID Class Requests.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:       
                ;
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
                export USBFS_cls_hid_Find_Report
 00EF           USBFS_cls_hid_Find_Report:
 00EF           Find_Report:
 00EF 9076          call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
 00F1               ; The first entry of the table point to the report table.
 00F1 550000        mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
 00F4 9000          call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
 00F6                                                  ; ITempW has the address
 00F6 5D5C          mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
 00F8 5300          mov   [USBFS_t2], A                ; Use the UM temp var--Selector
 00FA 5100          mov   A, [USBFS_t1]                ; Get the Table Address MSB
 00FC 5801          mov   X, [USBFS_t1+1]              ; Get the Table Address LSB
 00FE           
 00FE 6500          asl   [USBFS_t2] ; Convert the index to offset
 0100           
 0100 4B            swap  A, X
 0101 0200          add   A, [USBFS_t2]
 0103 4B            swap  A, X
 0104 0900          adc   A, 0                         ; A:X now points to the table entry we want
 0106           
 0106           ; Get the pointer to the Report Type Table
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0106 7140            or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0108 08            PUSH A                              ; Quickly get a RAM temp
 0109 08            PUSH A                              ; Save the source MSB
 010A 28            ROMX                                ; Get the first byte
 010B 10            PUSH X                              ; Save X
 010C 4F            MOV  X,SP                           ; Get SP, to index to the temp 
 010D 54FD          MOV  [X - 3],A                      ; Save the first byte
 010F 20            POP  X                              ; Get back the source LSB
 0110 18            POP  A                              ; And the MSB
 0111 75            INC  X                              ; Point to the second byte
 0112 0900          ADC  A, 0                           ; 
 0114 28            ROMX                                ; Get the second byte
 0115 5C            MOV  X,A                            ; Save it in X
 0116 18            POP  A                              ; And the first byte in A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0117 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0119 7100            or    F,  FLAG_PGMODE_MASK & 00
                   ENDIF
                
                ; Dereference to the requested Report Type
 011B 08            push  A                            ; Don't loose the pointer MSB
 011C 5D5B          mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the Report Type
 011E 78            dec   A                            ; Make it 0 based
 011F 5300          mov   [USBFS_t2], A                ; Use the UM temp var--Selector
 0121 18            pop   A                            ; Get the MSB back
 0122 08            push  A                            ; Don't loose the pointer MSB
 0123 28            romx                               ; Get the table size
 0124 3A00          cmp   A, [USBFS_t2]                ; Range check
 0126 C03B          jc    .not_supported_pop_1
 0128                   
 0128 18            pop   A                            ; Get the MSB back
 0129 75            inc   X                            ; Point to the next  entry
 012A 0900          adc   A, 0                         ;
 012C           
 012C 6500          ASL     [USBFS_t2]                       ; Simply shift (mult by 2)
 012E 6500          ASL     [USBFS_t2]                       ;              (mult by 4)
 0130           
 0130 4B            swap  A, X
 0131 0200          add   A, [USBFS_t2]
 0133 4B            swap  A, X
 0134 0900          adc   A, 0                         ; A:X now points to the table entry we want
 0136           ; Get the pointer to the requested Report Table
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0136 7140            or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0138 08            PUSH A                              ; Quickly get a RAM temp
 0139 08            PUSH A                              ; Save the source MSB
 013A 28            ROMX                                ; Get the first byte
 013B 10            PUSH X                              ; Save X
 013C 4F            MOV  X,SP                           ; Get SP, to index to the temp 
 013D 54FD          MOV  [X - 3],A                      ; Save the first byte
 013F 20            POP  X                              ; Get back the source LSB
 0140 18            POP  A                              ; And the MSB
 0141 75            INC  X                              ; Point to the second byte
 0142 0900          ADC  A, 0                           ; 
 0144 28            ROMX                                ; Get the second byte
 0145 5C            MOV  X,A                            ; Save it in X
 0146 18            POP  A                              ; And the first byte in A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0147 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0149 7100            or    F,  FLAG_PGMODE_MASK & 00
                   ENDIF
                
 014B 4B            SWAP    A, X                        ; LSB non-zero?
 014C B006          JNZ     .ok                         ; Exit on non-zero
 014E 4B            SWAP    A, X                        ; MSB zero
 014F A013          JZ      .not_supported                          ; Jump to the null pointer handler
 0151 8002          JMP     .exit
 0153           .ok:
 0153 4B            SWAP    A, X                        ; Put them back
 0154           .exit:
 0154           ; Dereference to the requested TRANSFER DESCRIPTOR
 0154 08            push  A                            ; Don't loose the pointer MSB
 0155 5D5A          mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the Report ID
 0157 5300          mov   [USBFS_t2], A                ; Use the UM temp var--Selector
 0159 18            pop   A                            ; Get the MSB back
 015A 08            push  A                            ; Don't loose the pointer MSB
 015B 28            romx                               ; Get the table size
 015C 3A00          cmp   A, [USBFS_t2]                ; Range check
 015E C003          jc    .not_supported_pop_1
 0160                   
 0160 18            pop   A                            ; Get the MSB back
 0161           
 0161 7F            ret                                ; Finished A:X point to the TD
 0162           
 0162           .not_supported_pop_1:
 0162 18            pop   A                            ; Restore the stack
 0163           .not_supported:
 0163 5000          mov   A, 0                         ; Return a null pointer
 0165 5C            mov   X, A                         ; 
 0166 7F            ret
 0167           
 0167           ;-----------------------------------------------------------------------------
 0167           ;  FUNCTION NAME: USBFS_GetInterfaceLookupTable
 0167           ;
 0167           ;  DESCRIPTION:   Point to the interface lookup table
 0167           ;
 0167           ;-----------------------------------------------------------------------------
 0167           ;
 0167           ;  ARGUMENTS:
 0167           ;
 0167           ;  RETURNS:
 0167           ;
 0167           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0167           ;
 0167           ;  THEORY of OPERATION or PROCEDURE:
 0167           ;
 0167           ;-----------------------------------------------------------------------------
                export  USBFS_GetInterfaceLookupTable
 0167           USBFS_GetInterfaceLookupTable:
 0167 9000          call  USBFS_GET_CONFIG_TABLE_ENTRY ; Get the CONFIG_LOOKUP entry
 0169 4B            swap  A, X                         ; Second entry points to the HID_LOOKUP table
 016A 0102          add   A, 2                         ; So add two
 016C 4B            swap  A, X                         ; 
 016D 0900          adc   A, 0                         ; Don't forget the carry
 016F 550000        mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
 0172 9000          call  USBFS_GETWORD                ; Get the pointer to the HID_LOOKUP table
 0174                                                  ; ITempW has the address
 0174 5100          mov   A, [USBFS_t1]                ; Get the table address MSB
 0176 5801          mov   X, [USBFS_t1+1]              ; Get the table address LSB
 0178 7F            ret
 0179           
 0179           
 0179           
 0179           
 0179           ;-----------------------------------------------------------------------------
 0179           ;-----------------------------------------------------------------------------
 0179           ;  USB 2nd Tier Dispactch Jump Tables for HID Class Requests (based on bRequest)
 0179           ;-----------------------------------------------------------------------------
 0179           ;  FUNCTION NAME: ;  USB 2nd Tier Dispactch Jump Table
 0179           ;
 0179           ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
 0179           ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
 0179           ;
 0179           ;-----------------------------------------------------------------------------
 0179           ;
 0179           ;  ARGUMENTS:
 0179           ;
 0179           ;  RETURNS:
 0179           ;
 0179           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0179           ;
 0179           ;  THEORY of OPERATION or PROCEDURE:
 0179           ;
 0179           ;-----------------------------------------------------------------------------
 0179           ;-----------------------------------------------------------------------------
 0179           USBFS_DT_h2d_cls_ifc:
 0179           ;-----------------------------------------------------------------------------
 0179           
 0179 8045          jmp     USBFS_CB_h2d_cls_ifc_00
 017B 8043          jmp     USBFS_CB_h2d_cls_ifc_01
 017D 8041          jmp     USBFS_CB_h2d_cls_ifc_02
 017F 803F          jmp     USBFS_CB_h2d_cls_ifc_03
 0181 803D          jmp     USBFS_CB_h2d_cls_ifc_04
 0183 803B          jmp     USBFS_CB_h2d_cls_ifc_05
 0185 8039          jmp     USBFS_CB_h2d_cls_ifc_06
 0187 8037          jmp     USBFS_CB_h2d_cls_ifc_07
 0189 8035          jmp     USBFS_CB_h2d_cls_ifc_08
 018B 8F27          jmp     USBFS_CB_h2d_cls_ifc_09
 018D 8F32          jmp     USBFS_CB_h2d_cls_ifc_10
 018F 8F4E          jmp     USBFS_CB_h2d_cls_ifc_11
 0191 802D          jmp     USBFS_CB_h2d_cls_ifc_12
 0193           
 0193           USBFS_DT_h2d_cls_ifc_End:
 000D           USBFS_DT_h2d_cls_ifc_Size: equ (USBFS_DT_h2d_cls_ifc_End-USBFS_DT_h2d_cls_ifc) / 2
 0193           USBFS_DT_h2d_cls_ifc_Dispatch::
 0193 3C0000        CMP     [USBFS_Configuration], 0   ; Is the device configured?
 0196 B003          JNZ     .configured                ; Jump on configured
 0198 8026          JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
 019A           ; Jump here if the device is configured
 019A           .configured:
 019A 5D59          MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
 019C 390D          CMP   A,USBFS_DT_h2d_cls_ifc_Size
 019E D004          JNC   .dispatch_not_supported
 01A0 64            ASL   A
 01A1 EFD7          JACC  USBFS_DT_h2d_cls_ifc
 01A3           .dispatch_not_supported:
 01A3 801B          JMP  USBFS_Not_Supported_Local_Hid    
 01A5           
 01A5           ;-----------------------------------------------------------------------------
 01A5           USBFS_DT_d2h_cls_ifc:
 01A5           ;-----------------------------------------------------------------------------
 01A5           
 01A5 8019          jmp     USBFS_CB_d2h_cls_ifc_00
 01A7 8EB5          jmp     USBFS_CB_d2h_cls_ifc_01
 01A9 8ED1          jmp     USBFS_CB_d2h_cls_ifc_02
 01AB 8EF6          jmp     USBFS_CB_d2h_cls_ifc_03
 01AD           
 01AD           USBFS_DT_d2h_cls_ifc_End:
 0004           USBFS_DT_d2h_cls_ifc_Size: equ (USBFS_DT_d2h_cls_ifc_End-USBFS_DT_d2h_cls_ifc) / 2
 01AD           USBFS_DT_d2h_cls_ifc_Dispatch::
 01AD 3C0000        CMP     [USBFS_Configuration], 0   ; Is the device configured?
 01B0 B003          JNZ     .configured                ; Jump on configured
 01B2 800C          JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
 01B4           ; Jump here if the device is configured
 01B4           .configured:
 01B4 5D59          MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
 01B6 3904          CMP   A,USBFS_DT_d2h_cls_ifc_Size
 01B8 D004          JNC   .dispatch_not_supported
 01BA 64            ASL   A
 01BB EFE9          JACC  USBFS_DT_d2h_cls_ifc
 01BD           .dispatch_not_supported:
 01BD 8001          JMP  USBFS_Not_Supported_Local_Hid    
 01BF           
                IF (USB_CB_SRC_d2h_cls_ifc_00 & USB_NOT_SUPPORTED)
                export  USBFS_CB_d2h_cls_ifc_00
 01BF           USBFS_CB_d2h_cls_ifc_00:
                ENDIF
                IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_NOT_SUPPORTED)
                export  USBFS_CB_d2h_cls_ifc_01
                USBFS_CB_d2h_cls_ifc_01:
                ENDIF
                IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_NOT_SUPPORTED)
                export  USBFS_CB_d2h_cls_ifc_02
                USBFS_CB_d2h_cls_ifc_02:
                ENDIF
                IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_NOT_SUPPORTED)
                export  USBFS_CB_d2h_cls_ifc_03
                USBFS_CB_d2h_cls_ifc_03:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_00 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_00
 01BF           USBFS_CB_h2d_cls_ifc_00:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_01 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_01
 01BF           USBFS_CB_h2d_cls_ifc_01:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_02 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_02
 01BF           USBFS_CB_h2d_cls_ifc_02:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_03 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_03
 01BF           USBFS_CB_h2d_cls_ifc_03:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_04 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_04
 01BF           USBFS_CB_h2d_cls_ifc_04:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_05 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_05
 01BF           USBFS_CB_h2d_cls_ifc_05:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_06 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_06
 01BF           USBFS_CB_h2d_cls_ifc_06:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_07 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_07
 01BF           USBFS_CB_h2d_cls_ifc_07:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_08 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_08
 01BF           USBFS_CB_h2d_cls_ifc_08:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_09
                USBFS_CB_h2d_cls_ifc_09:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_10
                USBFS_CB_h2d_cls_ifc_10:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_11
                USBFS_CB_h2d_cls_ifc_11:
                ENDIF
                IF (USB_CB_SRC_h2d_cls_ifc_12 & USB_NOT_SUPPORTED)
                export  USBFS_CB_h2d_cls_ifc_12
 01BF           USBFS_CB_h2d_cls_ifc_12:
                ENDIF
                
 01BF           USBFS_Not_Supported_Local_Hid:
 01BF 7D0000        LJMP     USBFS_Not_Supported
 01C2           
 01C2           USBFS_GetTableEntry_Local_Hid:
 01C2 7D0000        LJMP     USBFS_GetTableEntry
 01C5           
 01C5           ;-----------------------------------------------
 01C5           ; Add custom application code for routines 
 01C5           ; redefined by USB_APP_SUPPLIED in USB_HID.INC
 01C5           ;-----------------------------------------------
 01C5           
 01C5              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 01C5              ;---------------------------------------------------
 01C5              ; Insert your custom code below this banner
 01C5              ;---------------------------------------------------
 01C5           
 01C5              ;---------------------------------------------------
 01C5              ; Insert your custom code above this banner
 01C5              ;---------------------------------------------------
 01C5              ;@PSoC_UserCode_END@ (Do not change this line.)
 01C5           
 01C5           ; End of File USBFS_cls_hid.asm
