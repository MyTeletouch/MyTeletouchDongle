 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: USBFS_drv.asm
 0000           ;;  Version: 2.10, Updated on 2015/3/4 at 22:27:56
 0000           ;;  Generated by PSoC Designer 5.4.3191
 0000           ;;
 0000           ;;  DESCRIPTION: USB Device User Module control endpoint driver
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's
 0000           ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Data Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_DR:   	  equ 40h		   ; PMA Data Register                        (RW)
 0041           PMA1_DR:   	  equ 41h		   ; PMA Data Register                        (RW)
 0042           PMA2_DR:   	  equ 42h		   ; PMA Data Register                        (RW)
 0043           PMA3_DR:   	  equ 43h		   ; PMA Data Register                        (RW)
 0044           PMA4_DR:   	  equ 44h		   ; PMA Data Register                        (RW)
 0045           PMA5_DR:   	  equ 45h		   ; PMA Data Register                        (RW)
 0046           PMA6_DR:   	  equ 46h		   ; PMA Data Register                        (RW)
 0047           PMA7_DR:   	  equ 47h		   ; PMA Data Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 0048           USB_SOF0:     equ 48h		   ; SOF Frame Number LSB(7:0)                (R)
 0049           USB_SOF1:     equ 49h		   ; SOF Frame Number MSB(10:8)               (R)
 0000           
 004A           USB_CR0:      equ 4Ah		   ; USB Control Register 0                   (RW)
 0080           USB_CR0_ENABLE:       equ 80h    ; MASK: enable/disable USB SIE	          (RW)
 007F           USB_CR0_DEVICE_ADDR:  equ 7Fh    ; MASK: USB Device Address               (RW)
 0000           
 004B           USBIO_CR0:    equ 4Bh		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR0_TEN:        equ 80h    ; MASK: enable/disable manual tx on D+ D-(RW)
 0040           USBIO_CR0_TSE0:       equ 40h    ; MASK: transmit a single ended 0        (RW)
 0020           USBIO_CR0_TD:         equ 20h    ; MASK: transmit J or K state on Bus     (RW)
 0001           USBIO_CR0_RD:         equ 01h    ; MASK: read state of differential rx    (R)
 0000           
 004C           USBIO_CR1:    equ 4Ch		   ; USB IO Control Register 0                (#)
 0080           USBIO_CR1_IOMODE:     equ 80h    ; MASK: select Bit Bang Mode/USB Mode    (RW)
 0040           USBIO_CR1_DRIVE_MODE: equ 40h    ; MASK: select CMOS mode/Open Drain mode (RW)
 0020           USBIO_CR1_DPI:        equ 20h    ; MASK: drive D+ high/low                (RW)
 0010           USBIO_CR1_DMI:        equ 10h    ; MASK: drive D- high/low                (RW)
 0008           USBIO_CR1_PS2PUEN:    equ 08h    ; MASK: enable/disable 5K Pullup on D+/D-(RW)
 0004           USBIO_CR1_USBPUEN:    equ 04h    ; MASK: enable/disable USB Pullup on D+  (RW)
 0002           USBIO_CR1_DPO:        equ 02h    ; MASK: read D+ pin                      (R)
 0001           USBIO_CR1_DMO:        equ 01h    ; MASK: read D- pin                      (R)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Endpoint Registers
 0000           ;------------------------------------------------
 0000           
 004E           EP1_CNT1:     equ 4Eh		   ; Endpoint 1 Count Register 1              (#)
 0080           EP1_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP1_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP1_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 004F           EP1_CNT:      equ 4Fh		   ; Endpoint 1 Count Register 0              (RW)
 0000           
 0050           EP2_CNT1:     equ 50h		   ; Endpoint 2 Count Register 1              (#)
 0080           EP2_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP2_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP2_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0051           EP2_CNT:      equ 51h		   ; Endpoint 2 Count Register 0              (RW)
 0000           
 0052           EP3_CNT1:     equ 52h		   ; Endpoint 3 Count Register 1              (#)
 0080           EP3_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP3_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP3_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0053           EP3_CNT:      equ 53h		   ; Endpoint 3 Count Register 0              (RW)
 0000           
 0054           EP4_CNT1:     equ 54h		   ; Endpoint 4 Count Register 1              (#)
 0080           EP4_CNT1_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP4_CNT1_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (R)
 0001           EP4_CNT1_CNT_MSB:     equ 01h    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0055           EP4_CNT:      equ 55h		   ; Endpoint 4 Count Register 0              (RW)
 0000           
 0056           EP0_CR:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           
 0000           ; ------------------------------------------------------------------------------
 0000           ; The following defines are depricated.  Left here for compatibility. 
 0056           EP0_CR0:      equ 56h          ; Endpoint 0 Control Register 0            (#)
 0080           EP0_CR0_SETUP_RCVD:   equ 80h    ; MASK: Setup received                   (RC)
 0040           EP0_CR0_IN_RCVD:      equ 40h    ; MASK: IN received                      (RC)
 0020           EP0_CR0_OUT_RCVD:     equ 20h    ; MASK: OUT received                     (RC)
 0010           EP0_CR0_ACKD:         equ 10h    ; MASK: Acked transaction                (RC)
 000F           EP0_CR0_MODE:         equ 0Fh    ; MASK: Mode response for endpoint       (RW)
 0000           ; ------------------------------------------------------------------------------
 0000           
 0057           EP0_CNT:      equ 57h          ; Endpoint 0 Count Register                (#)
 0080           EP0_CNT_DATA_TOGGLE: equ 80h    ; MASK: select data toggle 1/0           (RW)
 0040           EP0_CNT_DATA_VALID:  equ 40h    ; MASK: read error status on rx data     (RC)
 000F           EP0_CNT_BYTE_CNT:    equ 0Fh    ; MASK: MSB of 9-bit count value         (RW)
 0000           
 0058           EP0_DR0:      equ 58h          ; Endpoint 0 Data Register 0               (RW)
 0059           EP0_DR1:      equ 59h          ; Endpoint 0 Data Register 1               (RW)
 005A           EP0_DR2:      equ 5Ah          ; Endpoint 0 Data Register 2               (RW)
 005B           EP0_DR3:      equ 5Bh          ; Endpoint 0 Data Register 3               (RW)
 005C           EP0_DR4:      equ 5Ch          ; Endpoint 0 Data Register 4               (RW)
 005D           EP0_DR5:      equ 5Dh          ; Endpoint 0 Data Register 5               (RW)
 005E           EP0_DR6:      equ 5Eh          ; Endpoint 0 Data Register 6               (RW)
 005F           EP0_DR7:      equ 5Fh          ; Endpoint 0 Data Register 7               (RW)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0061           AMUX_CFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUX_CFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUX_CFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUX_CFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUX_CFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUX_CFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           ;; Keep Old Left. here for compatibility.
 0061           AMUXCFG:      equ 61h          ; Analog Mux Bus Configuration Register    (RW)
 0080           AMUXCFG_BCOL0_MUX:    equ 80h    ; MASK: select AMuxBusB for Col1 input   (RW)
 0040           AMUXCFG_ACOL0_MUX:    equ 40h    ; MASK: select AMuxBusA for Col0 input   (RW)  
 0030           AMUXCFG_INTCAP:       equ 30h    ; MASK: select pins for static operation (RW)
 000E           AMUXCFG_MUXCLK:       equ 0Eh    ; MASK: select precharge clock source    (RW)
 0001           AMUXCFG_EN:           equ 01h    ; MASK: enable/disable MUXCLK            (RW)
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_CLDIS0:       equ 10h    ; MASK: Column 0 comparator bus synch
 0002           CMP_CR1_CLDIX1:       equ 02h    ; MASK: Column 1 comparator bus synch
 0001           CMP_CR1_CLDIX0:       equ 01h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; USB Mask Register           (RW)
 0080           INT_MSK2_WAKEUP:           equ 80h ; MASK: enable/disable I2C interrupt
 0040           INT_MSK2_EP4:              equ 40h ; MASK: enable/disable SW interrupt
 0020           INT_MSK2_EP3:              equ 20h ; MASK: enable/disable I2C interrupt
 0010           INT_MSK2_EP2:              equ 10h ; MASK: enable/disable SW interrupt
 0008           INT_MSK2_EP1:              equ 08h ; MASK: enable/disable I2C interrupt
 0004           INT_MSK2_EP0:              equ 04h ; MASK: enable/disable SW interrupt
 0002           INT_MSK2_SOF:              equ 02h ; MASK: enable/disable I2C interrupt
 0001           INT_MSK2_BUS_RESET:        equ 01h ; MASK: enable/disable SW interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E4           DEC_DH:       equ 0E4h          ; Data High Register                       (RW)
 00E5           DEC_DL:       equ 0E5h          ; Data Low Register                        (RW)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers for compatibility only
 0000           ;------------------------------------------------------
 0000           
 00E8           MUL_X:        equ 0E8h          ; Multiply Input X Register                (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiply Input Y Register                (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EA           MUL_RESULT:   equ 0EAh          ; Multiply Result High Byte Register       (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiply Result Low Byte Register        (R)
 0000           
 00EC           ACC_DR1:      equ 0ECh          ; Accumulator Data Register 1              (RW)
 00EC           MAC_X:        equ ACC_DR1       ; Accumulator Data Register 1              (RW)
 00EC           ACC_LOW_WORD: equ ACC_DR1       ; Accumulator Data Register 1              (RW)
 00ED           ACC_DR0:      equ 0EDh          ; Accumulator Data Register 0              (RW)
 00ED           MAC_Y:        equ ACC_DR0       ; Accumulator Data Register 0              (RW)
 00EE           ACC_DR3:      equ 0EEh          ; Accumulator Data Register 3              (RW)
 00EE           MAC_CL0:      equ ACC_DR3       ; Accumulator Data Register 3              (RW)
 00EE           ACC_HI_WORD:  equ ACC_DR3       ; Accumulator Data Register 3              (RW)
 00EF           ACC_DR2:      equ 0EFh          ; Accumulator Data Register 2              (RW)
 00EF           MAC_CL1:      equ ACC_DR2       ; Accumulator Data Register 2              (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  MAC Registers
 0000           ;------------------------------------------------------
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AA           MUL1_RESULT:  equ MUL1_DH       ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_LOW_WORD: equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1       (RW)
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AE           ACC1_HI_WORD: equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FD           DAC_D:        equ 0FDh		   ; DAC Data Register                        (RW)
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  PMA Write and Read Registers
 0000           ;------------------------------------------------
 0000           
 0040           PMA0_WA:   	  equ 40h		   ; PMA Write Pointer Register               (RW)
 0041           PMA1_WA:   	  equ 41h		   ; PMA Write Pointer Register               (RW)
 0042           PMA2_WA:   	  equ 42h		   ; PMA Write Pointer Register               (RW)
 0043           PMA3_WA:   	  equ 43h		   ; PMA Write Pointer Register               (RW)
 0044           PMA4_WA:   	  equ 44h		   ; PMA Write Pointer Register               (RW)
 0045           PMA5_WA:   	  equ 45h		   ; PMA Write Pointer Register               (RW)
 0046           PMA6_WA:   	  equ 46h		   ; PMA Write Pointer Register               (RW)
 0047           PMA7_WA:   	  equ 47h		   ; PMA Write Pointer Register               (RW)
 0000           
 0050           PMA0_RA:   	  equ 50h		   ;  PMA Read Pointer Register               (RW)
 0051           PMA1_RA:   	  equ 51h		   ;  PMA Read Pointer Register               (RW)
 0052           PMA2_RA:   	  equ 52h		   ;  PMA Read Pointer Register               (RW)
 0053           PMA3_RA:   	  equ 53h		   ;  PMA Read Pointer Register               (RW)
 0054           PMA4_RA:   	  equ 54h		   ;  PMA Read Pointer Register               (RW)
 0055           PMA5_RA:   	  equ 55h		   ;  PMA Read Pointer Register               (RW)
 0056           PMA6_RA:   	  equ 56h		   ;  PMA Read Pointer Register               (RW)
 0057           PMA7_RA:   	  equ 57h		   ;  PMA Read Pointer Register               (RW)
 0000           
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus 0/1 To Global Out Enable  (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0065           CMP_GO_EN1:   equ 65h          ; Comparator Bus 2/3 To Global Out Enable  (RW)
 0080           CMP_GO_EN1_GOO7:      equ 80h    ; MASK: Selected Col 3 signal to GOO5
 0040           CMP_GO_EN1_GOO3:      equ 40h    ; MASK: Selected Col 3 signal to GOO1
 0030           CMP_GO_EN1_SEL3:      equ 30h    ; MASK: Column 3 Signal Select
 0008           CMP_GO_EN1_GOO6:      equ 08h    ; MASK: Selected Col 2 signal to GOO4
 0004           CMP_GO_EN1_GOO2:      equ 04h    ; MASK: Selected Col 2 signal to GOO0
 0003           CMP_GO_EN1_SEL2:      equ 03h    ; MASK: Column 2 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR0_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 3   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Column 1 Range 
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Column 0 Range
 0000           
 0000           ;------------------------------------------------
 0000           ;  USB Registers
 0000           ;------------------------------------------------
 0000           
 00C1           USB_CR1:      equ 0C1h          ; USB Control Register 1                   (#)
 0004           USB_CR1_BUS_ACTIVITY: equ 04h    ; MASK: monitors activity on USB bus     (RC)
 0002           USB_CR1_ENABLE_LOCK:  equ 02h    ; MASK: enable/disable auto lock of osc  (RW)
 0001           USB_CR1_REG_ENABLE:   equ 01h    ; MASK: set mode to reg. on/pass thru    (RW)
 0000           
 00C4           EP1_CR0:      equ 0C4h          ; EP1 Control Register 0                   (#)
 0080           EP1_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP1_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP1_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP1_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C5           EP2_CR0:      equ 0C5h          ; EP2 Control Register 0                   (#)
 0080           EP2_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP2_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP2_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP2_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C6           EP3_CR0:      equ 0C6h          ; EP3 Control Register 0                   (#)
 0080           EP3_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP3_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP3_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP3_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 00C7           EP4_CR0:      equ 0C7h          ; EP4 Control Register 0                   (#)
 0080           EP4_CR0_STALL:        equ 80h    ; MASK: enable/disable stall             (RW)
 0020           EP4_CR0_NAK_INT_EN:   equ 20h    ; MASK: enable/disable NAK interrupts    (RW)
 0010           EP4_CR0_ACKD:         equ 10h    ; MASK: set when acked transaction occurs(RC)
 000F           EP4_CR0_MODE:         equ 0Fh    ; MASK: mode control for endpoint        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  AMuxBus Mux Control Registers
 0000           ;------------------------------------------------
 0000           
 00D8           MUX_CR0:      equ 0D8h          ; Analog Mux Bus Port 0 Bit Enables Reg    (RW)
 00D9           MUX_CR1:      equ 0D9h          ; Analog Mux Bus Port 1 Bit Enables Reg    (RW)
 00DA           MUX_CR2:      equ 0DAh          ; Analog Mux Bus Port 2 Bit Enables Reg    (RW)
 00DB           MUX_CR3:      equ 0DBh          ; Analog Mux Bus Port 3 Bit Enables Reg    (RW)
 00EC           MUX_CR4:      equ 0ECh          ; Analog Mux Bus Port 4 Bit Enables Reg    (RW)
 00ED           MUX_CR5:      equ 0EDh          ; Analog Mux Bus Port 5 Bit Enables Reg    (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Data Control Register 2                  (RW)
 0000           
 00E8           IMO_TR:               equ 0E8h    ; Internal Main Oscillator Trim Register   (RW)
 00E9           ILO_TR:               equ 0E9h    ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:               equ 0EAh    ; Band Gap Trim Register                   (RW)
 00EB           ECO_TR:               equ 0EBh    ; External Oscillator Trim Register        (W)
 00EF           IMO_TR2:              equ 0EFh    ; Internal Main Oscillator Gain Trim Register (RW)
 0000           
 00FD           DAC_CR:       equ 0FDh          ; DAC Control Register                     (RW)
 0080           DAC_CR_SPLIT_MUX:     equ 80h    ; MASK: enable/disable Splitting of AMuxBuses
 0040           DAC_CR_MUXCLK_GE:     equ 40h    ; MASK: Connect/Disconnect AMuxBus to GOO[6]
 0008           DAC_CR_RANGE:	       equ 08h    ; MASK: High Range/Low Range
 0006           DAC_CR_OSCMODE:	    equ 06h    ; MASK: Sets Reset Mode for AMuxBus
 0001           DAC_CR_ENABLE:        equ 01h    ; MASK: enable/disable AMux Bus
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0003           SYSTEM_STACK_PAGE: equ 3   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY7C64215.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0000           MACRO   GET_WORD
 0000                   RAM_X_POINTS_TO_STACKPAGE                    ; Since called by interrupt we can call this
 0000               PUSH A                              ; Quickly get a RAM temp
 0000               PUSH A                              ; Save the source MSB
 0000               ROMX                                ; Get the first byte
 0000               PUSH X                              ; Save X
 0000               MOV  X,SP                           ; Get SP, to index to the temp 
 0000               MOV  [X - 3],A                      ; Save the first byte
 0000               POP  X                              ; Get back the source LSB
 0000               POP  A                              ; And the MSB
 0000               INC  X                              ; Point to the second byte
 0000               ADC  A, 0                           ; 
 0000               ROMX                                ; Get the second byte
 0000               MOV  X,A                            ; Save it in X
 0000               POP  A                              ; And the first byte in A
 0000               RAM_CHANGE_PAGE_MODE 00             ; Reset stack mode back
 0000           MACRO   NULL_PTR_CHECK
 0000               SWAP    A, X                        ; LSB non-zero?
 0000               JNZ     .ok                         ; Exit on non-zero
 0000               SWAP    A, X                        ; MSB zero
 0000               JZ      @0                          ; Jump to the null pointer handler
 0000               JMP     .exit
 0000           .ok:
 0000               SWAP    A, X                        ; Put them back
 0000           .exit:
 0000           NULL_PTR:   EQU 0                       ; Null pointer value
 0000           
 0000           ;--------------------------------------------------
 0000           ; TRANSFER DESCRIPTOR MACROS
 0000           ;--------------------------------------------------
 0000           
 0000           ;-----------------------------------------------
 0000           ; TD_START_TABLE MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = Number of table entries
 0000           ; Register setup
 0000           ;   N/A (builds ROM data at assembly time)
 0000           ;-----------------------------------------------
 0000           MACRO   TD_START_TABLE
 0000               DB      ((@0) - 1)                 ; Number of table entries - 1
 0000           MACRO   TD_ENTRY
 0000               DB  @0                             ; Data source (USB_DS_*)
 0000               DW  @1                             ; Transfer size
 0000               DW  @2                             ; Data source address
 0000               DW  @3                             ; Transfer Completion Status Block Address
 0000               DB  0xde                           ; Reserved 
 0008           TD_ENTRY_SIZE:                         EQU 8
 0001           TD_START_SIZE:                         EQU 1
 0000           ;-----------------------------------------------
 0000           ; TD_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (restored)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   TD_INDEX_TO_OFFSET
 0000               PUSH    A                          ; Save a work register
 0000               ASL     [@0]                       ; Index * 2
 0000               ASL     [@0]                       ; Index * 4
 0000               ASL     [@0]                       ; Index * 8
 0000               POP     A                          ; Restore the work register
 0000           MACRO LT_START
 0000               DB      (@0)                       ; Table size
 0000           MACRO LT_ENTRY
 0000               DW      (@0)                       ; Table entry
 0000               DW      (@1)                       ; Table entry
 0002           LT_ENTRY_SIZE:                         EQU 2
 0001           LT_START_SIZE:                         EQU 1
 0000           
 0000           ;-----------------------------------------------
 0000           ; LT_INDEX_TO_OFFSET MACRO
 0000           ;-----------------------------------------------
 0000           ; Parameters:
 0000           ;   @0 = RAM address of Index
 0000           ; Register setup
 0000           ;   A = DC (not used)
 0000           ;   X = DC (not used)
 0000           ;--------------------------------------------------
 0000           MACRO   LT_INDEX_TO_OFFSET
 0000               ASL     [@0]                       ; Simply shift (mult by 2)
 0000               ASL     [@0]                       ;              (mult by 4)
 0000           MACRO DISPATCHER
 0000               CMP   A,@1
 0000               JNC   .dispatch_not_supported
 0000               ASL   A
 0000               JACC  @0
 0000           .dispatch_not_supported:
 0000               JMP  @2    
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           ; end of file USBFS_macro.inc
 0005           USBFS_bNumStringDescrs: EQU    0x5
 0000           
 0005           USB_NUM_ENDPOINTS:                          EQU 5 
 0004           USB_MAX_EP_NUMBER:                          EQU (USB_NUM_ENDPOINTS - 1) 
 0000           
 0002           USB_3V_OPERATION:                           EQU 0x02
 0003           USB_5V_OPERATION:                           EQU 0x03
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for interrupt regs and masks
 0000           ;--------------------------------------------------
 00DF           USBFS_INT_REG:                             equ 0xDF
 0001           USBFS_INT_RESET_MASK:                      equ 0x01
 0002           USBFS_INT_SOF_MASK:                        equ 0x02
 0004           USBFS_INT_EP0_MASK:                        equ 0x04
 0008           USBFS_INT_EP1_MASK:                        equ 0x08
 0010           USBFS_INT_EP2_MASK:                        equ 0x10
 0020           USBFS_INT_EP3_MASK:                        equ 0x20
 0040           USBFS_INT_EP4_MASK:                        equ 0x40
 0080           USBFS_INT_WAKEUP_MASK:                     equ 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; Registers for USBFS API's.
 0000           ;--------------------------------------------------
 0000           
 004A           USBFS_ADDR:                                 EQU 0x4a
 004B           USBFS_USBIO_CR0:                            EQU 0x4b
 004C           USBFS_USBIO_CR1:                            EQU 0x4c
 00C1           USBFS_USB_CR1:                              EQU 0xc1 
 0000           
 0056           USBFS_EP0MODE:                              EQU 0x56
 0057           USBFS_EP0CNT:                               EQU 0x57
 0058           USBFS_EP0DATA:                              EQU 0x58
 00C4           USBFS_EP1MODE:                              EQU 0xc4
 004F           USBFS_EP1CNT0:                              EQU 0x4f
 004E           USBFS_EP1CNT1:                              EQU 0x4e
 00C5           USBFS_EP2MODE:                              EQU 0xc5
 0051           USBFS_EP2CNT0:                              EQU 0x51
 0050           USBFS_EP2CNT1:                              EQU 0x50
 00C6           USBFS_EP3MODE:                              EQU 0xc6
 0053           USBFS_EP3CNT0:                              EQU 0x53
 0052           USBFS_EP3CNT1:                              EQU 0x52
 00C7           USBFS_EP4MODE:                              EQU 0xc7
 0055           USBFS_EP4CNT0:                              EQU 0x55
 0054           USBFS_EP4CNT1:                              EQU 0x54
 0000           
 0000           ;--------------------------------------------------
 0000           ; Endpoint 0 offsets (Table 9-2)
 0000           ;--------------------------------------------------
 0000           bmRequestType:                              EQU 0
 0001           bRequest:                                   EQU 1
 0002           wValue:                                     EQU 2
 0003           wValueHi:                                   EQU 3
 0002           wValueLo:                                   EQU 2
 0004           wIndex:                                     EQU 4
 0005           wIndexHi:                                   EQU 5
 0004           wIndexLo:                                   EQU 4
 0006           wLength:                                    EQU 6
 0007           wLengthHi:                                  EQU 7
 0006           wLengthLo:                                  EQU 6
 0000           
 0000           ;--------------------------------------------------
 0000           ; Request Types (Table 9-4)
 0000           ;--------------------------------------------------
 0000           USB_GET_STATUS:                             EQU    0x00
 0001           USB_CLEAR_FEATURE:                          EQU    0x01
 0003           USB_SET_FEATURE:                            EQU    0x03
 0005           USB_SET_ADDRESS:                            EQU    0x05
 0006           USB_GET_DESCRIPTOR:                         EQU    0x06
 0007           USB_SET_DESCRIPTOR:                         EQU    0x07
 0008           USB_GET_CONFIGURATION:                      EQU    0x08
 0009           USB_SET_CONFIGURATION:                      EQU    0x09
 000A           USB_GET_INTERFACE:                          EQU    0x0A
 000B           USB_SET_INTERFACE:                          EQU    0x0B
 000C           USB_SYNCH_FRAME:                            EQU    0x0C
 0000           
 0000           ;--------------------------------------------------
 0000           ; Descriptor Types (Table 9-5)
 0000           ;--------------------------------------------------
 0001           DESCR_TYPE_DEVICE:                          EQU     1
 0002           DESCR_TYPE_CONFIG:                          EQU     2
 0003           DESCR_TYPE_STRING:                          EQU     3
 0004           DESCR_TYPE_INTERFACE:                       EQU     4
 0005           DESCR_TYPE_ENDPOINT:                        EQU     5
 0006           DESCR_TYPE_DEVICE_QUALIFIER:                EQU     6
 0007           DESCR_TYPE_OTHER_SPEED:                     EQU     7
 0008           DESCR_TYPE_INTERFACE_POWER:                 EQU     8
 0000           
 0000           ;--------------------------------------------------
 0000           ; Feature Selectors (Table 9-6)
 0000           ;--------------------------------------------------
 0001           USB_DEVICE_REMOTE_WAKEUP:                   EQU    0x01
 0000           USB_ENDPOINT_HALT:                          EQU    0x00
 0002           USB_TEST_MODE:                              EQU    0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Device Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0000           USB_DEVICE_STATUS_BUS_POWERED:              EQU   0x00
 0001           USB_DEVICE_STATUS_SELF_POWERED:             EQU   0x01
 0002           USB_DEVICE_STATUS_REMOTE_WAKEUP:            EQU   0x02
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Status (Figure 9-4)
 0000           ;--------------------------------------------------
 0001           USB_ENDPOINT_STATUS_HALT:                   EQU    0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Directions
 0000           ;--------------------------------------------------
 0080           USB_DIR_IN:                                 EQU    0x80
 0000           USB_DIR_OUT:                                EQU    0x00
 007F           USB_DIR_UNUSED:                             EQU    0x7F
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Endpoint Address Symbols 
 0000           ;--------------------------------------------------
 0000           EP0:                                        EQU    0x00
 0001           EP1:                                        EQU    0x01
 0002           EP2:                                        EQU    0x02
 0003           EP3:                                        EQU    0x03
 0004           EP4:                                        EQU    0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Endpoint States--These act as JACC jump values
 0000           ;--------------------------------------------------
 0000           USB_TRANS_STATE_IDLE:                       EQU     0x00         ;
 0002           USB_TRANS_STATE_CONTROL_READ:               EQU     0x02         ;
 0004           USB_TRANS_STATE_CONTROL_WRITE:              EQU     0x04         ;
 0006           USB_TRANS_STATE_NO_DATA_CONTROL:            EQU     0x06         ;
 0000           
 0000           ;--------------------------------------------------
 0000           ; Control Write flag values to indicate pending data changes
 0000           ;--------------------------------------------------
 0001           USB_ADDRESS_CHANGE_PENDING:     EQU     0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; Register Constants for USBFS
 0000           ;--------------------------------------------------
 0080           USB_ADDR_ENABLE: 			                         EQU    0x80
 0040           USB_CNT_VALID: 				                          EQU    0x40
 0080           USB_CNT_TOGGLE: 			                          EQU    0x80
 0004           USB_PULLUP_ENABLE:			                        EQU    0x04
 0000           USB_AUTO_DPDM: 				                          EQU    0x00
 0003           USB_REG_ENABLE: 			                          EQU    0x03
 0002           USB_PASS_THRU: 				                          EQU    0x02
 0004           USB_BUS_ACTIVITY: 			                        EQU    0x04
 0000           
 0000           USB_MODE_DISABLE:                            EQU 0x00
 0001           USB_MODE_NAK_IN_OUT:                         EQU 0x01
 0002           USB_MODE_STATUS_OUT_ONLY:                    EQU 0x02
 0003           USB_MODE_STALL_IN_OUT:                       EQU 0x03
 0004           USB_MODE_RESERVED_0100:                      EQU 0x04
 0005           USB_MODE_ISO_OUT:                            EQU 0x05
 0006           USB_MODE_STATUS_IN_ONLY:                     EQU 0x06
 0007           USB_MODE_ISO_IN:                             EQU 0x07
 0008           USB_MODE_NAK_OUT:                            EQU 0x08
 0009           USB_MODE_ACK_OUT:                            EQU 0x09
 000A           USB_MODE_RESERVED_1010:                      EQU 0x0A
 000B           USB_MODE_ACK_OUT_STATUS_IN:                  EQU 0x0B
 000C           USB_MODE_NAK_IN:                             EQU 0x0C
 000D           USB_MODE_ACK_IN:                             EQU 0x0D
 000E           USB_MODE_RESERVED_1110:                      EQU 0x0E
 000F           USB_MODE_ACK_IN_STATUS_OUT:                  EQU 0x0F
 0080           USB_MODE_STALL_DATA_EP:                      EQU 0x80
 0000           
 0000           ;--------------------------------------------------
 0000           ; LoadInEP Count Toggle (Argument values)
 0000           ;--------------------------------------------------
 0000           USB_NO_TOGGLE:                               EQU 0x00
 0001           USB_TOGGLE:                                  EQU 0x01
 0000           
 0000           ;--------------------------------------------------
 0000           ; FORCE J/K/SE0 (Argument values)
 0000           ;--------------------------------------------------
 00A0           USB_FORCE_J:                                 EQU 0xA0
 0080           USB_FORCE_K:                                 EQU 0x80
 00C0           USB_FORCE_SE0:                               EQU 0xC0
 0000           USB_FORCE_NONE:                              EQU 0x00
 0001           USB_FORCE_STATE:                             EQU 0x01
 0000           
 0000           ;-----------------------------------------------
 0000           ; Endpoint event flags
 0000           ;-----------------------------------------------
 0002           NO_EVENT_ALLOWED:	equ               2
 0001           EVENT_PENDING:      equ               1
 0000           NO_EVENT_PENDING:   equ               0
 0000           
 0000           IN_BUFFER_FULL:     equ               NO_EVENT_PENDING
 0001           IN_BUFFER_EMPTY:    equ               EVENT_PENDING
 0001           OUT_BUFFER_FULL:    equ               EVENT_PENDING
 0000           OUT_BUFFER_EMPTY:   equ               NO_EVENT_PENDING
 0000           
 0000           ;--------------------------------------------------
 0000           ; USB Request Dispatch Functions, including overrides
 0000           ;--------------------------------------------------
 0001           USB_NOT_SUPPORTED:  EQU 0x01
 0002           USB_UM_SUPPLIED:    EQU 0x02
 0004           USB_APP_SUPPLIED:   EQU 0x04
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_dev_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_dev_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_dev_07: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_dev_08: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Device (dev)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_dev_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_03: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_04: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_05: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_dev_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_dev_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_dev_09: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ifc_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_05: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_06: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ifc_09: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_std_ifc_10: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ifc_00: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_09: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_10: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_std_ifc_11: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to host (d2h) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0002           USB_CB_SRC_d2h_std_ep_00: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_d2h_std_ep_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_08: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_09: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_10: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_11: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_d2h_std_ep_12: equ USB_NOT_SUPPORTED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to device (h2d) Standard (std) Endpoint (ep)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_std_ep_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_01: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_std_ep_02: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_std_ep_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Device to Host (d2h) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_d2h_cls_ifc_00: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_d2h_cls_ifc_01: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_02: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_d2h_cls_ifc_03: equ USB_UM_SUPPLIED
 0000           
 0000           ;--------------------------------------------------
 0000           ; Host to Device (h2d) Class (cls) Interface (ifc)
 0000           ;--------------------------------------------------
 0001           USB_CB_SRC_h2d_cls_ifc_00: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_01: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_02: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_03: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_04: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_05: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_06: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_07: equ USB_NOT_SUPPORTED
 0001           USB_CB_SRC_h2d_cls_ifc_08: equ USB_NOT_SUPPORTED
 0002           USB_CB_SRC_h2d_cls_ifc_09: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_10: equ USB_UM_SUPPLIED
 0002           USB_CB_SRC_h2d_cls_ifc_11: equ USB_UM_SUPPLIED
 0001           USB_CB_SRC_h2d_cls_ifc_12: equ USB_NOT_SUPPORTED
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Standard Requests
 0000           ;-----------------------------------------------
 0001           USB_CB_h2d_std_dev: equ 1
 0001           USB_CB_h2d_std_ifc: equ 1
 0001           USB_CB_h2d_std_ep:  equ 1
 0000           USB_CB_h2d_std_oth: equ 0
 0001           USB_CB_d2h_std_dev: equ 1
 0001           USB_CB_d2h_std_ifc: equ 1
 0001           USB_CB_d2h_std_ep:  equ 1
 0000           USB_CB_d2h_std_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Class Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_cls_dev: equ 0
 0001           USB_CB_h2d_cls_ifc: equ 1
 0000           USB_CB_h2d_cls_ep:  equ 0
 0000           USB_CB_h2d_cls_oth: equ 0
 0000           USB_CB_d2h_cls_dev: equ 0
 0001           USB_CB_d2h_cls_ifc: equ 1
 0000           USB_CB_d2h_cls_ep:  equ 0
 0000           USB_CB_d2h_cls_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_vnd_dev: equ 0
 0000           USB_CB_h2d_vnd_ifc: equ 0
 0000           USB_CB_h2d_vnd_ep:  equ 0
 0000           USB_CB_h2d_vnd_oth: equ 0
 0000           USB_CB_d2h_vnd_dev: equ 0
 0000           USB_CB_d2h_vnd_ifc: equ 0
 0000           USB_CB_d2h_vnd_ep:  equ 0
 0000           USB_CB_d2h_vnd_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; 1st Tier Dispatch--Reserved Requests
 0000           ;-----------------------------------------------
 0000           USB_CB_h2d_rsv_dev: equ 0
 0000           USB_CB_h2d_rsv_ifc: equ 0
 0000           USB_CB_h2d_rsv_ep:  equ 0
 0000           USB_CB_h2d_rsv_oth: equ 0
 0000           USB_CB_d2h_rsv_dev: equ 0
 0000           USB_CB_d2h_rsv_ifc: equ 0
 0000           USB_CB_d2h_rsv_ep:  equ 0
 0000           USB_CB_d2h_rsv_oth: equ 0
 0000           
 0000           ;-----------------------------------------------
 0000           ; HID Descriptor Types
 0000           ;-----------------------------------------------
 0021           DESCR_TYPE_HID_CLASS:        equ      0x21
 0009           DESCR_SIZE_HID_CLASS:        equ      9
 0022           DESCR_TYPE_HID_REPORT:       equ      0x22
 0023           DESCR_TYPE_HID_PHYSICAL:     equ      0x23
 0000           
 0000           ;--------------------------------------------------
 0000           ; Idle Timer (Argument values)
 0000           ;--------------------------------------------------
 0002           USB_IDLE_TIMER_RUNNING:                      EQU 0x02
 0001           USB_IDLE_TIMER_EXPIRED:                      EQU 0x01
 0000           USB_IDLE_TIMER_INDEFINITE:                   EQU 0x00
 0000           
 0000           ;--------------------------------------------------
 0000           ; Transfer Descriptor--Data Source
 0000           ;--------------------------------------------------
 0000           USB_DS_ROM:                                      EQU 0x00
 0001           USB_DS_RAM:                                      EQU 0x01
 0002           USB_DS_RAM_CB:                                   EQU 0x02
 0003           USB_DS_RAM_MASK:                                 EQU 0x03
 0000           
 0000           ;-----------------------------------------------
 0000           ; Transfer Completion Notification
 0000           ;-----------------------------------------------
 0000           USB_XFER_IDLE:         equ      0x00
 0001           USB_XFER_STATUS_ACK:   equ      0x01
 0002           USB_XFER_PREMATURE:    equ      0x02
 0003           USB_XFER_ERROR:        equ      0x03
 0000           
 0000           ; This macro is used to allocate a completion status block
 0000           ; for all Requests.  The macro parameter is used
 0000           ; to prefix the two data elements.
 0000           USB_XFER_STATUS:       equ      0
 0001           USB_XFER_LENGTH:       equ      1
 0000           MACRO    USB_XFER_STATUS_BLOCK
 0000               BLK    1    ; Completion Status
 0000               BLK    2    ; Transfer Length
 0000           USB_CLASS_NONE:                        EQU    0x00
 0001           USB_CLASS_HID:                         EQU    0x01
 0001           USBFS_CLASS:                           EQU    USB_CLASS_HID
 0000               
 0000           ;-----------------------------------------------
 0000           ; Modify the supported requests by redefining
 0000           ; them within the custom code area below
 0000           ;-----------------------------------------------
 0000           
 0000              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 0000              ;---------------------------------------------------
 0000              ; Insert your custom assembly code below this banner
 0000              ;---------------------------------------------------
 0000              ;   NOTE: interrupt service routines must preserve
 0000              ;   the values of the A and X CPU registers.
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert your custom assembly code above this banner
 0000              ;---------------------------------------------------
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert a lcall to a C function below this banner
 0000              ; and un-comment the lines between these banners
 0000              ;---------------------------------------------------
 0000              
 0000              ;PRESERVE_CPU_CONTEXT
 0000              ;lcall _My_C_Function
 0000              ;RESTORE_CPU_CONTEXT
 0000              
 0000              ;---------------------------------------------------
 0000              ; Insert a lcall to a C function above this banner
 0000              ; and un-comment the lines between these banners
 0000              ;---------------------------------------------------
 0000              ;@PSoC_UserCode_END@ (Do not change this line.)
 0000           
 0000           ;-----------------------------------------------
 0000           ; Has the user enabled any of the Vendor Specific Requests
 0000           ;-----------------------------------------------
 0000           USBFS_VSR_SUPPORT: EQU 0
                IF USB_CB_h2d_vnd_dev
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ifc
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_ep
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_h2d_vnd_oth
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_dev
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ifc
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_ep
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                IF USB_CB_d2h_vnd_oth
                USBFS_VSR_SUPPORT: EQU 1
                ENDIF
                
                ; end of file USBFS.inc
                
                ;-----------------------------------------------
                ;  Global Symbols
                ;-----------------------------------------------
                export  USBFS_EP0_ISR
                export _USBFS_EP0_ISR
                export  USBFS_InitControlRead
                export _USBFS_InitControlRead
                export  USBFS_InitControlWrite
                export _USBFS_InitControlWrite
                export  USBFS_InitNoDataStageControlTransfer
                export _USBFS_InitNoDataStageControlTransfer
                export  USBFS_NoDataStageControlTransfer
                
                ;-----------------------------------------------
                ;  Macro Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ;  Constant Definitions
                ;-----------------------------------------------
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                AREA InterruptRAM (RAM, REL, CON)
                ;----------------------------------------------------------------------------
                ; Current Device
                ;----------------------------------------------------------------------------
                export USBFS_bCurrentDevice, _USBFS_bCurrentDevice
 0000            USBFS_bCurrentDevice:
 0000           _USBFS_bCurrentDevice:                  BLK   1    ;  Current Device
 0001           ;----------------------------------------------------------------------------
 0001           ; Current Configuration
 0001           ;----------------------------------------------------------------------------
                export USBFS_Configuration, _USBFS_Configuration
 0001            USBFS_Configuration:
 0001           _USBFS_Configuration:                   BLK   1    ;  Current Configuration
 0002           ;----------------------------------------------------------------------------
 0002           ; Current Device Status
 0002           ;----------------------------------------------------------------------------
                export USBFS_DeviceStatus, _USBFS_DeviceStatus
 0002            USBFS_DeviceStatus:
 0002           _USBFS_DeviceStatus:                    BLK   1    ;  Current Device Status
 0003           ;----------------------------------------------------------------------------
 0003           ; Interface Setting
 0003           ;----------------------------------------------------------------------------
 0003           ;  User Module Parameter determines the number of interfaces
                export USBFS_InterfaceSetting, _USBFS_InterfaceSetting
 0003            USBFS_InterfaceSetting:
 0003           _USBFS_InterfaceSetting:                BLK   3h    ; Interface Setting
 0006           ;----------------------------------------------------------------------------
 0006           ; Endpoint Status--USB Status
 0006           ;----------------------------------------------------------------------------
                export USBFS_EndpointStatus, _USBFS_EndpointStatus
 0006            USBFS_EndpointStatus:
 0006           _USBFS_EndpointStatus:                  BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 000B           ;----------------------------------------------------------------------------
 000B           ; Last Packet Size
 000B           ;----------------------------------------------------------------------------
                export USBFS_LastSize
 000B            USBFS_LastSize:                        BLK   1    ; Last Packet Size
 000C           ;----------------------------------------------------------------------------
 000C           ; Control Transfer State Machine
 000C           ; State values for Control Write
 000C           ; State values for Control Read
 000C           ;----------------------------------------------------------------------------
                export USBFS_TransferType
 000C            USBFS_TransferType:                    BLK   1    ; Control Transfer State Machine
 000D           ;----------------------------------------------------------------------------
 000D           ; Control Transfer Intermediate Buffer--Shared among the requests
 000D           ;----------------------------------------------------------------------------
                export USBFS_TransferBuffer
 000D            USBFS_TransferBuffer:                  BLK   8
 0015           ;----------------------------------------------------------------------------
 0015           ; Transfer Descriptor Data for Control Transfer
 0015           ;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
 0015           ;----------------------------------------------------------------------------
 0015           ; Control Transfer Data Source
 0015           ;   USB_DS_ROM
 0015           ;   USB_DS_RAM
 0015           ;   USB_DS_RAM_AS_NEEDED
 0015           ;----------------------------------------------------------------------------
                export USBFS_CurrentTD, _USBFS_CurrentTD
 0015           _USBFS_CurrentTD:
 0015            USBFS_CurrentTD:
                export USBFS_DataSource, _USBFS_DataSource
 0015           _USBFS_DataSource:
 0015            USBFS_DataSource:                      BLK   1
 0016           ;----------------------------------------------------------------------------
 0016           ; Control Transfer Data Size
 0016           ;----------------------------------------------------------------------------
                export USBFS_TransferSize, _USBFS_TransferSize
 0016           _USBFS_TransferSize:
 0016            USBFS_TransferSize:                    BLK   2
 0018           ;----------------------------------------------------------------------------
 0018           ; Control Transfer Data Pointer
 0018           ;   Source for Control Read
 0018           ;   Destination for Control Write
 0018           ;----------------------------------------------------------------------------
                export USBFS_DataPtr, _USBFS_DataPtr
 0018           _USBFS_DataPtr:
 0018            USBFS_DataPtr:                         BLK   2
 001A           ;----------------------------------------------------------------------------
 001A           ; Transfer Completion Notification
 001A           ;----------------------------------------------------------------------------
                export USBFS_StatusBlockPtr, _USBFS_StatusBlockPtr
 001A           _USBFS_StatusBlockPtr:
 001A            USBFS_StatusBlockPtr:                  BLK   2
 001C           
 001C           ;----------------------------------------------------------------------------
 001C           ; Control Transfer _TransferByteCount (Actually transfered
 001C           ;----------------------------------------------------------------------------
 001C            USBFS_TransferByteCount:               BLK   2
 001E           
 001E           ;----------------------------------------------------------------------------
 001E           ; Control Endpoint Data toggle / krypton uses this ONLY for EP0  
 001E           ; For 20x6x devices: See USBFS_EPXDataToggle defined in usb.asm
                export USBFS_EPDataToggle, _USBFS_EPDataToggle
 001E            _USBFS_EPDataToggle:
 001E            USBFS_EPDataToggle:
 001E            USBFS_EP0DataToggle:                   BLK   1
 001F           ;----------------------------------------------------------------------------
 001F           ; Control Endpoint Data Pending Flag
                export USBFS_fDataPending
 001F            USBFS_fDataPending:                    BLK   1
 0020           ;----------------------------------------------------------------------------
 0020           ; Control Endpoint Data Pending Flag
 0020           ;export USBFS_PendingData
 0020           ; USBFS_PendingData:                    BLK   1
 0020           ;----------------------------------------------------------------------------
 0020           ; Temporary Data registers
                export USBFS_t2, USBFS_t1, USBFS_t0
 0020            USBFS_t2:                              BLK   1    ; Temporary shared by the UM
 0021            USBFS_t1:                              BLK   1    ; Temporary shared by the UM
 0022            USBFS_t0:                              BLK   1    ; Temporary shared by the UM
 0023           
 0023           ;export USBFS_IntState
 0023           ; USBFS_IntState:                       BLK  1
 0023           ;export USBFS_StackPointer
 0023           ; USBFS_StackPointer:                   BLK  1
 0023           ;export USBFS_TempMode
 0023           ; USBFS_TempMode:                       BLK 1
 0023           ;----------------------------------------------------------------------------
 0023           ; Endpoint Transfer--API Status
 0023           ;----------------------------------------------------------------------------
                export USBFS_EndpointAPIStatus, _USBFS_EndpointAPIStatus
 0023            USBFS_EndpointAPIStatus:
 0023           _USBFS_EndpointAPIStatus:               BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
 0028           
                IF 1
                ELSE
                ERROR_RUN_USB_WIZARD
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ; In order for the USB User Module to compile properly the USB Wizard must be run.
                ; To do this navigate back to the Device Editor Window, right click on the icon for the
                ; USB User Module and select the 'USB Setup Wizard...'.  Configure the device as needed
                ; and then click OK.  Re-generate source before compiling again.
                ; For HID devices it is important that all instances of HID Class Descriptors point to a valid
                ; HID report.
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ENDIF
                
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: USBFS_EP0_ISR
                
                ;
                ;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
                ;                 dispaches all SETUP, IN, and OUT transfers to the proper
                ;                 dispatch routines for all supported USB requests.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:   n/a
                ;
                ;  RETURNS:     n/a
                ;
                ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                ;
                ;  THEORY of OPERATION or PROCEDURE:
                ;
                ;-----------------------------------------------------------------------------
 0000            USBFS_EP0_ISR:
 0000           _USBFS_EP0_ISR:
 0000 08            push    A
 0001 10            push    X
 0002 5DD5         mov   A, reg[ MVW_PP ]
 0004 08           push  A
 0005 5DD4         mov   A, reg[ MVR_PP ]
 0007 08           push  A
 0008           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0008 62D500          mov reg[MVW_PP], 0
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 000B 62D400          mov reg[MVR_PP], 0
                   ENDIF
                
                    ; Dispatch to setup/in/out handlers
 000E 5D56          mov     A, reg[USBFS_EP0MODE]       ; Get the mode reg
 0010           
 0010 5C            mov     X, A ; store for later
 0011               ; Check EP0_CR for the following cases:
 0011               ; bit 7 is set but ack is not set or mode is not 1 => invalid setup
 0011               ; bit 7 is not set, bit 5 or 6 is set, but bit 4 is not set => invalid in/out
 0011 219F          and     A, 9Fh
 0013 3991          cmp     A, 91h
 0015 A043          jz      USBFS_EP0_Setup
 0017               ; Check if setup bit is set--if so then invalid EP0_CR reg read so exit
 0017 2180          and     A, 80h
 0019               ; Getting here means there is an invalid setup; exit without modifying the mode
 0019 B036          jnz     USBFS_EP0_ISR_EXIT
 001B               ; Getting here means the setup bit is not set, now check in/out
 001B 5B            mov     A, X   ; restore EP0_CR reg as read
 001C 2170          and     A, 70h
 001E 3950          cmp     A, 50h
 0020 A062          jz      USBFS_EP0_IN
 0022 3930          cmp     A, 30h
 0024 A06C          jz      USBFS_EP0_OUT
 0026               ; Getting here means there is an invalid in/out; exit without modifying the mode
 0026 8029          jmp     USBFS_EP0_ISR_EXIT  
 0028           
 0028           ; ISR Exit Point to update the mode register
 0028           ;   mode and count have been pushed onto the stack
                export USBFS_EP0_UPD_MODE_EXIT
 0028           USBFS_EP0_UPD_MODE_EXIT:
 0028 5322          mov     [USBFS_t0], A                    ; store EP0_CNT reg value for later
 002A 5D56          mov     A, reg[USBFS_EP0MODE]            ; unlock registers  
 002C 2180          and     A, 80h                                      ; Check if SETUP bit is set
 002E B021          jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR 
 0030 5122          mov     A, [USBFS_t0]                    ; restore EP0_CNT reg value
 0032 6057          mov     reg[USBFS_EP0CNT], A             ; Update the count register
 0034 5D57          mov     A, reg[USBFS_EP0CNT]             ; writing check
 0036 3A22          cmp     A, [USBFS_t0]                    ; if writing was not succesful,
 0038 B017          jnz     USBFS_EP0_ISR_EXIT               ;         then abort the ISR    
 003A           
 003A 5A22          mov     [USBFS_t0], X                     ; store EP0_MODE reg value for later
 003C           .ReWriteMODE:
 003C 5D56          mov     A, reg[USBFS_EP0MODE]             ; unblock registers    
 003E 2180          and     A, 80h                                      ; Check if SETUP bit is set
 0040 B00F          jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
 0042               
 0042 5122          mov     A, [USBFS_t0]                     ; restore the new MODE
 0044 6056          mov     reg[USBFS_EP0MODE], A             ; Update the mode regiter
 0046               
 0046 5D56          mov     A, reg[USBFS_EP0MODE]             ; writing check
 0048 210F          and     A,  0Fh                                     ; clear 7-4 bits
 004A 3A22          cmp     A, [USBFS_t0]                     ; if writing was succesful,
 004C A003          jz      USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
 004E                                                                    ; if writing was not succesful,
 004E 8FED          jmp      .ReWriteMODE                                 ;           then repeat write operation   
 0050           
 0050           
 0050           
 0050           ; Common Exit Point
 0050           USBFS_EP0_ISR_EXIT:
 0050 18           pop   A
 0051 60D4         mov   reg[ MVR_PP ], A
 0053 18           pop   A
 0054 60D5         mov   reg[ MVW_PP ], A
 0056 20            pop     X                           ;
 0057           ;       mov  A, [USBFS_TempMode]
 0057           ;       mov  reg[USBFS_EP0MODE], A
 0057 18            pop     A                           ; Restore Context
 0058 7E            reti
 0059           
 0059           
 0059           ;-----------------------------------------------------------------------------
 0059           ;  FUNCTION NAME: USBFS_EP0_Setup
 0059           ;
 0059           ;  DESCRIPTION:   Dispatch a USB SETUP
 0059           ;
 0059           ;-----------------------------------------------------------------------------
 0059            USBFS_EP0_Setup:
 0059           _USBFS_EP0_Setup:
 0059           ; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
 0059 5D56          mov     A, reg[USBFS_EP0MODE]    ; unlock registers
 005B 6056          mov     reg[USBFS_EP0MODE], A ; clear setup bit 
 005D 5D56          mov     A, reg[USBFS_EP0MODE]    ; (re)read register
 005F 2180          and     A, 80h                              ; Check if SETUP bit is set
 0061 BFEE          jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
 0063 08            push    A                          ; Save the mode register
 0064 5002          mov     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
 0066 91F3          call    USBFS_UpdateStatusBlock
 0068 18            pop     A                          ; Restore the mode register
 0069 5D57          mov     A, reg[USBFS_EP0CNT]             ; Get the count reg
 006B 394A          cmp     A, (USB_CNT_VALID | 0x0A)
 006D A003          jz      .dispatch
 006F           
 006F 825B          jmp     USBFS_Not_Supported_Local_Drv
 0071           
 0071           
 0071           ;-----------------------------------------------------------------------------
 0071           ; Jump here to dispatch the request
 0071           ; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
 0071           ; 7, 6, 5, 1, 0 determine what the request is. Bits [2:4] are default to zero. The below code
 0071           ; re-organizes [bmRequestType] to the following format:
 0071           ; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
 0071           ; "re-organization", the firmware will jump to an appropriate table to handle the request.
 0071           ;-----------------------------------------------------------------------------
 0071           .dispatch:
 0071 5D58          mov     A, reg[USBFS_EP0DATA+bmRequestType]   ; Get bmRequestType
 0073 21E3          and     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
 0075 08            push    A                                ; store value on the stack
 0076 67            asr     A                                ; move bits 7-6-5 into 4-3-2's place
 0077 67            asr     A                                ; "asr" instruction shift all bits one place to the right.
 0078 67            asr     A                                ; Bit7 remains the same.
 0079 5320          mov     [USBFS_t2], A                    ; store shifted value
 007B 18            pop     A                                ; get original value
 007C 2A20          or      A, [USBFS_t2]                    ; or the two to get the 5-bit field
 007E 211F          and     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
 0080                                                        ; Bit0 is loaded with a Zero. This results in multiplying
 0080                                                        ; the accumulator by 2, and the reason to mutiply it by 2
 0080                                                        ; is that each "jmp" instruction in the tables is two bytes long.
 0080           
 0080 7D02C2        ljmp    USBFS_bmRequestType_Dispatch
 0083           
 0083           
 0083           ;-----------------------------------------------------------------------------
 0083           ;  FUNCTION NAME: USBFS_EP0_IN
 0083           ;
 0083           ;  DESCRIPTION: Handles an IN request.  Depending on the state of the
 0083           ;               enumeration sequence it decides what to do next
 0083           ;
 0083           ;-----------------------------------------------------------------------------
 0083            USBFS_EP0_IN:
 0083           _USBFS_EP0_IN:
 0083 5D56          mov     A, reg[USBFS_EP0MODE]    ; unlock registers
 0085           ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
 0085           ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
 0085           ;    and     A, 80h                              ; Check if SETUP bit is set
 0085           ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
 0085 510C          mov     A, [USBFS_TransferType]
 0087           ;    call USBFS_ControlInDispatch
 0087           ;    jmp  USBFS_EP0_ISR_EXIT                 ; And exit
 0087           USBFS_ControlInDispatch:
 0087 E001          jacc    USBFS_ControlInDispatchTable
 0089           USBFS_ControlInDispatchTable:
 0089 8241          jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 008B 8039          jmp     USBFS_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
 008D 80B9          jmp     USBFS_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
 008F 80C4          jmp     USBFS_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL
 0091           
 0091           
 0091           ;-----------------------------------------------------------------------------
 0091           ;  FUNCTION NAME: USBFS_EP0_OUT
 0091           ;
 0091           ;  DESCRIPTION: HANDles an OUT request.  Depending on the state of the
 0091           ;               enumeration sequence it decides what to do next
 0091           ;
 0091           ;-----------------------------------------------------------------------------
 0091            USBFS_EP0_OUT:
 0091           _USBFS_EP0_OUT:
 0091 5D56          mov     A, reg[USBFS_EP0MODE]    ; unlock registers
 0093           ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
 0093           ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
 0093           ;    and     A, 80h                              ; Check if SETUP bit is set
 0093           ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
 0093 510C          mov     A, [USBFS_TransferType]
 0095 E001          jacc    USBFS_ControlOutDispatchTable
 0097           USBFS_ControlOutDispatchTable:
 0097 8233          jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
 0099 802D          jmp     USBFS_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
 009B 805E          jmp     USBFS_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
 009D 80D0          jmp     USBFS_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL
 009F           
 009F           
 009F           ;-----------------------------------------------------------------------------
 009F           ;  FUNCTION NAME: USBFS_InitControlRead
 009F           ;
 009F           ;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
 009F           ;                 not called.  It assumes a tranfer descriptor has been loaded
 009F           ;                 into the driver USBFS_CurrentTD data structure.
 009F           ;
 009F           ;-----------------------------------------------------------------------------
 009F            USBFS_InitControlRead:
 009F           _USBFS_InitControlRead:
 009F 530B          mov     [USBFS_LastSize], A        ; Save the packet size?
 00A1 91CE          call    USBFS_InitializeStatusBlock
 00A3 550C02        mov     [USBFS_TransferType], USB_TRANS_STATE_CONTROL_READ
 00A6           
 00A6               ; Check the transfer size against the request size
 00A6 5D5F          mov     A, reg[USBFS_EP0DATA+wLengthHi]   ; MSB of wLength
 00A8 3A16          cmp     A, [USBFS_TransferSize]
 00AA B007          jnz     .L1
 00AC           
 00AC 5D5E          mov     A, reg[USBFS_EP0DATA+wLengthLo]   ; LSB of wLength
 00AE 3A17          cmp     A, [USBFS_TransferSize+1]
 00B0 A009          jz      .L9
 00B2           .L1:
 00B2 D007          jnc     .L9
 00B4           ;
 00B4 5317          mov    [USBFS_TransferSize+1], A   ;
 00B6 5D5F          mov    A, reg[USBFS_EP0DATA+wLengthHi]   ;
 00B8 5316          mov    [USBFS_TransferSize], A     ;
 00BA           .L9:
 00BA 551C00        mov    [USBFS_TransferByteCount], 0   ;
 00BD 551D00        mov    [USBFS_TransferByteCount+1], 0   ;
 00C0           
 00C0 2E1E01        or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
 00C3 80B4          jmp    USBFS_LoadEndpoint          ;
 00C5           ;-----------------------------------------------------------------------------
 00C5           ;  FUNCTION NAME: USBFS_ControlReadDataStage
 00C5           ;
 00C5           ;  DESCRIPTION:   This routine processes the data stage of a control read.  It
 00C5           ;                 must be JUMPed to, not called.  It assumes a tranfer descriptor
 00C5           ;                 has been loaded into the driver USBFS_CurrentTD
 00C5           ;                 data structure.
 00C5           ;
 00C5           ;-----------------------------------------------------------------------------
 00C5            USBFS_ControlReadDataStage:
 00C5 80B2          jmp     USBFS_LoadEndpoint
 00C7           
 00C7           ;-----------------------------------------------------------------------------
 00C7           ;  FUNCTION NAME: USBFS_ControlReadStatusStage
 00C7           ;
 00C7           ;  DESCRIPTION:   This routine processes the status stage of a control read.  It
 00C7           ;                 must be JUMPed to, not called.  It handles short or 0 packet
 00C7           ;                 It assumes a tranfer descriptor has been loaded into the
 00C7           ;                 driver USBFS_CurrentTD data structure.
 00C7           ;
 00C7           ;-----------------------------------------------------------------------------
 00C7            USBFS_ControlReadStatusStage:
 00C7 510B          mov    A, [USBFS_LastSize]         ; Get the number of bytes from the last transfer
 00C9 041D          add    [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
 00CB 0E1C00        adc    [USBFS_TransferByteCount], 0   ;
 00CE 5001          mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 00D0 9189          call   USBFS_UpdateStatusBlock
 00D2 550C00        mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE
 00D5 5000          mov    A, 0                        ; Count Register
 00D7 5703          mov    X, USB_MODE_STALL_IN_OUT
 00D9 8F4E          jmp    USBFS_EP0_UPD_MODE_EXIT
 00DB           ;-----------------------------------------------------------------------------
 00DB           ;  FUNCTION NAME: USBFS_NoDataStageControlTransfer
 00DB           ;                 USBFS_InitNoDataStageControlTransfer
 00DB           ;
 00DB           ;  DESCRIPTION:   This routine processes the status stage of a no data control
 00DB           ;                 write.  It must be JUMPed to, not called.
 00DB           ;
 00DB           ;-----------------------------------------------------------------------------
 00DB            USBFS_NoDataStageControlTransfer:
 00DB           _USBFS_InitNoDataStageControlTransfer:
 00DB            USBFS_InitNoDataStageControlTransfer:
 00DB 9194          call    USBFS_InitializeStatusBlock
 00DD           
 00DD 550C06        mov    [USBFS_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL
 00E0           
 00E0 5000          mov    A, 0                        ; Count Register
 00E2 5706          mov    X, USB_MODE_STATUS_IN_ONLY
 00E4 8F43          jmp    USBFS_EP0_UPD_MODE_EXIT
 00E6           
 00E6           
 00E6           ;-----------------------------------------------------------------------------
 00E6           ;  FUNCTION NAME: USBFS_InitControlWrite
 00E6           ;
 00E6           ;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
 00E6           ;                 to, not called.  It assumes a tranfer descriptor has been loaded
 00E6           ;                 into the driver USBFS_CurrentTD data structure.
 00E6           ;
 00E6           ;-----------------------------------------------------------------------------
 00E6            USBFS_InitControlWrite:
 00E6           _USBFS_InitControlWrite:
 00E6 5115          mov     A, [USBFS_DataSource]      ; Need to make sure the destination is not ROM
 00E8 3900          cmp     A, USB_DS_ROM
 00EA A1E0          jz      USBFS_Not_Supported_Local_Drv
 00EC           
 00EC 9183          call    USBFS_InitializeStatusBlock
 00EE           
 00EE 550C04        mov    [USBFS_TransferType], USB_TRANS_STATE_CONTROL_WRITE
 00F1           
 00F1 2E1E01        or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
 00F4           
 00F4 5000          mov    A, 0                        ; Count Register
 00F6 570B          mov    X, USB_MODE_ACK_OUT_STATUS_IN
 00F8 8F2F          jmp    USBFS_EP0_UPD_MODE_EXIT
 00FA           
 00FA           
 00FA           ;-----------------------------------------------------------------------------
 00FA           ;  FUNCTION NAME: USBFS_ControlWriteDataStage
 00FA           ;
 00FA           ;  DESCRIPTION:   This routine processes the data stage of a control
 00FA           ;                 write.  It must be JUMPed to, not called.  It assumes a
 00FA           ;                 tranfer descriptor has been loaded into the driver
 00FA           ;                 USBFS_CurrentTD data structure.
 00FA           ;
 00FA           ;-----------------------------------------------------------------------------
 00FA            USBFS_ControlWriteDataStage:
 00FA 361E01        xor    [USBFS_EP0DataToggle], 1    ; Update data toggle
 00FD           
 00FD 5D57          mov    A, reg[USBFS_EP0CNT]        ; Get the count
 00FF           
 00FF 210F          and     A, 0x0F
 0101 1102          sub     A, 2                       ; Count include the two byte checksum
 0103           
 0103 5320          mov     [USBFS_t2], A              ; Assume we have room to receive the whole packet
 0105           
 0105 5000          mov     A, 0
 0107 3A16          cmp     A, [USBFS_TransferSize]    ; If the MSB has anything just use the count
 0109 B007          jnz     .L1
 010B           
 010B 5120          mov     A, [USBFS_t2]
 010D 3A17          cmp     A, [USBFS_TransferSize+1]    ;
 010F A006          jz      .L6
 0111           .L1:
 0111 C004          jc      .L6
 0113 5F2017        mov     [USBFS_t2], [USBFS_TransferSize+1]
 0116           
 0116           .L6:
 0116 5120          mov     A, [USBFS_t2]
 0118 1417          sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
 011A 1E1600        sbb     [USBFS_TransferSize], 0    ;
 011D           
 011D 041D          add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
 011F 0E1C00        adc     [USBFS_TransferByteCount], 0   ;
 0122           
 0122 5700          mov     X, 0                       ; Start the index at 0
 0124           
                IF SYSTEM_LARGE_MEMORY_MODEL
 0124 5DD5         mov   A, reg[ MVW_PP ]
 0126 08           push  A
 0127 5118          mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
 0129 60D5          mov     reg[MVW_PP], A
                ENDIF
                
 012B           .RAM_COPY:
 012B 5E58          mov     A, reg[X+USBFS_EP0DATA]    ; Get the data
 012D 3F19          mvi     [USBFS_DataPtr+1], A       ; Store the data, bump the destination
 012F           
 012F 75            inc     X                          ; Bump the destination offset
 0130 5B            mov     A, X                       ; Are we done?
 0131 3A20          cmp     A, [USBFS_t2]
 0133 CFF7          jc      .RAM_COPY                  ; Not done
 0135           
                IF SYSTEM_LARGE_MEMORY_MODEL
 0135 18           pop   A
 0136 60D5         mov   reg[ MVW_PP ], A
                ENDIF
                
 0138 5000          mov    A, 0                        ; Count Register
 013A 570B          mov    X, USB_MODE_ACK_OUT_STATUS_IN
 013C 8EEB          jmp    USBFS_EP0_UPD_MODE_EXIT
 013E           
 013E           ; Jump here on data toggle error
 013E           .error:
 013E 550C00        mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; This simply aborts the transfer
 0141 5000          mov    A, 0                        ; Count Register
 0143 5703          mov    X, USB_MODE_STALL_IN_OUT
 0145 8EE2          jmp    USBFS_EP0_UPD_MODE_EXIT
 0147           
 0147           
 0147           ;-----------------------------------------------------------------------------
 0147           ;  FUNCTION NAME: USBFS_ControlWriteStatusStage
 0147           ;
 0147           ;  DESCRIPTION:   This routine processes the status stage of a control
 0147           ;                 write.  It must be JUMPed to, not called.  It assumes a
 0147           ;                 tranfer descriptor has been loaded into the driver
 0147           ;                 USBFS_CurrentTD data structure.
 0147           ;
 0147           ;-----------------------------------------------------------------------------
 0147            USBFS_ControlWriteStatusStage:
 0147 5001          mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
 0149 9110          call   USBFS_UpdateStatusBlock
 014B 550C00        mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; The packet is done
 014E 5000          mov    A, 0                        ; Count Register
 0150 5703          mov    X, USB_MODE_STALL_IN_OUT
 0152 8ED5          jmp    USBFS_EP0_UPD_MODE_EXIT
 0154           
 0154           
 0154           ;-----------------------------------------------------------------------------
 0154           ;  FUNCTION NAME: USBFS_NoDataControlStatusStage
 0154           ;
 0154           ;  DESCRIPTION:   This routine processes the status stage of a control
 0154           ;                 write.  It must be JUMPed to, not called.  It assumes a
 0154           ;                 tranfer descriptor has been loaded into the driver
 0154           ;                 USBFS_CurrentTD data structure.
 0154           ;
 0154           ;                 USB Device Addressing happens here because we can't change
 0154           ;                 the SIE Address before the Status IN is received.
 0154           ;
 0154           ;-----------------------------------------------------------------------------
 0154            USBFS_NoDataControlStatusStage:
 0154 5001          mov     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
 0156 9103          call    USBFS_UpdateStatusBlock
 0158               ; Dispatch to the proper handler
 0158 3C1F01        cmp     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING
 015B B009          jnz     .L1
 015D           
 015D               ; USB ADDRESS CHANGE
 015D 510D          mov     A, [USBFS_TransferBuffer]    ; Get the pending data
 015F           
 015F 2980          or      A, USB_ADDR_ENABLE         ; Set the enable bit
 0161 604A          mov     reg[USBFS_ADDR], A         ; Update the SIE address
 0163 8001          jmp     .EXIT
 0165           .L1:
 0165           
 0165           .EXIT:
 0165 551F00        mov     [USBFS_fDataPending], 0    ; Clear data pending
 0168           
 0168 5000          mov    A, 0                        ; Count Register
 016A 5706          mov    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
 016C 8EBB          jmp    USBFS_EP0_UPD_MODE_EXIT
 016E           
 016E           
 016E           ;-----------------------------------------------------------------------------
 016E           ;  FUNCTION NAME: USBFS_NoDataControlError
 016E           ;
 016E           ;  DESCRIPTION:   This routine handles the condition when we expected a
 016E           ;                 status IN, but receive an OUT
 016E           ;
 016E           ;-----------------------------------------------------------------------------
 016E            USBFS_NoDataControlError:
 016E 5003          mov    A, USB_XFER_ERROR           ; Return Transaction Error
 0170 90E9          call   USBFS_UpdateStatusBlock
 0172 5000          mov    A, 0                        ; Count Register
 0174 5703          mov    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
 0176 8EB1          jmp    USBFS_EP0_UPD_MODE_EXIT
 0178           
 0178           
 0178           ;-----------------------------------------------------------------------------
 0178           ;  FUNCTION NAME: USBFS_LoadEndpoint
 0178           ;
 0178           ;  DESCRIPTION: Moves data from either RAM or ROM - depending on the request
 0178           ;               type and then places the appropriate number of bytes -
 0178           ;               depending on the request size into the endpoint FIFO.
 0178           ;               It finally sets up the endpoint to send data.
 0178           ;
 0178           USBFS_LoadEndpoint:
 0178 510B          mov     A, [USBFS_LastSize]        ; Get the number of bytes from the last transfer
 017A 041D          add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
 017C 0E1C00        adc     [USBFS_TransferByteCount], 0   ;
 017F 5116          mov     A,  [USBFS_TransferSize]   ; Check to see if we have any
 0181 2A17          or      A,  [USBFS_TransferSize+1]   ;  more data to send
 0183 B00E          jnz     .cont                      ; Jump if we have to send more data
 0185           
 0185           ; Flow here if there is no more data to send
 0185 3C0B08        cmp     [USBFS_LastSize], 8        ; Was it a full packet?
 0188 A052          JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)
 018A           
 018A           ; Flow here if we are entering the status stage
 018A 5000          mov     A, 0                       ; Count Register
 018C 530B          mov     [USBFS_LastSize], A        ; Clear the byte count
 018E 5702          mov     X, USB_MODE_STATUS_OUT_ONLY   ; Only ACK the Status Out
 0190 8E97          jmp     USBFS_EP0_UPD_MODE_EXIT
 0192           
 0192           ; Jump here to determine how many bytes should we transfer
 0192           .cont:
 0192 3C1600        cmp     [USBFS_TransferSize], 0    ; Check the MSB
 0195 B00A          jnz     .L1
 0197           
 0197 3C1708        cmp     [USBFS_TransferSize+1], 8    ; Check the LSB
 019A D005          jnc     .L1
 019C           
 019C 5117          mov     A, [USBFS_TransferSize+1]     ; Transfer all the remaing data
 019E 8003          jmp     .L3
 01A0           
 01A0           .L1:
 01A0 5008          mov     A, 8                       ; Just transfer the next 8 bytes
 01A2           
 01A2           .L3:
 01A2           
 01A2 1417          sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
 01A4 1E1600        sbb     [USBFS_TransferSize], 0
 01A7 5320          mov     [USBFS_t2], A              ; Save the count
 01A9 5700          mov     X, 0
 01AB           
 01AB 3C1500        cmp     [USBFS_DataSource], USB_DS_ROM    ; RAM or ROM copy?
 01AE B017          jnz     .RAM_COPY
 01B0           
 01B0           ; Copy data from a ROM source
 01B0           .ROM_COPY:
 01B0 10            push    X                          ; Save the destination offset
 01B1 5118          mov     A, [USBFS_DataPtr]         ; Get the transfer source MSB
 01B3 5819          mov     X, [USBFS_DataPtr+1]       ; Set the transfer source LSB
 01B5 7619          inc     [USBFS_DataPtr+1]          ; Increment the data pointer
 01B7 0E1800        adc     [USBFS_DataPtr], 0         ;   MSB if necessary
 01BA           
 01BA 28            romx                               ; Get the data byte
 01BB           
 01BB 20            pop     X                          ; Get the destination offset
 01BC 6158          mov     reg[X + USBFS_EP0DATA], A  ; Load the data
 01BE 75            inc     X                          ; Bump the destination offset
 01BF 5B            mov     A, X                       ; Are we done?
 01C0 3A20          cmp     A, [USBFS_t2]
 01C2 CFED          jc      .ROM_COPY                  ; Not done
 01C4 8016          jmp     .START_TRANSFER            ; Otherwise go start the transfer
 01C6           
 01C6           ; Copy data from a RAM source
 01C6           .RAM_COPY:
                IF SYSTEM_LARGE_MEMORY_MODEL
 01C6 5DD4         mov   A, reg[ MVR_PP ]
 01C8 08           push  A
 01C9 5118          mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
 01CB 60D4          mov     reg[MVR_PP], A
                ENDIF
 01CD           .CP1:
 01CD 3E19          mvi     A, [USBFS_DataPtr+1]       ; Get the data, bump the source
 01CF           
 01CF 6158          mov     reg[X +USBFS_EP0DATA], A   ; Load the data
 01D1 75            inc     X                          ; Bump the destination offset
 01D2 5B            mov     A, X                       ; Are we done?
 01D3 3A20          cmp     A, [USBFS_t2]
 01D5 CFF7          jc      .CP1                       ; Not done
 01D7           
                IF SYSTEM_LARGE_MEMORY_MODEL
 01D7 18           pop   A
 01D8 60D4         mov   reg[ MVR_PP ], A
 01DA 5B            mov     A, X                       ; Restore A
                ENDIF
                
                ;; Set up the IN transfer count/mode/etc
                ;    A contains the byte count
 01DB           .START_TRANSFER:
 01DB 530B          mov     [USBFS_LastSize], A        ; Save the packet size
 01DD           
 01DD 5001          mov     A, 1
 01DF 221E          and     A, [USBFS_EP0DataToggle]
 01E1 A003          jz      .BYPASS_T1
 01E3 5080          mov     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle
 01E5           
 01E5           .BYPASS_T1:
 01E5 2A0B          or      A, [USBFS_LastSize]
 01E7 361E01        xor     [USBFS_EP0DataToggle], 1      ; Update the data toggle for next time
 01EA           
 01EA 570F          mov     X, USB_MODE_ACK_IN_STATUS_OUT    ; Set the mode register
 01EC 8E3B          jmp    USBFS_EP0_UPD_MODE_EXIT
 01EE           
 01EE           
 01EE           ;-----------------------------------------------------------------------------
 01EE           ;  FUNCTION NAME: USBFS_GetTableEntry
 01EE           ;
 01EE           ;  DESCRIPTION: This function figures out based on the various bytes in the
 01EE           ;               setup packet where to get the data from or put the data to.
 01EE           ;               Transfer Data structures are defined each of the supported
 01EE           ;               control transfers, this function finds the right one and
 01EE           ;               saves it in the CurrentTD structure in RAM.  It then
 01EE           ;               calls InitControlRead or InitControlWrite to being the
 01EE           ;               transaction.
 01EE           ;
 01EE           ;-----------------------------------------------------------------------------
                export USBFS_GetTableEntry
 01EE           USBFS_GetTableEntry:
 01EE           
 01EE 75            inc     X                          ; Point to the first table entry
 01EF 0900          adc     A, 0                       ;
 01F1           
 01F1 08            PUSH    A                          ; Save a work register
 01F2 6520          ASL     [USBFS_t2]                       ; Index * 2
 01F4 6520          ASL     [USBFS_t2]                       ; Index * 4
 01F6 6520          ASL     [USBFS_t2]                       ; Index * 8
 01F8 18            POP     A                          ; Restore the work register
 01F9           
 01F9 4B            swap    A, X
 01FA 0220          add     A, [USBFS_t2]
 01FC 4B            swap    A, X
 01FD 0900          adc     A, 0                       ; A:X now points to the descriptor table entry we want
 01FF           
 01FF           ; Flow here to load the Transfer Descriptor (TD_ENTRY)
 01FF 552015        mov     [USBFS_t2], USBFS_CurrentTD    ; Use Temp as mvi pointer
 0202 9026          call     USBFS_GETBYTE             ; Get the descriptor data source
 0204 901C          call     USBFS_GETWORD             ; Get the descriptor size
 0206 901A          call     USBFS_GETWORD             ; Get the descriptor address
 0208 9018          call     USBFS_GETWORD             ; Get the Status Pointer
 020A           ; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
 020A 5D58          mov     A, reg[USBFS_EP0DATA+bmRequestType] ; Get bmRequestType
 020C 2180          and     A, 0x80                         ; Control Read or Write
 020E A003          jz      .control_write
 0210           
 0210 8E8E          jmp     USBFS_InitControlRead
 0212           
 0212           .control_write:
 0212 8ED3          jmp     USBFS_InitControlWrite
 0214           
 0214           
 0214           ;-----------------------------------------------------------------------------
 0214           ;  FUNCTION NAME: USBFS_LOOKUP
 0214           ;
 0214           ;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
 0214           ;
 0214           ;-----------------------------------------------------------------------------
 0214           ;
 0214           ;  ARGUMENTS:    A:X Point to the lookup table
 0214           ;                USBFS_t2 contain the table index
 0214           ;
 0214           ;  RETURNS:      Address of the LT_ENTRY in A:X
 0214           ;
 0214           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0214           ;
 0214           ;  THEORY of OPERATION or PROCEDURE:
 0214           ;
 0214           ;-----------------------------------------------------------------------------
                export USBFS_LOOKUP
 0214           USBFS_LOOKUP:
 0214 75            inc     X                          ; Point to the first table entry
 0215 0900          adc     A, 0                       ;
 0217           
 0217 6520          ASL     [USBFS_t2]                       ; Simply shift (mult by 2)
 0219 6520          ASL     [USBFS_t2]                       ;              (mult by 4)
 021B 4B            swap    A, X
 021C 0220          add     A, [USBFS_t2]              ;
 021E 4B            swap    A, X
 021F 0900          adc     A, 0
 0221 7F            ret
 0222           
 0222           
 0222           ;-----------------------------------------------------------------------------
 0222           ;  FUNCTION NAME: USBFS_GETWORD/USBFS_GETBYTE
 0222           ;
 0222           ;  DESCRIPTION:    Get a word value from ROM
 0222           ;
 0222           ;-----------------------------------------------------------------------------
 0222           ;
 0222           ;  ARGUMENTS:    A:X is the ROM Address
 0222           ;                USBFS_t2 is the destination address
 0222           ;
 0222           ;  RETURNS:      USBFS_t1
 0222           ;
 0222           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0222           ;                USES USBFS_t2
 0222           ;                A:X points to the subsequent locaction ROM location
 0222           ;  THEORY of OPERATION or PROCEDURE:
 0222           ;
 0222           ;-----------------------------------------------------------------------------
                export USBFS_GETWORD
 0222           USBFS_GETWORD:
 0222           
 0222 08            push    A                          ; Don't loose the pointer MSB
 0223 28            romx                               ; Data source flag
 0224 3F20          mvi     [USBFS_t2], A              ; Save the data source
 0226 18            pop     A                          ; Get the MSB back
 0227 75            inc     X                          ; Point to the next  entry
 0228 0900          adc     A, 0                       ;
 022A           
                export USBFS_GETBYTE
 022A           USBFS_GETBYTE:
 022A           
 022A 08            push    A                          ; Don't loose the pointer MSB
 022B 28            romx                               ; Data source flag
 022C 3F20          mvi     [USBFS_t2], A              ; Save the data source
 022E 18            pop     A                          ; Get the MSB back
 022F 75            inc     X                          ; Point to the next  entry
 0230 0900          adc     A, 0                       ;
 0232 7F            ret
 0233           
 0233           
 0233           ;-----------------------------------------------------------------------------
 0233           ;  FUNCTION NAME: USBFS_GET_DEVICE_TABLE_ENTRY
 0233           ;
 0233           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 0233           ;                  Not intended for use by C fucntions
 0233           ;
 0233           ;-----------------------------------------------------------------------------
 0233           ;
 0233           ;  ARGUMENTS:
 0233           ;
 0233           ;  RETURNS:        A:X points the the current DEVICE_TABLE entry
 0233           ;                  Carry flag is set if the current device index is out of range
 0233           ;
 0233           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0233           ;
 0233           ;  THEORY of OPERATION or PROCEDURE:
 0233           ;
 0233           ;-----------------------------------------------------------------------------
                export USBFS_GET_DEVICE_TABLE_ENTRY
 0233           USBFS_GET_DEVICE_TABLE_ENTRY:
 0233 5F2000        mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector
 0236           
 0236 5000          mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
 0238 5700          mov     X, <USBFS_DEVICE_LOOKUP    ; Get the ROM Address LSB
 023A 28            romx                               ; First entry is the table size (only a byte)
 023B 3A20          cmp     A, [USBFS_t2]              ; Range check
 023D 5000          mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
 023F C003          jc      .exit
 0241           ; Flow here if the index is valid
 0241 9FD1          call    USBFS_LOOKUP               ; Look up the configuration
 0243           ; Jump or flow here on exit
 0243           .exit:
 0243 7F            ret
 0244           
 0244           
 0244           ;-----------------------------------------------------------------------------
 0244           ;  FUNCTION NAME: USBFS_GET_CONFIG_TABLE_ENTRY
 0244           ;
 0244           ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
 0244           ;                  Not intended fOR use by C fucntions
 0244           ;                  Does not do range checking on
 0244           ;
 0244           ;-----------------------------------------------------------------------------
 0244           ;
 0244           ;  ARGUMENTS:
 0244           ;
 0244           ;  RETURNS:        A:X points the the current CONFIG_TABLE entry
 0244           ;                  Carry flag is set if the current device index is out of range
 0244           ;
 0244           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0244           ;
 0244           ;  THEORY of OPERATION or PROCEDURE:
 0244           ;
 0244           ;-----------------------------------------------------------------------------
                export USBFS_GET_CONFIG_TABLE_ENTRY
 0244           USBFS_GET_CONFIG_TABLE_ENTRY:
 0244 9FED          call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
 0246 552021        mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
 0249 9FD7          call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
 024B                                                  ; ITempW has the address
 024B 5D5A          mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
 024D 5320          mov     [USBFS_t2], A              ; Save it
 024F 5121          mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
 0251 5822          mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
 0253           
 0253           ; A:X Points to the CONFIG_LOOKUP, so get the current entry
 0253 5F2001        mov     [USBFS_t2], [USBFS_Configuration]   ; Get the configuration number
 0256 7A20          DEC     [USBFS_t2]                 ; We don't populate the 0th entry
 0258 9FBA          call    USBFS_LOOKUP               ; Look up the configuration
 025A 7F            ret
 025B           
 025B           
 025B           ;-----------------------------------------------------------------------------
 025B           ;  FUNCTION NAME: USBFS_UpdateStatusBlock
 025B           ;
 025B           ;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
 025B           ;                  block is updated with the completion code from the
 025B           ;                  argument (A) and the _TransferByteCount.
 025B           ;
 025B           ;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
 025B           ;                  to make sure no other updates are made to the StatusBlock by
 025B           ;                  the USB User Module.
 025B           ;
 025B           ;-----------------------------------------------------------------------------
 025B           ;
 025B           ;  ARGUMENTS:      A contains the Completion Status Code
 025B           ;
 025B           ;  RETURNS:        None
 025B           ;
 025B           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 025B           ;
 025B           ;  THEORY of OPERATION or PROCEDURE:
 025B           ;
 025B           ;-----------------------------------------------------------------------------
 025B           USBFS_UpdateStatusBlock:
 025B 581B          mov     X, [USBFS_StatusBlockPtr + 1]   ;
 025D 4B            swap    A, X                       ; Don't loose the completion code
 025E 3900          cmp     A, 0                       ; NULL?
 0260 A00F          jz      .done                      ; No update on NULL
 0262           ; Flow here to update the VSR Completion Status Block
 0262 4B            swap    A, X                       ; Completion code A, Pointer in X
 0263 5400          mov     [X + 0], A                 ; Update the completion Code
 0265 511C          mov     A, [USBFS_TransferByteCount]   ; Actual Byte Count MSB
 0267 5401          mov     [X + 1], A
 0269 511D          mov     A, [USBFS_TransferByteCount + 1]   ; Actual Byte Count LSB
 026B 5402          mov     [X + 2], A
 026D 551B00        mov     [USBFS_StatusBlockPtr + 1], 0   ; Clear the Block Pointer
 0270           .done:
 0270 7F            ret                                ; All done
 0271           
 0271           
 0271           ;-----------------------------------------------------------------------------
 0271           ;  FUNCTION NAME: USBFS_InitializeStatusBlock
 0271           ;
 0271           ;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
 0271           ;                  The completion code is set to USB_XFER_IDLE.
 0271           ;
 0271           ;-----------------------------------------------------------------------------
 0271           ;
 0271           ;  ARGUMENTS:      None
 0271           ;
 0271           ;  RETURNS:        None
 0271           ;
 0271           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0271           ;
 0271           ;  THEORY of OPERATION or PROCEDURE:
 0271           ;
 0271           ;-----------------------------------------------------------------------------
 0271           USBFS_InitializeStatusBlock:
 0271 511B          mov     A, [USBFS_StatusBlockPtr + 1]   ;
 0273 3900          cmp     A, 0                       ; NULL?
 0275 A00B          jz      .done                      ; No update on NULL
 0277           ; Flow here to initialize the Completion Status Block
 0277 4B            swap    A, X                       ; Pointer in X
 0278 560000        mov     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0)
 027B 551C00        mov     [USBFS_TransferByteCount], 0   ; Clear the byte count
 027E 551D00        mov     [USBFS_TransferByteCount + 1], 0   ;
 0281           .done:
 0281 7F            ret                                ; All done
 0282           
 0282           
 0282           ;-----------------------------------------------------------------------------
 0282           ;  FUNCTION NAME: ;  USB 1st Tier Dispactch Jump Table (based on bmRequestType)
 0282           ;
 0282           ;  DESCRIPTION:
 0282           ;
 0282           ;-----------------------------------------------------------------------------
 0282           ;
 0282           ;  ARGUMENTS:
 0282           ;
 0282           ;  RETURNS:
 0282           ;
 0282           ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0282           ;
 0282           ;  THEORY of OPERATION or PROCEDURE:
 0282           ;
 0282           ;-----------------------------------------------------------------------------
 0282           MACRO BMREQUEST_DISPATCH
 0282           IF (USB_CB_@0_@1_@2 & 1)
 0282               jmp     USBFS_DT_@0_@1_@2_Dispatch
 0282           ELSE
 0282               jmp     USBFS_Not_Supported_Local_Drv
 0282           ENDIF
 0282           USBFS_DT_bmRequestType::
                IF (USB_CB_h2d_std_dev & 1)
 0282 8000          jmp     USBFS_DT_h2d_std_dev_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ifc & 1)
 0284 8000          jmp     USBFS_DT_h2d_std_ifc_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_ep & 1)
 0286 8000          jmp     USBFS_DT_h2d_std_ep_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_std_oth & 1)
                    jmp     USBFS_DT_h2d_std_oth_Dispatch
                ELSE
 0288 8042          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_dev & 1)
                    jmp     USBFS_DT_h2d_cls_dev_Dispatch
                ELSE
 028A 8040          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ifc & 1)
 028C 8000          jmp     USBFS_DT_h2d_cls_ifc_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_ep & 1)
                    jmp     USBFS_DT_h2d_cls_ep_Dispatch
                ELSE
 028E 803C          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_cls_oth & 1)
                    jmp     USBFS_DT_h2d_cls_oth_Dispatch
                ELSE
 0290 803A          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_dev & 1)
                    jmp     USBFS_DT_h2d_vnd_dev_Dispatch
                ELSE
 0292 8038          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ifc & 1)
                    jmp     USBFS_DT_h2d_vnd_ifc_Dispatch
                ELSE
 0294 8036          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_ep & 1)
                    jmp     USBFS_DT_h2d_vnd_ep_Dispatch
                ELSE
 0296 8034          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_vnd_oth & 1)
                    jmp     USBFS_DT_h2d_vnd_oth_Dispatch
                ELSE
 0298 8032          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_dev & 1)
                    jmp     USBFS_DT_h2d_rsv_dev_Dispatch
                ELSE
 029A 8030          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ifc & 1)
                    jmp     USBFS_DT_h2d_rsv_ifc_Dispatch
                ELSE
 029C 802E          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_ep & 1)
                    jmp     USBFS_DT_h2d_rsv_ep_Dispatch
                ELSE
 029E 802C          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_h2d_rsv_oth & 1)
                    jmp     USBFS_DT_h2d_rsv_oth_Dispatch
                ELSE
 02A0 802A          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_dev & 1)
 02A2 8000          jmp     USBFS_DT_d2h_std_dev_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ifc & 1)
 02A4 8000          jmp     USBFS_DT_d2h_std_ifc_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_ep & 1)
 02A6 8000          jmp     USBFS_DT_d2h_std_ep_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_std_oth & 1)
                    jmp     USBFS_DT_d2h_std_oth_Dispatch
                ELSE
 02A8 8022          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_dev & 1)
                    jmp     USBFS_DT_d2h_cls_dev_Dispatch
                ELSE
 02AA 8020          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ifc & 1)
 02AC 8000          jmp     USBFS_DT_d2h_cls_ifc_Dispatch
                ELSE
                    jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_ep & 1)
                    jmp     USBFS_DT_d2h_cls_ep_Dispatch
                ELSE
 02AE 801C          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_cls_oth & 1)
                    jmp     USBFS_DT_d2h_cls_oth_Dispatch
                ELSE
 02B0 801A          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_dev & 1)
                    jmp     USBFS_DT_d2h_vnd_dev_Dispatch
                ELSE
 02B2 8018          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ifc & 1)
                    jmp     USBFS_DT_d2h_vnd_ifc_Dispatch
                ELSE
 02B4 8016          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_ep & 1)
                    jmp     USBFS_DT_d2h_vnd_ep_Dispatch
                ELSE
 02B6 8014          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_vnd_oth & 1)
                    jmp     USBFS_DT_d2h_vnd_oth_Dispatch
                ELSE
 02B8 8012          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_dev & 1)
                    jmp     USBFS_DT_d2h_rsv_dev_Dispatch
                ELSE
 02BA 8010          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ifc & 1)
                    jmp     USBFS_DT_d2h_rsv_ifc_Dispatch
                ELSE
 02BC 800E          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_ep & 1)
                    jmp     USBFS_DT_d2h_rsv_ep_Dispatch
                ELSE
 02BE 800C          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
                IF (USB_CB_d2h_rsv_oth & 1)
                    jmp     USBFS_DT_d2h_rsv_oth_Dispatch
                ELSE
 02C0 800A          jmp     USBFS_Not_Supported_Local_Drv
                ENDIF
 02C2           USBFS_DT_End:
 0020           USBFS_DT_Size: equ (USBFS_DT_End-USBFS_DT_bmRequestType) / 2
 02C2           USBFS_bmRequestType_Dispatch::
 02C2 3920          CMP   A,USBFS_DT_Size
 02C4 D004          JNC   .dispatch_not_supported
 02C6 64            ASL   A
 02C7 EFBA          JACC  USBFS_DT_bmRequestType
 02C9           .dispatch_not_supported:
 02C9 8001          JMP  USBFS_Not_Supported_Local_Drv    
 02CB           
 02CB           USBFS_Not_Supported_Local_Drv:
 02CB 7D0000        ljmp     USBFS_Not_Supported
 02CE           
 02CE           
 02CE           ;-----------------------------------------------
 02CE           ; Add custom application code for routines
 02CE           ;-----------------------------------------------
 02CE           
 02CE              ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
 02CE              ;---------------------------------------------------
 02CE              ; Insert your custom code below this banner
 02CE              ;---------------------------------------------------
 02CE           
 02CE              ;---------------------------------------------------
 02CE              ; Insert your custom code above this banner
 02CE              ;---------------------------------------------------
 02CE              ;@PSoC_UserCode_END@ (Do not change this line.)
 02CE           
 02CE           ; End of File USBFS_drv.asm
