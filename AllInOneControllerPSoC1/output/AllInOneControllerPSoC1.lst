FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY7C64215 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0111)     // call	void_handler
0008: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0115)     // call	void_handler
000C: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0127)     // call	void_handler
0020: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0131)     // call	void_handler
0024: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 11 CF LJMP  _UART_TX_ISR       (0135)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 11 D0 LJMP  _UART_RX_ISR       (0139)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   40h                      ;USB Reset Interrupt Vector
0040: 7D 1D 09 LJMP  _USBFS_RESET_ISR   (0143)     ljmp	_USBFS_RESET_ISR
0043: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   44h                      ;USB SOF Interrupt Vector
0044: 7D 1D 38 LJMP  _USBFS_SOF_ISR     (0147)     ljmp	_USBFS_SOF_ISR
0047: 7E       RETI                     (0148)     reti
                                        (0149) 
                                        (0150)     org   48h                      ;USB EP0 Interrupt Vector
0048: 7D 0A BF LJMP  _USBFS_EP0_ISR     (0151)     ljmp	_USBFS_EP0_ISR
004B: 7E       RETI                     (0152)     reti
                                        (0153) 
                                        (0154)     org   4Ch                      ;USB EP1 Interrupt Vector
004C: 7D 1C CD LJMP  _USBFS_EP1_ISR     (0155)     ljmp	_USBFS_EP1_ISR
004F: 7E       RETI                     (0156)     reti
                                        (0157) 
                                        (0158)     org   50h                      ;USB EP2 Interrupt Vector
0050: 7D 1C DC LJMP  _USBFS_EP2_ISR     (0159)     ljmp	_USBFS_EP2_ISR
0053: 7E       RETI                     (0160)     reti
                                        (0161) 
                                        (0162)     org   54h                      ;USB EP3 Interrupt Vector
0054: 7D 1C EB LJMP  _USBFS_EP3_ISR     (0163)     ljmp	_USBFS_EP3_ISR
0057: 7E       RETI                     (0164)     reti
                                        (0165) 
                                        (0166)     org   58h                      ;USB EP4 Interrupt Vector
0058: 7D 1C FA LJMP  _USBFS_EP4_ISR     (0167)     ljmp	_USBFS_EP4_ISR
005B: 7E       RETI                     (0168)     reti
                                        (0169) 
                                        (0170)     org   5Ch                      ;USB Wakeup Interrupt Vector
005C: 7D 1D 39 LJMP  _USBFS_WAKEUP_ISR  (0171)     ljmp	_USBFS_WAKEUP_ISR
005F: 7E       RETI                     (0172)     reti
                                        (0173) 
                                        (0174)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0175)     // call	void_handler
0060: 7E       RETI                     (0176)     reti
                                        (0177) 
                                        (0178)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0179)     // call	void_handler
0064: 7E       RETI                     (0180)     reti
0068: 71 10    OR    F,0x10             
                                        (0181)     ;---------------------------------------------------
                                        (0182)     ; Insert your custom code above this banner
                                        (0183)     ;---------------------------------------------------
                                        (0184)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0185) 
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  Start of Execution.
                                        (0188) ;-----------------------------------------------------------------------------
                                        (0189) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0190) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0191) ;
                                        (0192) 
                                        (0193) IF	(TOOLCHAIN & HITECH)
                                        (0194)  	AREA PD_startup(CODE, REL, CON)
                                        (0195) ELSE
                                        (0196)     org 68h
                                        (0197) ENDIF
                                        (0198) __Start:
                                        (0199) 
                                        (0200)     ; initialize values for voltage stabilization, if required,
                                        (0201)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0202)     ; least for now. 
                                        (0203)     ;
                                        (0204)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0205)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 07 MOV   REG[0xE3],0x7      (0206)     mov   reg[VLT_CR], LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0207)     M8C_SetBank0
                                        (0208) 
                                        (0209)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0210)     mov   A, 20h
0074: 28       ROMX                     (0211)     romx
0075: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     ; %45%20%46%46% End workaround
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep ; Clear WDT before enabling it    	
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
0078: 41 FE FB AND   REG[0xFE],0xFB     (0219)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0220) 
                                        (0221)     ;---------------------------
                                        (0222)     ; Set up the Temporary stack
                                        (0223)     ;---------------------------
                                        (0224)     ; A temporary stack is set up for the SSC instructions.
                                        (0225)     ; The real stack start will be assigned later.
                                        (0226)     ;
                                        (0227) _stack_start:          equ 80h
007B: 50 80    MOV   A,0x80             (0228)     mov   A, _stack_start          ; Set top of stack to end of used RAM
007D: 4E       SWAP  SP,A               (0229)     swap  SP, A                    ; This is only temporary if going to LMM
007E: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0230) 
                                        (0231)     ;------------------------
                                        (0232)     ; Set Power-related Trim 
                                        (0233)     ;------------------------
                                        (0234) M8C_ClearWDTAndSleep ; Clear WDT before enabling it
                                        (0235) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0236) 
                                        (0237)   IF ( AGND_BYPASS )
                                        (0238)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0239)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0240)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0241)     ; value using the proper trim values.
                                        (0242)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0243)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0244)   ENDIF
                                        (0245) ELSE
                                        (0246) 	; 3.3V operation trim codes
                                        (0247) 	; Set the IMO and Bandgap trims for 3v operation
                                        (0248)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGN_BYPASS_JUST
                                        (0249) 	
                                        (0250) 	; Set the IMO Gain Trim for 3v operation
                                        (0251) 	M8SSC_SetTableIMOGainTrim 2, SSCTBL2_TRIM_IMO_GAIN_3V
                                        (0252) 
                                        (0253) ENDIF ; 3.3 Volt Operation
                                        (0254) 
0081: 55 F8 00 MOV   [commandReady+57],0x0(0255)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [commandReady+58],0x0(0256)     mov  [bSSC_KEYSP], 0
0087: 71 10    OR    F,0x10             
                                        (0257) 				
                                        (0258)     ;---------------------------------------
                                        (0259)     ; Initialize Crystal Oscillator and PLL
                                        (0260)     ;---------------------------------------
                                        (0261) 
                                        (0262)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0263)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0264)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             
008E: 62 E3 38 MOV   REG[0xE3],0x38     
0091: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0265)     M8C_SetBank0
                                        (0266)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0267) 
                                        (0268) 	;-------------------------------------------------------
                                        (0269)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0270)     ;-------------------------------------------------------
                                        (0271) 
                                        (0272)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0273) 
                                        (0274) IF (SYSCLK_SOURCE)
                                        (0275)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0276) ENDIF
                                        (0277)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0278) 	
                                        (0279) IF	(TOOLCHAIN & HITECH)
                                        (0280)     ;---------------------------------------------
                                        (0281)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0282)     ;---------------------------------------------
                                        (0283) 	global		__Lstackps
                                        (0284) 	mov     a,low __Lstackps
                                        (0285) 	swap    a,sp
                                        (0286) 
                                        (0287) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0288)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0289)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0290)     RAM_SETPAGE_CUR 0
                                        (0291)     RAM_SETPAGE_MVW 0
                                        (0292)     RAM_SETPAGE_MVR 0
                                        (0293)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0294)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0295)     ELSE
                                        (0296)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0297)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0298) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0299) ELSE
                                        (0300)     ;---------------------------------------------
                                        (0301)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0302)     ;---------------------------------------------
                                        (0303) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0304)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
0094: 50 00    MOV   A,0x0              (0305)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0096: 4E       SWAP  SP,A               (0306)     swap  A, SP
0097: 62 D3 03 MOV   REG[0xD3],0x3      
009A: 62 D0 00 MOV   REG[0xD0],0x0      
009D: 62 D5 00 MOV   REG[0xD5],0x0      
00A0: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0307)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0308)     RAM_SETPAGE_CUR 0
                                        (0309)     RAM_SETPAGE_MVW 0
                                        (0310)     RAM_SETPAGE_MVR 0
                                        (0311) 
                                        (0312)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00A3: 71 C0    OR    F,0xC0             (0313)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0314)   ELSE
                                        (0315)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0316)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0317) ELSE
                                        (0318)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0319)     swap  SP, A
                                        (0320) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0321) ENDIF ;	TOOLCHAIN
                                        (0322) 
                                        (0323)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0324)     ;---------------------------------------------------
                                        (0325)     ; Insert your custom code below this banner
                                        (0326)     ;---------------------------------------------------
                                        (0327) 
                                        (0328)     ;---------------------------------------------------
                                        (0329)     ; Insert your custom code above this banner
                                        (0330)     ;---------------------------------------------------
                                        (0331)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0332) 
                                        (0333)     ;-------------------------
                                        (0334)     ; Load Base Configuration
                                        (0335)     ;-------------------------
                                        (0336)     ; Load global parameter settings and load the user modules in the
                                        (0337)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0338)     ; to minimize start up time; (2) We may still need to play with the
                                        (0339)     ; Sleep Timer.
                                        (0340)     ;
00A5: 7C 07 5E LCALL 0x075E             (0341)     lcall LoadConfigInit
00A8: 71 10    OR    F,0x10             
                                        (0342) 	M8C_SetBank1
00AA: 41 E7 3F AND   REG[0xE7],0x3F     (0343) 	and  reg[DEC_CR1], 0x3F
00AD: 43 E7 80 OR    REG[0xE7],0x80     (0344) 	or   reg[DEC_CR1], 0x80
00B0: 70 EF    AND   F,0xEF             
                                        (0345) 	M8C_SetBank0
                                        (0346)     ;-----------------------------------
                                        (0347)     ; Initialize C Run-Time Environment
                                        (0348)     ;-----------------------------------
                                        (0349) IF ( C_LANGUAGE_SUPPORT )
                                        (0350) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0351)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0352)     mov  [__r0],<__bss_start
                                        (0353) BssLoop:
                                        (0354)     cmp  [__r0],<__bss_end
                                        (0355)     jz   BssDone
                                        (0356)     mvi  [__r0],A
                                        (0357)     jmp  BssLoop
                                        (0358) BssDone:
                                        (0359)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0360)     mov  X,<__idata_start
                                        (0361)     mov  [__r0],<__data_start
                                        (0362) IDataLoop:
                                        (0363)     cmp  [__r0],<__data_end
                                        (0364)     jz   C_RTE_Done
                                        (0365)     push A
                                        (0366)     romx
                                        (0367)     mvi  [__r0],A
                                        (0368)     pop  A
                                        (0369)     inc  X
                                        (0370)     adc  A,0
                                        (0371)     jmp  IDataLoop
                                        (0372) 
                                        (0373) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0374) 
                                        (0375) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B2: 62 D0 00 MOV   REG[0xD0],0x0      (0376)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0377)                                        ; to use the Virtual Register page.
                                        (0378) 
                                        (0379)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0380)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0381)     ; text segment and may have been relocated by the Code Compressor.
                                        (0382)     ;
00B5: 50 06    MOV   A,0x6              (0383)     mov   A, >__pXIData                ; Get the address of the flash
00B7: 57 75    MOV   X,0x75             (0384)     mov   X, <__pXIData                ;   pointer to the xidata area.
00B9: 08       PUSH  A                  (0385)     push  A
00BA: 28       ROMX                     (0386)     romx                               ; get the MSB of xidata's address
00BB: 53 A4    MOV   [__r0],A           (0387)     mov   [__r0], A
00BD: 18       POP   A                  (0388)     pop   A
00BE: 75       INC   X                  (0389)     inc   X
00BF: 09 00    ADC   A,0x0              (0390)     adc   A, 0
00C1: 28       ROMX                     (0391)     romx                               ; get the LSB of xidata's address
00C2: 4B       SWAP  A,X                (0392)     swap  A, X
00C3: 51 A4    MOV   A,[__r0]           (0393)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0394)                                        ;   XIData structure list in flash
00C5: 80 04    JMP   0x00CA             (0395)     jmp   .AccessStruct
                                        (0396) 
                                        (0397)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0398)     ; values of C variables. Each structure contains 3 member elements.
                                        (0399)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0400)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0401)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0402)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0403)     ; value in the second member element, an unsigned byte:
                                        (0404)     ; (1) If the value of the second element is non-zero, it represents
                                        (0405)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0406)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0407)     ; the bytes are copied to the block of RAM.
                                        (0408)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0409)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0410)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0411) 
                                        (0412) .AccessNextStructLoop:
00C7: 75       INC   X                  (0413)     inc   X                            ; pXIData++
00C8: 09 00    ADC   A,0x0              (0414)     adc   A, 0
00CA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0415) .AccessStruct:                         ; Entry point for first block
                                        (0416)     ;
                                        (0417)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0418)     ;
                                        (0419)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CD: 08       PUSH  A                  (0420)     push  A
00CE: 28       ROMX                     (0421)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00CF: 60 D5    MOV   REG[0xD5],A        (0422)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D1: 74       INC   A                  (0423)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D2: A0 4B    JZ    0x011E             (0424)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D4: 18       POP   A                  (0425)     pop   A                            ; restore pXIData to [A,X]
00D5: 75       INC   X                  (0426)     inc   X                            ; pXIData++
00D6: 09 00    ADC   A,0x0              (0427)     adc   A, 0
00D8: 08       PUSH  A                  (0428)     push  A
00D9: 28       ROMX                     (0429)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DA: 53 A4    MOV   [__r0],A           (0430)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DC: 18       POP   A                  (0431)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0432)     inc   X                            ; pXIData++ (point to size)
00DE: 09 00    ADC   A,0x0              (0433)     adc   A, 0
00E0: 08       PUSH  A                  (0434)     push  A
00E1: 28       ROMX                     (0435)     romx                               ; Get the size (CPU.A <- *pXIData)
00E2: A0 1C    JZ    0x00FF             (0436)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E4: 53 A3    MOV   [__r1],A           (0437)     mov   [__r1], A                    ;             else downcount in __r1
00E6: 18       POP   A                  (0438)     pop   A                            ; restore pXIData to [A,X]
                                        (0439) 
                                        (0440) .CopyNextByteLoop:
                                        (0441)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0442)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0443)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0444)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0445)     ;
00E7: 75       INC   X                  (0446)     inc   X                            ; pXIData++ (point to next data byte)
00E8: 09 00    ADC   A,0x0              (0447)     adc   A, 0
00EA: 08       PUSH  A                  (0448)     push  A
00EB: 28       ROMX                     (0449)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EC: 3F A4    MVI   [__r0],A           (0450)     mvi   [__r0], A                    ; Transfer the data to RAM
00EE: 47 A4 FF TST   [__r0],0xFF        (0451)     tst   [__r0], 0xff                 ; Check for page crossing
00F1: B0 06    JNZ   0x00F8             (0452)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F3: 5D D5    MOV   A,REG[0xD5]        (0453)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F5: 74       INC   A                  (0454)     inc   A
00F6: 60 D5    MOV   REG[0xD5],A        (0455)     mov   reg[ MVW_PP], A
                                        (0456) .CopyLoopTail:
00F8: 18       POP   A                  (0457)     pop   A                            ; restore pXIData to [A,X]
00F9: 7A A3    DEC   [__r1]             (0458)     dec   [__r1]                       ; End of this array in flash?
00FB: BF EB    JNZ   0x00E7             (0459)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FD: 8F C9    JMP   0x00C7             (0460)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0461) 
                                        (0462) .ClearRAMBlockToZero:
00FF: 18       POP   A                  (0463)     pop   A                            ; restore pXIData to [A,X]
0100: 75       INC   X                  (0464)     inc   X                            ; pXIData++ (point to next data byte)
0101: 09 00    ADC   A,0x0              (0465)     adc   A, 0
0103: 08       PUSH  A                  (0466)     push  A
0104: 28       ROMX                     (0467)     romx                               ; Get the run length (CPU.A <- *pXIData)
0105: 53 A3    MOV   [__r1],A           (0468)     mov   [__r1], A                    ; Initialize downcounter
0107: 50 00    MOV   A,0x0              (0469)     mov   A, 0                         ; Initialize source data
                                        (0470) 
                                        (0471) .ClearRAMBlockLoop:
                                        (0472)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0473)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0474)     ;
0109: 3F A4    MVI   [__r0],A           (0475)     mvi   [__r0], A                    ; Clear a byte
010B: 47 A4 FF TST   [__r0],0xFF        (0476)     tst   [__r0], 0xff                 ; Check for page crossing
010E: B0 08    JNZ   0x0117             (0477)     jnz   .ClearLoopTail               ;   No crossing, keep going
0110: 5D D5    MOV   A,REG[0xD5]        (0478)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0112: 74       INC   A                  (0479)     inc   A
0113: 60 D5    MOV   REG[0xD5],A        (0480)     mov   reg[ MVW_PP], A
0115: 50 00    MOV   A,0x0              (0481)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0482) .ClearLoopTail:
0117: 7A A3    DEC   [__r1]             (0483)     dec   [__r1]                       ; Was this the last byte?
0119: BF EF    JNZ   0x0109             (0484)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011B: 18       POP   A                  (0485)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011C: 8F AA    JMP   0x00C7             (0486)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0487) 
                                        (0488) .C_RTE_WrapUp:
011E: 18       POP   A                  (0489)     pop   A                            ; balance stack
011F: 71 10    OR    F,0x10             
                                        (0490) 
                                        (0491) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0492) 
                                        (0493) C_RTE_Done:
                                        (0494) 
                                        (0495) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0496) 
                                        (0497) 
                                        (0498)     ;-------------------------------
                                        (0499)     ; Set Power-On Reset (POR) Level
                                        (0500)     ;-------------------------------
                                        (0501)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0502)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0503)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0504)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0505)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0506) 
                                        (0507)     M8C_SetBank1
                                        (0508) 
                                        (0509) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0510)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;   Yes, change to midpoint trip
                                        (0511) ELSE										   ; 5V Operation
                                        (0512)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0121: 43 E3 00 OR    REG[0xE3],0x0      (0513)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;         No, change to midpoint trip
0124: 70 EF    AND   F,0xEF             
                                        (0514)   ELSE ; 24HMz                                 ;
                                        (0515)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0516)   ENDIF ; 24MHz
                                        (0517) ENDIF ; 3.3V Operation
                                        (0518) 
                                        (0519)     M8C_SetBank0
                                        (0520) 
                                        (0521)     ;----------------------------
                                        (0522)     ; Wrap up and invoke "main"
                                        (0523)     ;----------------------------
                                        (0524) 
                                        (0525)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0526)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0527)     ;
0126: 62 E0 00 MOV   REG[0xE0],0x0      (0528)     mov  reg[INT_MSK0],0
0129: 71 10    OR    F,0x10             
                                        (0529) 
                                        (0530)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0531)     ;
                                        (0532)     M8C_SetBank1
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0533)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012E: 70 EF    AND   F,0xEF             
                                        (0534)     M8C_SetBank0
                                        (0535) 
                                        (0536)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0537)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0538)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0539)     ;
0130: 62 E2 00 MOV   REG[0xE2],0x0      (0540)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0541)                                    ; have been set during the boot process.
                                        (0542) IF	(TOOLCHAIN & HITECH)
                                        (0543) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0544) ELSE
                                        (0545) IF ENABLE_LJMP_TO_MAIN
                                        (0546)     ljmp  _main                    ; goto main (no return)
                                        (0547) ELSE
0133: 7C 14 2A LCALL __UserModules_end|_main|__text_start|_main(0548)     lcall _main                    ; call main
                                        (0549) .Exit:
0136: 8F FF    JMP   0x0136             (0550)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0551) ENDIF
                                        (0552) ENDIF ; TOOLCHAIN
                                        (0553) 
                                        (0554)     ;---------------------------------
                                        (0555)     ; Library Access to Global Parms
                                        (0556)     ;---------------------------------
                                        (0557)     ;
                                        (0558)  bGetPowerSetting:
                                        (0559) _bGetPowerSetting:
                                        (0560)     ; Returns value of POWER_SETTING in the A register.
                                        (0561)     ; No inputs. No Side Effects.
                                        (0562)     ;
0138: 50 10    MOV   A,0x10             (0563)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
013A: 7F       RET                      (0564)     ret
                                        (0565) 
                                        (0566) IF	(TOOLCHAIN & HITECH)
                                        (0567) ELSE
                                        (0568)     ;---------------------------------
                                        (0569)     ; Order Critical RAM & ROM AREAs
                                        (0570)     ;---------------------------------
                                        (0571)     ;  'TOP' is all that has been defined so far...
                                        (0572) 
                                        (0573)     ;  ROM AREAs for C CONST, static & global items
                                        (0574)     ;
                                        (0575)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0576)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0577) __idata_start:
                                        (0578) 
                                        (0579)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0580) __func_lit_start:
                                        (0581) 
                                        (0582) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0583)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0584)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0585)     ; relocated by the code compressor, but the text area may shrink and
                                        (0586)     ; that moves xidata around.
                                        (0587)     ;
                                        (0588) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0589) ENDIF
                                        (0590) 
                                        (0591)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0592)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0593) 
                                        (0594)     ; CODE segment for general use
                                        (0595)     ;
                                        (0596)     AREA text (ROM, REL, CON)
                                        (0597) __text_start:
                                        (0598) 
                                        (0599)     ; RAM area usage
                                        (0600)     ;
                                        (0601)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0602) __data_start:
                                        (0603) 
                                        (0604)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0605)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0606)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0607) __bss_start:
                                        (0608) 
                                        (0609) ENDIF ; TOOLCHAIN
                                        (0610) 
                                        (0611) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0679: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_allinonecontrollerpsoc1_Bank1
                                        (0019) export LoadConfigTBL_allinonecontrollerpsoc1_Bank0
                                        (0020) export LoadConfigTBL_allinonecontrollerpsoc1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_allinonecontrollerpsoc1_Bank0:
                                        (0023) ;  Instance name UART, User Module UART
                                        (0024) ;       Instance name UART, Block Name RX(DCB03)
                                        (0025) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0026) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0027) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0028) ;       Instance name UART, Block Name TX(DCB02)
                                        (0029) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0030) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0031) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0032) ;  Instance name USBFS, User Module USBFS
                                        (0033) ;  Global Register values Bank 0
                                        (0034) 	db		60h, 09h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0035) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0036) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUXCFG)
                                        (0037) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0038) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0039) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0040) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0041) 	db		56h, 00h		; Endpoint0Control register (EP0_CR)
                                        (0042) 	db		57h, 00h		; Endpoint0Count register (EP0_CNT)
                                        (0043) 	db		58h, 00h		; Endpoint0Data0 register (EP0_DR0)
                                        (0044) 	db		59h, 00h		; Endpoint0Data1 register (EP0_DR1)
                                        (0045) 	db		5ah, 00h		; Endpoint0Data2 register (EP0_DR2)
                                        (0046) 	db		5bh, 00h		; Endpoint0Data3 register (EP0_DR3)
                                        (0047) 	db		5ch, 00h		; Endpoint0Data4 register (EP0_DR4)
                                        (0048) 	db		5dh, 00h		; Endpoint0Data5 register (EP0_DR5)
                                        (0049) 	db		5eh, 00h		; Endpoint0Data6 register (EP0_DR6)
                                        (0050) 	db		5fh, 00h		; Endpoint0Data7 register (EP0_DR7)
                                        (0051) 	db		4fh, 00h		; Endpoint1Count0 register (EP1_CNT)
                                        (0052) 	db		4eh, 00h		; Endpoint1Count1 register (EP1_CNT1)
                                        (0053) 	db		51h, 00h		; Endpoint2Count0 register (EP2_CNT)
                                        (0054) 	db		50h, 00h		; Endpoint2Count1 register (EP2_CNT1)
                                        (0055) 	db		53h, 00h		; Endpoint3Count0 register (EP3_CNT)
                                        (0056) 	db		52h, 00h		; Endpoint3Count1 register (EP3_CNT1)
                                        (0057) 	db		55h, 00h		; Endpoint4Count0 register (EP4_CNT)
                                        (0058) 	db		54h, 00h		; Endpoint4Count1 register (EP4_CNT1)
                                        (0059) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0060) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0061) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0062) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0063) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0064) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0065) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0066) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0067) 	db		4ah, 00h		; USBControl_0 register (USB_CR0)
                                        (0068) 	db		4bh, 00h		; USBIOControl_0 register (USBIO_CR0)
                                        (0069) 	db		4ch, 00h		; USBIOControl_1 register (USBIO_CR1)
                                        (0070) 	db		ffh
                                        (0071) LoadConfigTBL_allinonecontrollerpsoc1_Bank1:
                                        (0072) ;  Instance name UART, User Module UART
                                        (0073) ;       Instance name UART, Block Name RX(DCB03)
                                        (0074) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0075) 	db		2dh, c1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0076) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0077) ;       Instance name UART, Block Name TX(DCB02)
                                        (0078) 	db		28h, 1dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0079) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0080) 	db		2ah, 45h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0081) ;  Instance name USBFS, User Module USBFS
                                        (0082) ;  Global Register values Bank 1
                                        (0083) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0084) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0085) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0086) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0087) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0088) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0089) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0090) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0091) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0092) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0093) 	db		fdh, 80h		; DAC_Control register (DAC_CR)
                                        (0094) 	db		c4h, 00h		; Endpoint1Control register (EP1_CR)
                                        (0095) 	db		c5h, 00h		; Endpoint2Control register (EP2_CR)
                                        (0096) 	db		c6h, 00h		; Endpoint3Control register (EP3_CR)
                                        (0097) 	db		c7h, 00h		; Endpoint4Control register (EP4_CR)
                                        (0098) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0099) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0100) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0101) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0102) 	db		e1h, 13h		; OscillatorControl_1 register (OSC_CR1)
                                        (0103) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0104) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0105) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0106) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0107) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0108) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0109) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0110) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0111) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0112) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0113) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0114) 	db		c1h, 00h		; USBControl_1 register (USB_CR1)
                                        (0115) 	db		ffh
                                        (0116) AREA psoc_config(rom, rel)
                                        (0117) LoadConfigTBL_allinonecontrollerpsoc1_Ordered:
                                        (0118) ;  Ordered Global Register values
                                        (0119) 	M8C_SetBank0
067B: 62 00 00 MOV   REG[0x0],0x0       (0120) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
067E: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0680: 62 00 02 MOV   REG[0x0],0x2       (0122) 	mov	reg[00h], 02h		; Port_0_DriveMode_0 register (PRT0DM0)
0683: 62 01 FD MOV   REG[0x1],0xFD      (0123) 	mov	reg[01h], fdh		; Port_0_DriveMode_1 register (PRT0DM1)
0686: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
0688: 62 03 FC MOV   REG[0x3],0xFC      (0125) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
068B: 62 02 03 MOV   REG[0x2],0x3       (0126) 	mov	reg[02h], 03h		; Port_0_GlobalSelect register (PRT0GS)
068E: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0690: 62 02 00 MOV   REG[0x2],0x0       (0128) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0693: 62 03 00 MOV   REG[0x3],0x0       (0129) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0696: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0698: 62 01 00 MOV   REG[0x1],0x0       (0131) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
069B: 62 04 00 MOV   REG[0x4],0x0       (0132) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
069E: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
06A0: 62 04 00 MOV   REG[0x4],0x0       (0134) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
06A3: 62 05 FF MOV   REG[0x5],0xFF      (0135) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
06A6: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
06A8: 62 07 FF MOV   REG[0x7],0xFF      (0137) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
06AB: 62 06 00 MOV   REG[0x6],0x0       (0138) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
06AE: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
06B0: 62 06 00 MOV   REG[0x6],0x0       (0140) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
06B3: 62 07 00 MOV   REG[0x7],0x0       (0141) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
06B6: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
06B8: 62 05 00 MOV   REG[0x5],0x0       (0143) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
06BB: 62 08 00 MOV   REG[0x8],0x0       (0144) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
06BE: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
06C0: 62 08 00 MOV   REG[0x8],0x0       (0146) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
06C3: 62 09 3F MOV   REG[0x9],0x3F      (0147) 	mov	reg[09h], 3fh		; Port_2_DriveMode_1 register (PRT2DM1)
06C6: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
06C8: 62 0B 3F MOV   REG[0xB],0x3F      (0149) 	mov	reg[0bh], 3fh		; Port_2_DriveMode_2 register (PRT2DM2)
06CB: 62 0A 00 MOV   REG[0xA],0x0       (0150) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
06CE: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
06D0: 62 0A 00 MOV   REG[0xA],0x0       (0152) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
06D3: 62 0B 00 MOV   REG[0xB],0x0       (0153) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
06D6: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
06D8: 62 09 00 MOV   REG[0x9],0x0       (0155) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
06DB: 62 0C 00 MOV   REG[0xC],0x0       (0156) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
06DE: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
06E0: 62 0C 00 MOV   REG[0xC],0x0       (0158) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
06E3: 62 0D 00 MOV   REG[0xD],0x0       (0159) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
06E6: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
06E8: 62 0F 00 MOV   REG[0xF],0x0       (0161) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
06EB: 62 0E 00 MOV   REG[0xE],0x0       (0162) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
06EE: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
06F0: 62 0E 00 MOV   REG[0xE],0x0       (0164) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
06F3: 62 0F 00 MOV   REG[0xF],0x0       (0165) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
06F6: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
06F8: 62 0D 00 MOV   REG[0xD],0x0       (0167) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
06FB: 62 10 00 MOV   REG[0x10],0x0      (0168) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
06FE: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
0700: 62 10 00 MOV   REG[0x10],0x0      (0170) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0703: 62 11 00 MOV   REG[0x11],0x0      (0171) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0706: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
0708: 62 13 00 MOV   REG[0x13],0x0      (0173) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
070B: 62 12 00 MOV   REG[0x12],0x0      (0174) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
070E: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
0710: 62 12 00 MOV   REG[0x12],0x0      (0176) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0713: 62 13 00 MOV   REG[0x13],0x0      (0177) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0716: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
0718: 62 11 00 MOV   REG[0x11],0x0      (0179) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
071B: 62 14 00 MOV   REG[0x14],0x0      (0180) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
071E: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
0720: 62 14 00 MOV   REG[0x14],0x0      (0182) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0723: 62 15 00 MOV   REG[0x15],0x0      (0183) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0726: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
0728: 62 17 00 MOV   REG[0x17],0x0      (0185) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
072B: 62 16 00 MOV   REG[0x16],0x0      (0186) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
072E: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
0730: 62 16 00 MOV   REG[0x16],0x0      (0188) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0733: 62 17 00 MOV   REG[0x17],0x0      (0189) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0736: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
0738: 62 15 00 MOV   REG[0x15],0x0      (0191) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
073B: 62 1C 00 MOV   REG[0x1C],0x0      (0192) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
073E: 71 10    OR    F,0x10             
                                        (0193) 	M8C_SetBank1
0740: 62 1C 00 MOV   REG[0x1C],0x0      (0194) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0743: 62 1D 00 MOV   REG[0x1D],0x0      (0195) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0746: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
0748: 62 1F 00 MOV   REG[0x1F],0x0      (0197) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
074B: 62 1E 00 MOV   REG[0x1E],0x0      (0198) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
074E: 71 10    OR    F,0x10             
                                        (0199) 	M8C_SetBank1
0750: 62 1E 00 MOV   REG[0x1E],0x0      (0200) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0753: 62 1F 00 MOV   REG[0x1F],0x0      (0201) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0756: 70 EF    AND   F,0xEF             
                                        (0202) 	M8C_SetBank0
0758: 62 1D 00 MOV   REG[0x1D],0x0      (0203) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
075B: 70 EF    AND   F,0xEF             
                                        (0204) 	M8C_SetBank0
075D: 7F       RET                      (0205) 	ret
                                        (0206) 
                                        (0207) 
                                        (0208) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_allinonecontrollerpsoc1
                                        (0026) export _LoadConfig_allinonecontrollerpsoc1
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
075E: 55 80 00 MOV   [0x80],0x0         (0061) 	mov		[Port_1_Data_SHADE], 0h
                                        (0062) 
0761: 7C 07 68 LCALL 0x0768             (0063) 	lcall	LoadConfig_allinonecontrollerpsoc1
0764: 7C 06 79 LCALL 0x0679             (0064) 	lcall	LoadConfigTBL_allinonecontrollerpsoc1_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
0767: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration allinonecontrollerpsoc1
                                        (0072) ;
                                        (0073) ;    Load configuration registers for allinonecontrollerpsoc1.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_allinonecontrollerpsoc1:
                                        (0090)  LoadConfig_allinonecontrollerpsoc1:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
0768: 10       PUSH  X                  (0093) 	push	x
0769: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
076B: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
076D: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
076E: 50 04    MOV   A,0x4              (0098)     mov     A, >LoadConfigTBL_allinonecontrollerpsoc1_Bank0
0770: 57 5E    MOV   X,0x5E             (0099)     mov     X, <LoadConfigTBL_allinonecontrollerpsoc1_Bank0
0772: 7C 07 83 LCALL 0x0783             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
0775: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
0777: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
0778: 50 04    MOV   A,0x4              (0105)     mov     A, >LoadConfigTBL_allinonecontrollerpsoc1_Bank1
077A: 57 B3    MOV   X,0xB3             (0106)     mov     X, <LoadConfigTBL_allinonecontrollerpsoc1_Bank1
077C: 7C 07 83 LCALL 0x0783             (0107)     lcall   LoadConfig              ; Load the bank 1 values
077F: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
0781: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0782: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0783: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
0785: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
0786: 08       PUSH  A                  (0137)     push    A
0787: 4F       MOV   X,SP               (0138)     mov     X, SP
0788: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
078B: D0 04    JNC   0x0790             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
078D: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0790: 18       POP   A                  (0143)     pop     A
0791: 20       POP   X                  (0144)     pop     X
0792: 70 EF    AND   F,0xEF             
0794: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0797: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
0798: 08       PUSH  A                  (0150)     push    A
0799: 28       ROMX                     (0151)     romx                            ; Load register address from table
079A: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
079C: A0 1F    JZ    0x07BC             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
079E: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
079F: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
07A2: A0 03    JZ    0x07A6             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
07A4: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
07A6: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
07A8: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
07A9: 20       POP   X                  (0161)     pop     X
07AA: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
07AB: 09 00    ADC   A,0x0              (0163)     adc     A, 0
07AD: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
07AE: 08       PUSH  A                  (0165)     push    A
07AF: 28       ROMX                     (0166)     romx                            ; load config data from the table
07B0: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
07B1: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
07B3: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
07B5: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
07B6: 20       POP   X                  (0171)     pop     X
07B7: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
07B8: 09 00    ADC   A,0x0              (0173)     adc     A, 0
07BA: 8F D7    JMP   0x0792             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
07BC: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
07BE: 70 3F    AND   F,0x3F             
07C0: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
07C2: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_1_Data_SHADE:
                                        (0186) Port_1_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\usbfs_std.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFS_std.asm
                                        (0004) ;;  Version: 2.10, Updated on 2015/3/4 at 22:27:56
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "USBFS_macros.inc"
                                        (0024) include "USBFS.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) AREA bss (RAM, REL)
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Constant Definitions
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-----------------------------------------------
                                        (0036) ; Variable Allocation
                                        (0037) ;-----------------------------------------------
                                        (0038) 
                                        (0039) AREA UserModules (ROM, REL)
                                        (0040) 
                                        (0041) ;-----------------------------------------------------------------------------
                                        (0042) ;  FUNCTION NAME: USBFS_Not_Supported
                                        (0043) ;
                                        (0044) ;  DESCRIPTION:
                                        (0045) ;
                                        (0046) ;-----------------------------------------------------------------------------
                                        (0047) ;
                                        (0048) ;  ARGUMENTS:
                                        (0049) ;
                                        (0050) ;  RETURNS:
                                        (0051) ;
                                        (0052) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0053) ;
                                        (0054) ;  THEORY of OPERATION or PROCEDURE:
                                        (0055) ;
                                        (0056) ;-----------------------------------------------------------------------------
                                        (0057) 
                                        (0058) ; d2h_std_dev
                                        (0059) IF (USB_CB_SRC_d2h_std_dev_00 & USB_NOT_SUPPORTED)
                                        (0060) export  USBFS_CB_d2h_std_dev_00
                                        (0061) USBFS_CB_d2h_std_dev_00:
                                        (0062) ENDIF
                                        (0063) IF (USB_CB_SRC_d2h_std_dev_01 & USB_NOT_SUPPORTED)
                                        (0064) export  USBFS_CB_d2h_std_dev_01
                                        (0065) USBFS_CB_d2h_std_dev_01:
                                        (0066) ENDIF
                                        (0067) IF (USB_CB_SRC_d2h_std_dev_02 & USB_NOT_SUPPORTED)
                                        (0068) export  USBFS_CB_d2h_std_dev_02
                                        (0069) USBFS_CB_d2h_std_dev_02:
                                        (0070) ENDIF
                                        (0071) IF (USB_CB_SRC_d2h_std_dev_03 & USB_NOT_SUPPORTED)
                                        (0072) export  USBFS_CB_d2h_std_dev_03
                                        (0073) USBFS_CB_d2h_std_dev_03:
                                        (0074) ENDIF
                                        (0075) IF (USB_CB_SRC_d2h_std_dev_04 & USB_NOT_SUPPORTED)
                                        (0076) export  USBFS_CB_d2h_std_dev_04
                                        (0077) USBFS_CB_d2h_std_dev_04:
                                        (0078) ENDIF
                                        (0079) IF (USB_CB_SRC_d2h_std_dev_05 & USB_NOT_SUPPORTED)
                                        (0080) export  USBFS_CB_d2h_std_dev_05
                                        (0081) USBFS_CB_d2h_std_dev_05:
                                        (0082) ENDIF
                                        (0083) IF (USB_CB_SRC_d2h_std_dev_06 & USB_NOT_SUPPORTED)
                                        (0084) export  USBFS_CB_d2h_std_dev_06
                                        (0085) USBFS_CB_d2h_std_dev_06:
                                        (0086) ENDIF
                                        (0087) IF (USB_CB_SRC_d2h_std_dev_07 & USB_NOT_SUPPORTED)
                                        (0088) export  USBFS_CB_d2h_std_dev_07
                                        (0089) USBFS_CB_d2h_std_dev_07:
                                        (0090) ENDIF
                                        (0091) IF (USB_CB_SRC_d2h_std_dev_08 & USB_NOT_SUPPORTED)
                                        (0092) export  USBFS_CB_d2h_std_dev_08
                                        (0093) USBFS_CB_d2h_std_dev_08:
                                        (0094) ENDIF
                                        (0095) 
                                        (0096) ; h2d_std_dev
                                        (0097) IF (USB_CB_SRC_h2d_std_dev_00 & USB_NOT_SUPPORTED)
                                        (0098) export  USBFS_CB_h2d_std_dev_00
                                        (0099) USBFS_CB_h2d_std_dev_00:
                                        (0100) ENDIF
                                        (0101) IF (USB_CB_SRC_h2d_std_dev_01 & USB_NOT_SUPPORTED)
                                        (0102) export  USBFS_CB_h2d_std_dev_01
                                        (0103) USBFS_CB_h2d_std_dev_01:
                                        (0104) ENDIF
                                        (0105) IF (USB_CB_SRC_h2d_std_dev_02 & USB_NOT_SUPPORTED)
                                        (0106) export  USBFS_CB_h2d_std_dev_02
                                        (0107) USBFS_CB_h2d_std_dev_02:
                                        (0108) ENDIF
                                        (0109) IF (USB_CB_SRC_h2d_std_dev_03 & USB_NOT_SUPPORTED)
                                        (0110) export  USBFS_CB_h2d_std_dev_03
                                        (0111) USBFS_CB_h2d_std_dev_03:
                                        (0112) ENDIF
                                        (0113) IF (USB_CB_SRC_h2d_std_dev_04 & USB_NOT_SUPPORTED)
                                        (0114) export  USBFS_CB_h2d_std_dev_04
                                        (0115) USBFS_CB_h2d_std_dev_04:
                                        (0116) ENDIF
                                        (0117) IF (USB_CB_SRC_h2d_std_dev_05 & USB_NOT_SUPPORTED)
                                        (0118) export  USBFS_CB_h2d_std_dev_05
                                        (0119) USBFS_CB_h2d_std_dev_05:
                                        (0120) ENDIF
                                        (0121) IF (USB_CB_SRC_h2d_std_dev_06 & USB_NOT_SUPPORTED)
                                        (0122) export  USBFS_CB_h2d_std_dev_06
                                        (0123) USBFS_CB_h2d_std_dev_06:
                                        (0124) ENDIF
                                        (0125) IF (USB_CB_SRC_h2d_std_dev_07 & USB_NOT_SUPPORTED)
                                        (0126) export  USBFS_CB_h2d_std_dev_07
                                        (0127) USBFS_CB_h2d_std_dev_07:
                                        (0128) ENDIF
                                        (0129) IF (USB_CB_SRC_h2d_std_dev_08 & USB_NOT_SUPPORTED)
                                        (0130) export  USBFS_CB_h2d_std_dev_08
                                        (0131) USBFS_CB_h2d_std_dev_08:
                                        (0132) ENDIF
                                        (0133) IF (USB_CB_SRC_h2d_std_dev_09 & USB_NOT_SUPPORTED)
                                        (0134) export  USBFS_CB_h2d_std_dev_09
                                        (0135) USBFS_CB_h2d_std_dev_09:
                                        (0136) ENDIF
                                        (0137) 
                                        (0138) ; d2h_std_ifc
                                        (0139) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_NOT_SUPPORTED)
                                        (0140) export  USBFS_CB_d2h_std_ifc_00
                                        (0141) USBFS_CB_d2h_std_ifc_00:
                                        (0142) ENDIF
                                        (0143) IF (USB_CB_SRC_d2h_std_ifc_01 & USB_NOT_SUPPORTED)
                                        (0144) export  USBFS_CB_d2h_std_ifc_01
                                        (0145) USBFS_CB_d2h_std_ifc_01:
                                        (0146) ENDIF
                                        (0147) IF (USB_CB_SRC_d2h_std_ifc_02 & USB_NOT_SUPPORTED)
                                        (0148) export  USBFS_CB_d2h_std_ifc_02
                                        (0149) USBFS_CB_d2h_std_ifc_02:
                                        (0150) ENDIF
                                        (0151) IF (USB_CB_SRC_d2h_std_ifc_03 & USB_NOT_SUPPORTED)
                                        (0152) export  USBFS_CB_d2h_std_ifc_03
                                        (0153) USBFS_CB_d2h_std_ifc_03:
                                        (0154) ENDIF
                                        (0155) IF (USB_CB_SRC_d2h_std_ifc_04 & USB_NOT_SUPPORTED)
                                        (0156) export  USBFS_CB_d2h_std_ifc_04
                                        (0157) USBFS_CB_d2h_std_ifc_04:
                                        (0158) ENDIF
                                        (0159) IF (USB_CB_SRC_d2h_std_ifc_05 & USB_NOT_SUPPORTED)
                                        (0160) export  USBFS_CB_d2h_std_ifc_05
                                        (0161) USBFS_CB_d2h_std_ifc_05:
                                        (0162) ENDIF
                                        (0163) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_NOT_SUPPORTED)
                                        (0164) export  USBFS_CB_d2h_std_ifc_06
                                        (0165) USBFS_CB_d2h_std_ifc_06:
                                        (0166) ENDIF
                                        (0167) IF (USB_CB_SRC_d2h_std_ifc_07 & USB_NOT_SUPPORTED)
                                        (0168) export  USBFS_CB_d2h_std_ifc_07
                                        (0169) USBFS_CB_d2h_std_ifc_07:
                                        (0170) ENDIF
                                        (0171) IF (USB_CB_SRC_d2h_std_ifc_08 & USB_NOT_SUPPORTED)
                                        (0172) export  USBFS_CB_d2h_std_ifc_08
                                        (0173) USBFS_CB_d2h_std_ifc_08:
                                        (0174) ENDIF
                                        (0175) IF (USB_CB_SRC_d2h_std_ifc_09 & USB_NOT_SUPPORTED)
                                        (0176) export  USBFS_CB_d2h_std_ifc_09
                                        (0177) USBFS_CB_d2h_std_ifc_09:
                                        (0178) ENDIF
                                        (0179) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_NOT_SUPPORTED)
                                        (0180) export  USBFS_CB_d2h_std_ifc_10
                                        (0181) USBFS_CB_d2h_std_ifc_10:
                                        (0182) ENDIF
                                        (0183) 
                                        (0184) ; h2d_std_ifc
                                        (0185) IF (USB_CB_SRC_h2d_std_ifc_00 & USB_NOT_SUPPORTED)
                                        (0186) export  USBFS_CB_h2d_std_ifc_00
                                        (0187) USBFS_CB_h2d_std_ifc_00:
                                        (0188) ENDIF
                                        (0189) IF (USB_CB_SRC_h2d_std_ifc_01 & USB_NOT_SUPPORTED)
                                        (0190) export  USBFS_CB_h2d_std_ifc_01
                                        (0191) USBFS_CB_h2d_std_ifc_01:
                                        (0192) ENDIF
                                        (0193) IF (USB_CB_SRC_h2d_std_ifc_02 & USB_NOT_SUPPORTED)
                                        (0194) export  USBFS_CB_h2d_std_ifc_02
                                        (0195) USBFS_CB_h2d_std_ifc_02:
                                        (0196) ENDIF
                                        (0197) IF (USB_CB_SRC_h2d_std_ifc_03 & USB_NOT_SUPPORTED)
                                        (0198) export  USBFS_CB_h2d_std_ifc_03
                                        (0199) USBFS_CB_h2d_std_ifc_03:
                                        (0200) ENDIF
                                        (0201) IF (USB_CB_SRC_h2d_std_ifc_04 & USB_NOT_SUPPORTED)
                                        (0202) export  USBFS_CB_h2d_std_ifc_04
                                        (0203) USBFS_CB_h2d_std_ifc_04:
                                        (0204) ENDIF
                                        (0205) IF (USB_CB_SRC_h2d_std_ifc_05 & USB_NOT_SUPPORTED)
                                        (0206) export  USBFS_CB_h2d_std_ifc_05
                                        (0207) USBFS_CB_h2d_std_ifc_05:
                                        (0208) ENDIF
                                        (0209) IF (USB_CB_SRC_h2d_std_ifc_06 & USB_NOT_SUPPORTED)
                                        (0210) export  USBFS_CB_h2d_std_ifc_06
                                        (0211) USBFS_CB_h2d_std_ifc_06:
                                        (0212) ENDIF
                                        (0213) IF (USB_CB_SRC_h2d_std_ifc_07 & USB_NOT_SUPPORTED)
                                        (0214) export  USBFS_CB_h2d_std_ifc_07
                                        (0215) USBFS_CB_h2d_std_ifc_07:
                                        (0216) ENDIF
                                        (0217) IF (USB_CB_SRC_h2d_std_ifc_08 & USB_NOT_SUPPORTED)
                                        (0218) export  USBFS_CB_h2d_std_ifc_08
                                        (0219) USBFS_CB_h2d_std_ifc_08:
                                        (0220) ENDIF
                                        (0221) IF (USB_CB_SRC_h2d_std_ifc_09 & USB_NOT_SUPPORTED)
                                        (0222) export  USBFS_CB_h2d_std_ifc_09
                                        (0223) USBFS_CB_h2d_std_ifc_09:
                                        (0224) ENDIF
                                        (0225) IF (USB_CB_SRC_h2d_std_ifc_10 & USB_NOT_SUPPORTED)
                                        (0226) export  USBFS_CB_h2d_std_ifc_10
                                        (0227) USBFS_CB_h2d_std_ifc_10:
                                        (0228) ENDIF
                                        (0229) IF (USB_CB_SRC_h2d_std_ifc_11 & USB_NOT_SUPPORTED)
                                        (0230) export  USBFS_CB_h2d_std_ifc_11
                                        (0231) USBFS_CB_h2d_std_ifc_11:
                                        (0232) ENDIF
                                        (0233) 
                                        (0234) ; d2h_std_ep
                                        (0235) IF (USB_CB_SRC_d2h_std_ep_00 & USB_NOT_SUPPORTED)
                                        (0236) export  USBFS_CB_d2h_std_ep_00
                                        (0237) USBFS_CB_d2h_std_ep_00:
                                        (0238) ENDIF
                                        (0239) IF (USB_CB_SRC_d2h_std_ep_01 & USB_NOT_SUPPORTED)
                                        (0240) export  USBFS_CB_d2h_std_ep_01
                                        (0241) USBFS_CB_d2h_std_ep_01:
                                        (0242) ENDIF
                                        (0243) IF (USB_CB_SRC_d2h_std_ep_02 & USB_NOT_SUPPORTED)
                                        (0244) export  USBFS_CB_d2h_std_ep_02
                                        (0245) USBFS_CB_d2h_std_ep_02:
                                        (0246) ENDIF
                                        (0247) IF (USB_CB_SRC_d2h_std_ep_03 & USB_NOT_SUPPORTED)
                                        (0248) export  USBFS_CB_d2h_std_ep_03
                                        (0249) USBFS_CB_d2h_std_ep_03:
                                        (0250) ENDIF
                                        (0251) IF (USB_CB_SRC_d2h_std_ep_04 & USB_NOT_SUPPORTED)
                                        (0252) export  USBFS_CB_d2h_std_ep_04
                                        (0253) USBFS_CB_d2h_std_ep_04:
                                        (0254) ENDIF
                                        (0255) IF (USB_CB_SRC_d2h_std_ep_05 & USB_NOT_SUPPORTED)
                                        (0256) export  USBFS_CB_d2h_std_ep_05
                                        (0257) USBFS_CB_d2h_std_ep_05:
                                        (0258) ENDIF
                                        (0259) IF (USB_CB_SRC_d2h_std_ep_06 & USB_NOT_SUPPORTED)
                                        (0260) export  USBFS_CB_d2h_std_ep_06
                                        (0261) USBFS_CB_d2h_std_ep_06:
                                        (0262) ENDIF
                                        (0263) IF (USB_CB_SRC_d2h_std_ep_07 & USB_NOT_SUPPORTED)
                                        (0264) export  USBFS_CB_d2h_std_ep_07
                                        (0265) USBFS_CB_d2h_std_ep_07:
                                        (0266) ENDIF
                                        (0267) IF (USB_CB_SRC_d2h_std_ep_08 & USB_NOT_SUPPORTED)
                                        (0268) export  USBFS_CB_d2h_std_ep_08
                                        (0269) USBFS_CB_d2h_std_ep_08:
                                        (0270) ENDIF
                                        (0271) IF (USB_CB_SRC_d2h_std_ep_09 & USB_NOT_SUPPORTED)
                                        (0272) export  USBFS_CB_d2h_std_ep_09
                                        (0273) USBFS_CB_d2h_std_ep_09:
                                        (0274) ENDIF
                                        (0275) IF (USB_CB_SRC_d2h_std_ep_10 & USB_NOT_SUPPORTED)
                                        (0276) export  USBFS_CB_d2h_std_ep_10
                                        (0277) USBFS_CB_d2h_std_ep_10:
                                        (0278) ENDIF
                                        (0279) IF (USB_CB_SRC_d2h_std_ep_11 & USB_NOT_SUPPORTED)
                                        (0280) export  USBFS_CB_d2h_std_ep_11
                                        (0281) USBFS_CB_d2h_std_ep_11:
                                        (0282) ENDIF
                                        (0283) IF (USB_CB_SRC_d2h_std_ep_12 & USB_NOT_SUPPORTED)
                                        (0284) export  USBFS_CB_d2h_std_ep_12
                                        (0285) USBFS_CB_d2h_std_ep_12:
                                        (0286) ENDIF
                                        (0287) 
                                        (0288) ; h2d_std_ep
                                        (0289) IF (USB_CB_SRC_h2d_std_ep_00 & USB_NOT_SUPPORTED)
                                        (0290) export  USBFS_CB_h2d_std_ep_00
                                        (0291) USBFS_CB_h2d_std_ep_00:
                                        (0292) ENDIF
                                        (0293) IF (USB_CB_SRC_h2d_std_ep_01 & USB_NOT_SUPPORTED)
                                        (0294) export  USBFS_CB_h2d_std_ep_01
                                        (0295) USBFS_CB_h2d_std_ep_01:
                                        (0296) ENDIF
                                        (0297) IF (USB_CB_SRC_h2d_std_ep_02 & USB_NOT_SUPPORTED)
                                        (0298) export  USBFS_CB_h2d_std_ep_02
                                        (0299) USBFS_CB_h2d_std_ep_02:
                                        (0300) ENDIF
                                        (0301) IF (USB_CB_SRC_h2d_std_ep_03 & USB_NOT_SUPPORTED)
                                        (0302) export  USBFS_CB_h2d_std_ep_03
                                        (0303) USBFS_CB_h2d_std_ep_03:
                                        (0304) ENDIF
                                        (0305) 
                                        (0306) export  USBFS_Not_Supported
                                        (0307) export _USBFS_Not_Supported
                                        (0308)  USBFS_Not_Supported:
                                        (0309) _USBFS_Not_Supported:
07C3: 50 00    MOV   A,0x0              (0310)    mov    A, 0                         ; Count 0
07C5: 57 03    MOV   X,0x3              (0311)    mov    X, USB_MODE_STALL_IN_OUT     ; Stall the request
07C7: 7D 0A E7 LJMP  USBFS_EP0_UPD_MODE_EXIT(0312)    ljmp   USBFS_EP0_UPD_MODE_EXIT
                                        (0313) ;-----------------------------------------------------------------------------
                                        (0314) ;  FUNCTION NAME: USBFS_CB_d2h_std_dev_00
                                        (0315) ;
                                        (0316) ;  DESCRIPTION:   Get Device Status
                                        (0317) ;
                                        (0318) ;****************************************************************
                                        (0319) ; STANDARD DEVICE IN REQUEST: Get_Device_Status
                                        (0320) ;****************************************************************
                                        (0321) ;
                                        (0322) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0323) ; bRequest       : GET_STATUS                     = 00h
                                        (0324) ; wValue         : RESERVED                       = 0000h
                                        (0325) ; wIndex         : RESERVED                       = 0000h
                                        (0326) ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h
                                        (0327) ;
                                        (0328) ; The GET_DEVICE_STATUS request returns the current device status.
                                        (0329) ;
                                        (0330) ;****************************************************************
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;
                                        (0333) ;  ARGUMENTS:
                                        (0334) ;
                                        (0335) ;  RETURNS:
                                        (0336) ;
                                        (0337) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) .LITERAL
                                        (0343) GetStatusTransferDescrTable:
                                        (0344)     TD_START_TABLE 1                   ; One entry
                                        (0345)     TD_ENTRY    USB_DS_RAM, 2, USBFS_TransferBuffer, NULL_PTR    ; Intermediate Buffer
                                        (0346) .ENDLITERAL
                                        (0347) IF (USB_CB_SRC_d2h_std_dev_00 & USB_UM_SUPPLIED)
                                        (0348) export  USBFS_CB_d2h_std_dev_00
                                        (0349) USBFS_CB_d2h_std_dev_00:
07D3: 55 20 00 MOV   [0x20],0x0         (0350)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
                                        (0351) 
07D6: 55 0E 00 MOV   [0xE],0x0          (0352)     mov     [USBFS_TransferBuffer+1], 0    ; Use the UM Transfer Buffer
07D9: 5F 0D 02 MOV   [0xD],[0x2]        (0353)     mov     [USBFS_TransferBuffer], [USBFS_DeviceStatus]
                                        (0354) 
07DC: 50 07    MOV   A,0x7              (0355)     mov     A, >GetStatusTransferDescrTable    ; Get the ROM Address MSB
07DE: 57 CA    MOV   X,0xCA             (0356)     mov     X, <GetStatusTransferDescrTable    ; Get the ROM Address LSB
07E0: 80 E9    JMP   0x08CA             (0357)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0358) ELSE
                                        (0359) IF (USB_CB_SRC_d2h_std_dev_00 & USB_APP_SUPPLIED)
                                        (0360) export  USBFS_CB_d2h_std_dev_00
                                        (0361) USBFS_CB_d2h_std_dev_00:
                                        (0362)     ljmp    APP_USBFS_CB_d2h_std_dev_00
                                        (0363) ENDIF
                                        (0364) ENDIF
                                        (0365) 
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;  USB 2nd Tier Dispactch Jump Tables for Standard Requests (based on bRequest)
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;  FUNCTION NAME: ;  USB 2nd Tier Dispactch Jump Table
                                        (0370) ;
                                        (0371) ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
                                        (0372) ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
                                        (0373) ;
                                        (0374) ;-----------------------------------------------------------------------------
                                        (0375) ;
                                        (0376) ;  ARGUMENTS:
                                        (0377) ;
                                        (0378) ;  RETURNS:
                                        (0379) ;
                                        (0380) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0381) ;
                                        (0382) ;  THEORY of OPERATION or PROCEDURE:
                                        (0383) ;
                                        (0384) ;-----------------------------------------------------------------------------
                                        (0385) USBFS_DT_d2h_std_dev:
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) 
07E2: 8F F0    JMP   USBFS_CB_d2h_std_dev_00(0388)     jmp     USBFS_CB_d2h_std_dev_00
07E4: 8F DE    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0389)     jmp     USBFS_CB_d2h_std_dev_01
07E6: 8F DC    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0390)     jmp     USBFS_CB_d2h_std_dev_02
07E8: 8F DA    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0391)     jmp     USBFS_CB_d2h_std_dev_03
07EA: 8F D8    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0392)     jmp     USBFS_CB_d2h_std_dev_04
07EC: 8F D6    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0393)     jmp     USBFS_CB_d2h_std_dev_05
07EE: 80 E1    JMP   USBFS_CB_d2h_std_dev_06(0394)     jmp     USBFS_CB_d2h_std_dev_06
07F0: 8F D2    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0395)     jmp     USBFS_CB_d2h_std_dev_07
07F2: 81 3B    JMP   USBFS_CB_d2h_std_dev_08(0396)     jmp     USBFS_CB_d2h_std_dev_08
                                        (0397) 
                                        (0398) USBFS_DT_d2h_std_dev_End:
                                        (0399) USBFS_DT_d2h_std_dev_Size: equ (USBFS_DT_d2h_std_dev_End-USBFS_DT_d2h_std_dev) / 2
                                        (0400) USBFS_DT_d2h_std_dev_Dispatch::
07F4: 5D 59    MOV   A,REG[0x59]        (0401)     mov     A, reg[USBFS_EP0DATA + bRequest]
07F6: 39 09    CMP   A,0x9              
07F8: D0 04    JNC   0x07FD             
07FA: 64       ASL   A                  
07FB: EF E6    JACC  0x07E2             
07FD: 8F C5    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0402)     DISPATCHER USBFS_DT_d2h_std_dev, USBFS_DT_d2h_std_dev_Size, USBFS_Not_Supported
                                        (0403) 
                                        (0404) ;-----------------------------------------------------------------------------
                                        (0405) USBFS_DT_h2d_std_dev:
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) 
07FF: 8F C3    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0408)     jmp     USBFS_CB_h2d_std_dev_00
0801: 81 35    JMP   USBFS_CB_h2d_std_dev_01(0409)     jmp     USBFS_CB_h2d_std_dev_01
0803: 8F BF    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0410)     jmp     USBFS_CB_h2d_std_dev_02
0805: 81 3C    JMP   USBFS_CB_h2d_std_dev_03(0411)     jmp     USBFS_CB_h2d_std_dev_03
0807: 8F BB    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0412)     jmp     USBFS_CB_h2d_std_dev_04
0809: 81 4D    JMP   USBFS_CB_h2d_std_dev_05(0413)     jmp     USBFS_CB_h2d_std_dev_05
080B: 8F B7    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0414)     jmp     USBFS_CB_h2d_std_dev_06
080D: 8F B5    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0415)     jmp     USBFS_CB_h2d_std_dev_07
080F: 8F B3    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0416)     jmp     USBFS_CB_h2d_std_dev_08
0811: 81 4E    JMP   USBFS_CB_h2d_std_dev_09(0417)     jmp     USBFS_CB_h2d_std_dev_09
                                        (0418) 
                                        (0419) USBFS_DT_h2d_std_dev_End:
                                        (0420) USBFS_DT_h2d_std_dev_Size: equ (USBFS_DT_h2d_std_dev_End-USBFS_DT_h2d_std_dev) / 2
                                        (0421) USBFS_DT_h2d_std_dev_Dispatch::
                                        (0422) 
0813: 5D 59    MOV   A,REG[0x59]        (0423)     mov     A, reg[USBFS_EP0DATA + bRequest]
0815: 39 0A    CMP   A,0xA              
0817: D0 04    JNC   0x081C             
0819: 64       ASL   A                  
081A: EF E4    JACC  0x07FF             
081C: 8F A6    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0424)     DISPATCHER USBFS_DT_h2d_std_dev, USBFS_DT_h2d_std_dev_Size, USBFS_Not_Supported
                                        (0425) 
                                        (0426) 
                                        (0427) ;-----------------------------------------------------------------------------
                                        (0428) USBFS_DT_d2h_std_ifc:
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) 
081E: 81 9B    JMP   USBFS_CB_d2h_std_ifc_00(0431)     jmp     USBFS_CB_d2h_std_ifc_00
0820: 8F A2    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0432)     jmp     USBFS_CB_d2h_std_ifc_01
0822: 8F A0    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0433)     jmp     USBFS_CB_d2h_std_ifc_02
0824: 8F 9E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0434)     jmp     USBFS_CB_d2h_std_ifc_03
0826: 8F 9C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0435)     jmp     USBFS_CB_d2h_std_ifc_04
0828: 8F 9A    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0436)     jmp     USBFS_CB_d2h_std_ifc_05
082A: 85 93    JMP   USBFS_CB_d2h_std_ifc_06(0437)     jmp     USBFS_CB_d2h_std_ifc_06
082C: 8F 96    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0438)     jmp     USBFS_CB_d2h_std_ifc_07
082E: 8F 94    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0439)     jmp     USBFS_CB_d2h_std_ifc_08
0830: 8F 92    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0440)     jmp     USBFS_CB_d2h_std_ifc_09
0832: 81 9F    JMP   USBFS_CB_d2h_std_ifc_10(0441)     jmp     USBFS_CB_d2h_std_ifc_10
                                        (0442) 
                                        (0443) USBFS_DT_d2h_std_ifc_End:
                                        (0444) USBFS_DT_d2h_std_ifc_Size: equ (USBFS_DT_d2h_std_ifc_End-USBFS_DT_d2h_std_ifc) / 2
                                        (0445) USBFS_DT_d2h_std_ifc_Dispatch::
0834: 3C 01 00 CMP   [0x1],0x0          (0446)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
0837: B0 03    JNZ   0x083B             (0447)     jnz     .configured                ; Jump on configured
0839: 8F 89    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0448)     jmp     _USBFS_Not_Supported       ; Stall the request if not configured
                                        (0449) ; Jump here if the device is configured
                                        (0450) .configured:
083B: 5D 59    MOV   A,REG[0x59]        (0451)     mov     A, reg[USBFS_EP0DATA + bRequest]
083D: 39 0B    CMP   A,0xB              
083F: D0 04    JNC   0x0844             
0841: 64       ASL   A                  
0842: EF DB    JACC  0x081E             
0844: 8F 7E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0452)     DISPATCHER USBFS_DT_d2h_std_ifc, USBFS_DT_d2h_std_ifc_Size, USBFS_Not_Supported
                                        (0453) 
                                        (0454) ;-----------------------------------------------------------------------------
                                        (0455) USBFS_DT_h2d_std_ifc:
                                        (0456) ;-----------------------------------------------------------------------------
                                        (0457) 
0846: 8F 7C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0458)     jmp     USBFS_CB_h2d_std_ifc_00
0848: 8F 7A    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0459)     jmp     USBFS_CB_h2d_std_ifc_01
084A: 8F 78    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0460)     jmp     USBFS_CB_h2d_std_ifc_02
084C: 8F 76    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0461)     jmp     USBFS_CB_h2d_std_ifc_03
084E: 8F 74    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0462)     jmp     USBFS_CB_h2d_std_ifc_04
0850: 8F 72    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0463)     jmp     USBFS_CB_h2d_std_ifc_05
0852: 8F 70    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0464)     jmp     USBFS_CB_h2d_std_ifc_06
0854: 8F 6E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0465)     jmp     USBFS_CB_h2d_std_ifc_07
0856: 8F 6C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0466)     jmp     USBFS_CB_h2d_std_ifc_08
0858: 8F 6A    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0467)     jmp     USBFS_CB_h2d_std_ifc_09
085A: 8F 68    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0468)     jmp     USBFS_CB_h2d_std_ifc_10
085C: 8F 66    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0469)     jmp     USBFS_CB_h2d_std_ifc_11
                                        (0470) 
                                        (0471) USBFS_DT_h2d_std_ifc_End:
                                        (0472) USBFS_DT_h2d_std_ifc_Size: equ (USBFS_DT_h2d_std_ifc_End-USBFS_DT_h2d_std_ifc) / 2
                                        (0473) USBFS_DT_h2d_std_ifc_Dispatch::
085E: 3C 01 00 CMP   [0x1],0x0          (0474)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
0861: B0 03    JNZ   0x0865             (0475)     jnz     .configured                ; Jump on configured
0863: 8F 5F    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0476)     jmp     _USBFS_Not_Supported       ; Stall the request if not configured
                                        (0477) ; Jump here if the device is configured
                                        (0478) .configured:
0865: 5D 59    MOV   A,REG[0x59]        (0479)     mov     A, reg[USBFS_EP0DATA + bRequest]
0867: 39 0C    CMP   A,0xC              
0869: D0 04    JNC   0x086E             
086B: 64       ASL   A                  
086C: EF D9    JACC  0x0846             
086E: 8F 54    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0480) 
                                        (0481)    ;---------------------------------------------------
                                        (0482)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0483)    ;---------------------------------------------------
                                        (0484)    ; Add your custom Interface change logic below
                                        (0485)    ;---------------------------------------------------
                                        (0486) 
                                        (0487)    ;---------------------------------------------------
                                        (0488)    ; Insert your custom code above this banner
                                        (0489)    ;---------------------------------------------------
                                        (0490)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0491) 
                                        (0492)     DISPATCHER USBFS_DT_h2d_std_ifc, USBFS_DT_h2d_std_ifc_Size, USBFS_Not_Supported
                                        (0493) 
                                        (0494) ;-----------------------------------------------------------------------------
                                        (0495) USBFS_DT_d2h_std_ep:
                                        (0496) ;-----------------------------------------------------------------------------
0870: 81 75    JMP   USBFS_CB_d2h_std_ep_00(0497)     jmp     USBFS_CB_d2h_std_ep_00
0872: 8F 50    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0498)     jmp     USBFS_CB_d2h_std_ep_01
0874: 8F 4E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0499)     jmp     USBFS_CB_d2h_std_ep_02
0876: 8F 4C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0500)     jmp     USBFS_CB_d2h_std_ep_03
0878: 8F 4A    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0501)     jmp     USBFS_CB_d2h_std_ep_04
087A: 8F 48    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0502)     jmp     USBFS_CB_d2h_std_ep_05
087C: 8F 46    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0503)     jmp     USBFS_CB_d2h_std_ep_06
087E: 8F 44    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0504)     jmp     USBFS_CB_d2h_std_ep_07
0880: 8F 42    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0505)     jmp     USBFS_CB_d2h_std_ep_08
0882: 8F 40    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0506)     jmp     USBFS_CB_d2h_std_ep_09
0884: 8F 3E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0507)     jmp     USBFS_CB_d2h_std_ep_10
0886: 8F 3C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0508)     jmp     USBFS_CB_d2h_std_ep_11
0888: 8F 3A    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0509)     jmp     USBFS_CB_d2h_std_ep_12
                                        (0510) 
                                        (0511) USBFS_DT_d2h_std_ep_End:
                                        (0512) USBFS_DT_d2h_std_ep_Size: equ (USBFS_DT_d2h_std_ep_End-USBFS_DT_d2h_std_ep) / 2
                                        (0513) USBFS_DT_d2h_std_ep_Dispatch::
088A: 3C 01 00 CMP   [0x1],0x0          (0514)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
088D: B0 0D    JNZ   0x089B             (0515)     jnz     .configured                ; Jump on configured
                                        (0516) 
088F: 5D 5D    MOV   A,REG[0x5D]        (0517)     mov     A, reg[USBFS_EP0DATA + wIndexHi]   ; Is the request for EP0?
0891: 53 20    MOV   [0x20],A           (0518)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
0893: 5D 5C    MOV   A,REG[0x5C]        (0519)     mov     A, reg[USBFS_EP0DATA + wIndexLo]   ;
0895: 2C 20    OR    [0x20],A           (0520)     or      [USBFS_t2], A              ; Use the UM temp var--Selector
0897: A0 03    JZ    0x089B             (0521)     jz      .ep0_request
                                        (0522) 
0899: 8F 29    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0523)     jmp    _USBFS_Not_Supported        ; Stall the request if not configured
                                        (0524) ; Jump here if the device is configured or EP0 request
                                        (0525) .configured:
                                        (0526) .ep0_request:
089B: 5D 59    MOV   A,REG[0x59]        (0527)     mov     A, reg[USBFS_EP0DATA + bRequest]
089D: 39 0D    CMP   A,0xD              
089F: D0 04    JNC   0x08A4             
08A1: 64       ASL   A                  
08A2: EF CD    JACC  0x0870             
08A4: 8F 1E    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0528)     DISPATCHER USBFS_DT_d2h_std_ep, USBFS_DT_d2h_std_ep_Size, USBFS_Not_Supported
                                        (0529) 
                                        (0530) 
                                        (0531) ;-----------------------------------------------------------------------------
                                        (0532) USBFS_DT_h2d_std_ep:
                                        (0533) ;-----------------------------------------------------------------------------
08A6: 8F 1C    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0534)     jmp     USBFS_CB_h2d_std_ep_00
08A8: 81 56    JMP   USBFS_CB_h2d_std_ep_01(0535)     jmp     USBFS_CB_h2d_std_ep_01
08AA: 8F 18    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0536)     jmp     USBFS_CB_h2d_std_ep_02
08AC: 81 8F    JMP   USBFS_CB_h2d_std_ep_03(0537)     jmp     USBFS_CB_h2d_std_ep_03
                                        (0538) 
                                        (0539) USBFS_DT_h2d_std_ep_End:
                                        (0540) USBFS_DT_h2d_std_ep_Size: equ (USBFS_DT_h2d_std_ep_End-USBFS_DT_h2d_std_ep) / 2
                                        (0541) USBFS_DT_h2d_std_ep_Dispatch::
08AE: 3C 01 00 CMP   [0x1],0x0          (0542)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
08B1: B0 0D    JNZ   0x08BF             (0543)     jnz     .configured                ; Jump on configured
                                        (0544) 
08B3: 5D 5D    MOV   A,REG[0x5D]        (0545)     mov     A, reg[USBFS_EP0DATA + wIndexHi]   ; Is the request for EP0?
08B5: 53 20    MOV   [0x20],A           (0546)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
08B7: 5D 5C    MOV   A,REG[0x5C]        (0547)     mov     A, reg[USBFS_EP0DATA + wIndexLo]   ;
08B9: 2C 20    OR    [0x20],A           (0548)     or      [USBFS_t2], A              ; Use the UM temp var--Selector
08BB: A0 03    JZ    0x08BF             (0549)     jz      .ep0_request
                                        (0550) 
08BD: 8F 05    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0551)     jmp    _USBFS_Not_Supported        ; Stall the request if not configured
                                        (0552) ; Jump here if the device is configured or EP0 request
                                        (0553) .configured:
                                        (0554) .ep0_request:
08BF: 5D 59    MOV   A,REG[0x59]        (0555)     mov     A, reg[USBFS_EP0DATA + bRequest]
08C1: 39 04    CMP   A,0x4              
08C3: D0 04    JNC   0x08C8             
08C5: 64       ASL   A                  
08C6: EF DF    JACC  0x08A6             
08C8: 8E FA    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...
                                        (0556)     DISPATCHER USBFS_DT_h2d_std_ep, USBFS_DT_h2d_std_ep_Size, USBFS_Not_Supported
                                        (0557) 
                                        (0558) USBFS_GetTableEntry_Local_Std:
08CA: 7D 0C AD LJMP  USBFS_GetTableEntry(0559)     ljmp    USBFS_GetTableEntry
                                        (0560) 
                                        (0561) USBFS_NoDataStageControlTransfer_Local_Std:
08CD: 7D 0B 9A LJMP  _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer|USBFS_InitNoDataStageControlTransfer(0562)     ljmp    USBFS_NoDataStageControlTransfer
                                        (0563) 
                                        (0564) ;-----------------------------------------------
                                        (0565) ; Add custom application code for routines
                                        (0566) ; redefined by USB_APP_SUPPLIED in USB_HID.inc
                                        (0567) ;-----------------------------------------------
                                        (0568) 
                                        (0569)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0570)    ;---------------------------------------------------
                                        (0571)    ; Insert your custom code below this banner
                                        (0572)    ;---------------------------------------------------
                                        (0573) 
                                        (0574)    ;---------------------------------------------------
                                        (0575)    ; Insert your custom code above this banner
                                        (0576)    ;---------------------------------------------------
                                        (0577)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0578) 
                                        (0579) ;-----------------------------------------------------------------------------
                                        (0580) ; FUNCTION NAME: USBFS_CB_d2h_std_dev_06
                                        (0581) ;
                                        (0582) ; DESCRIPTION:   Get Device Descriptor
                                        (0583) ;
                                        (0584) ;****************************************************************
                                        (0585) ; STANDARD DEVICE IN REQUEST: Get_Device_Descriptor
                                        (0586) ;****************************************************************
                                        (0587) ;
                                        (0588) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0589) ; bRequest       : GET_DESCRIPTOR                 = 06h
                                        (0590) ; wValue         : DESCRIPTOR TYPE | index        = xxxxh
                                        (0591) ; wIndex         : ZERO or LANG_ID                = xxxxh
                                        (0592) ; wLength        : SIZEOF_DESCRIPTOR              = --xxh
                                        (0593) ;
                                        (0594) ; The GET_DEVICE_DESCRIPTOR returns the specified descriptor if
                                        (0595) ; the descriptor exists.
                                        (0596) ;
                                        (0597) ; The upper byte of wValue contains the descriptor type and
                                        (0598) ; the lower byte contains the descriptor index. wIndex
                                        (0599) ; contains either 0000h or the Language ID. wLength contains
                                        (0600) ; the descriptor length. The actual descriptor information is
                                        (0601) ; transferred in subsequent data packets.
                                        (0602) ;
                                        (0603) ;****************************************************************
                                        (0604) ;
                                        (0605) ;-----------------------------------------------------------------------------
                                        (0606) ;
                                        (0607) ;  ARGUMENTS:
                                        (0608) ;
                                        (0609) ;  RETURNS:
                                        (0610) ;
                                        (0611) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0612) ;
                                        (0613) ;  THEORY of OPERATION or PROCEDURE:
                                        (0614) ;
                                        (0615) ;-----------------------------------------------------------------------------
                                        (0616) IF (USB_CB_SRC_d2h_std_dev_06 & USB_UM_SUPPLIED)
                                        (0617) export  USBFS_CB_d2h_std_dev_06
                                        (0618) USBFS_CB_d2h_std_dev_06:
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ; Dispatch to the proper handler
                                        (0621) ;-----------------------------------------------------------------------------
08D0: 5D 5B    MOV   A,REG[0x5B]        (0622)     mov     A, reg[USBFS_EP0DATA+wValueHi]   ; Get the descrptor type
08D2: 64       ASL   A                  (0623)     asl     A                          ; Make it into a offset
08D3: 39 08    CMP   A,0x8              (0624)     cmp     A, GET_DESCR_DISPATCH_SIZE           ; Validity check
08D5: DE ED    JNC   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0625)     jnc     USBFS_Not_Supported
                                        (0626) 
08D7: E0 01    JACC  0x08D9             (0627)     jacc    GET_DESCR_DISPATCH
                                        (0628) 
                                        (0629) GET_DESCR_DISPATCH:
08D9: 8E E9    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0630)     jmp     USBFS_Not_Supported        ; Invalid
08DB: 80 28    JMP   0x0904             (0631)     jmp     USBFS_SendDeviceDescr      ; Device Descriptor
08DD: 80 03    JMP   0x08E1             (0632)     jmp     USBFS_SendConfigDescr      ; Configuration Descriptor
                                        (0633) IF  USBFS_bNumStringDescrs             ; Number of String Descriptor defined with the Wizard
08DF: 80 34    JMP   0x0914             (0634)     jmp     USBFS_SendStringDescr      ; String Descriptor
                                        (0635) ELSE
                                        (0636)     jmp     USBFS_Not_Supported        ; Not supported if we don't have
                                        (0637)                                               ; any String Descriptor
                                        (0638) ENDIF
                                        (0639) 
                                        (0640) GET_DESCR_DISPATCH_END:
                                        (0641) GET_DESCR_DISPATCH_SIZE: EQU (GET_DESCR_DISPATCH_END - GET_DESCR_DISPATCH)
                                        (0642) ;-----------------------------------------------------------------------------
                                        (0643) ; Configuration Descriptor Handler
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) USBFS_SendConfigDescr:
08E1: 94 0F    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0646)     call    USBFS_GET_DEVICE_TABLE_ENTRY
08E3: 4B       SWAP  A,X                (0647)     swap    A, X
08E4: 01 02    ADD   A,0x2              (0648)     add     A, 2                       ; We want the pointer to the descriptor table (second entry)
08E6: 4B       SWAP  A,X                (0649)     swap    A, X
08E7: 09 00    ADC   A,0x0              (0650)     adc     A, 0                       ; Don't forget the carry
08E9: 55 20 21 MOV   [0x20],0x21        (0651)     mov     [USBFS_t2], USBFS_t1       ; Set up the destination
08EC: 93 F3    CALL  USBFS_GETWORD      (0652)     call    USBFS_GETWORD              ; Get the pointer
                                        (0653) 
08EE: 51 21    MOV   A,[0x21]           (0654)     mov     A, [USBFS_t1]              ; Pointer MSB
08F0: 58 22    MOV   X,[0x22]           (0655)     mov     X, [USBFS_t1+1]            ; Pointer LSB
                                        (0656) 
08F2: 08       PUSH  A                  (0657)     push    A                          ; Save the MSB
                                        (0658) 
08F3: 5D 5A    MOV   A,REG[0x5A]        (0659)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the descrptor index
08F5: 53 20    MOV   [0x20],A           (0660)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
08F7: 18       POP   A                  (0661)     pop     A                          ; Need the MSB for the range check
08F8: 08       PUSH  A                  (0662)     push    A                          ; Save the MSB for after the range check
08F9: 28       ROMX                     (0663)     romx                               ; First entry is the table size (only a byte)
08FA: 3A 20    CMP   A,[0x20]           (0664)     cmp     A, [USBFS_t2]              ; Range check
08FC: D0 04    JNC   0x0901             (0665)     jnc     .range_ok
                                        (0666) 
08FE: 18       POP   A                  (0667)     pop     A                          ; Fix the stack
08FF: 8E C3    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0668)     jmp     USBFS_Not_Supported
                                        (0669) 
                                        (0670) .range_ok:
0901: 18       POP   A                  (0671)     pop     A                          ; Get the MSB back
0902: 8F C7    JMP   0x08CA             (0672)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0673) ;-----------------------------------------------------------------------------
                                        (0674) ; Device Descriptor Handler
                                        (0675) ;-----------------------------------------------------------------------------
                                        (0676) USBFS_SendDeviceDescr:
0904: 5F 20 00 MOV   [0x20],[0x0]       (0677)     mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector
0907: 50 02    MOV   A,0x2              (0678)     mov     A, >USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address MSB
0909: 57 93    MOV   X,0x93             (0679)     mov     X, <USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address LSB
090B: 28       ROMX                     (0680)     romx                               ; First entry is the table size (only a byte)
090C: 3A 20    CMP   A,[0x20]           (0681)     cmp     A, [USBFS_t2]              ; Range check
090E: CE B4    JC    USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0682)     jc      USBFS_Not_Supported
                                        (0683) 
0910: 50 02    MOV   A,0x2              (0684)     mov     A, >USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address MSB
                                        (0685) 
0912: 8F B7    JMP   0x08CA             (0686)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0687) ;-----------------------------------------------------------------------------
                                        (0688) ; String Descriptor Handler
                                        (0689) ;-----------------------------------------------------------------------------
                                        (0690) IF  USBFS_bNumStringDescrs    ; Not needed if we don't have any String Descriptors
                                        (0691) USBFS_SendStringDescr:
0914: 5D 5A    MOV   A,REG[0x5A]        (0692)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the descrptor index
0916: 53 20    MOV   [0x20],A           (0693)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
                                        (0694) 
0918: 50 03    MOV   A,0x3              (0695)     mov     A, >USBFS_StringTable      ; Get the ROM Address MSB
091A: 57 A6    MOV   X,0xA6             (0696)     mov     X, <USBFS_StringTable      ; Get the ROM Address LSB
091C: 28       ROMX                     (0697)     romx                               ; First entry is the table size (only a byte)
091D: 3A 20    CMP   A,[0x20]           (0698)     cmp     A, [USBFS_t2]              ; Range check
091F: CE A3    JC    USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0699)     jc      USBFS_Not_Supported
                                        (0700) 
0921: 50 03    MOV   A,0x3              (0701)     mov     A, >USBFS_StringTable      ; Get the ROM Address MSB
                                        (0702) 
0923: 8F A6    JMP   0x08CA             (0703)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0704) ENDIF
                                        (0705) ELSE
                                        (0706) IF (USB_CB_SRC_d2h_std_dev_06 & USB_APP_SUPPLIED)
                                        (0707) export  USBFS_CB_d2h_std_dev_06
                                        (0708) USBFS_CB_d2h_std_dev_06:
                                        (0709)     ljmp    APP_USBFS_CB_d2h_std_dev_06
                                        (0710) ENDIF
                                        (0711) ENDIF
                                        (0712) ;-----------------------------------------------------------------------------
                                        (0713) ;  FUNCTION NAME: USBFS_CB_d2h_std_dev_08
                                        (0714) ;
                                        (0715) ;  DESCRIPTION:   Get Device Configuration
                                        (0716) ;
                                        (0717) ;****************************************************************
                                        (0718) ; STANDARD DEVICE IN REQUEST: Get_Device_Configuration
                                        (0719) ;****************************************************************
                                        (0720) ;
                                        (0721) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0722) ; bRequest       : GET_CONFIGURATION              = 08h
                                        (0723) ; wValue         : RESERVED                       = 0000h
                                        (0724) ; wIndex         : RESERVED                       = 0000h
                                        (0725) ; wLength        : SIZEOF_DEVICE_CONFIGURATION    = 0001h
                                        (0726) ;
                                        (0727) ; The GET_DEVICE_CONFIGURATION request returns the currently
                                        (0728) ; selected device configuration number.
                                        (0729) ;
                                        (0730) ; request_value and request_index contain 0000h. request_length
                                        (0731) ; contains 0001h and the one-byte configuration number is returned
                                        (0732) ; in a separate data transfer.
                                        (0733) ;
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;
                                        (0738) ;  RETURNS:
                                        (0739) ;
                                        (0740) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0741) ;
                                        (0742) ;  THEORY of OPERATION or PROCEDURE:
                                        (0743) ;
                                        (0744) ;-----------------------------------------------------------------------------
                                        (0745) IF (USB_CB_SRC_d2h_std_dev_08 & USB_UM_SUPPLIED)
                                        (0746) .LITERAL
                                        (0747) GetConfigTransferDescrTable:
                                        (0748)     TD_START_TABLE  1                  ; One entry
                                        (0749)     TD_ENTRY    USB_DS_RAM, 1, USBFS_Configuration, NULL_PTR    ; Current configuration
                                        (0750) .ENDLITERAL
                                        (0751) export  USBFS_CB_d2h_std_dev_08
                                        (0752) USBFS_CB_d2h_std_dev_08:
092E: 55 20 00 MOV   [0x20],0x0         (0753)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
0931: 50 09    MOV   A,0x9              (0754)     mov     A, >GetConfigTransferDescrTable    ; Get the ROM Address MSB
0933: 57 25    MOV   X,0x25             (0755)     mov     X, <GetConfigTransferDescrTable    ; Get the ROM Address LSB
0935: 8F 94    JMP   0x08CA             (0756)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0757) ELSE
                                        (0758) IF (USB_CB_SRC_d2h_std_dev_08 & USB_APP_SUPPLIED)
                                        (0759) export  USBFS_CB_d2h_std_dev_08
                                        (0760) USBFS_CB_d2h_std_dev_08:
                                        (0761)     ljmp    APP_USBFS_CB_d2h_std_dev_08
                                        (0762) ENDIF
                                        (0763) ENDIF
                                        (0764) ;-----------------------------------------------------------------------------
                                        (0765) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_01
                                        (0766) ;
                                        (0767) ;  DESCRIPTION:   Clear Device Feature
                                        (0768) ;
                                        (0769) ;****************************************************************
                                        (0770) ; STANDARD DEVICE OUT REQUEST: Clear_Device_Feature
                                        (0771) ;****************************************************************
                                        (0772) ;
                                        (0773) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0774) ; bRequest       : CLEAR_FEATURE                  = 01h
                                        (0775) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (0776) ; wIndex         : RESERVED                       = 0000h
                                        (0777) ; wLength        : RESERVED                       = 0000h
                                        (0778) ;
                                        (0779) ; The CLEAR_DEVICE_FEATURE request disables a particular feature
                                        (0780) ; for a device. The only feature supported for a device is the
                                        (0781) ; REMOTE_WAKEUP feature.
                                        (0782) ;
                                        (0783) ;****************************************************************
                                        (0784) ;-----------------------------------------------------------------------------
                                        (0785) ;
                                        (0786) ;  ARGUMENTS:
                                        (0787) ;
                                        (0788) ;  RETURNS:
                                        (0789) ;
                                        (0790) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0791) ;
                                        (0792) ;  THEORY of OPERATION or PROCEDURE:
                                        (0793) ;
                                        (0794) ;-----------------------------------------------------------------------------
                                        (0795) IF (USB_CB_SRC_h2d_std_dev_01 & USB_UM_SUPPLIED)
                                        (0796) export  USBFS_CB_h2d_std_dev_01
                                        (0797) USBFS_CB_h2d_std_dev_01:
0937: 5D 5A    MOV   A,REG[0x5A]        (0798)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the Feature Selector
                                        (0799)                                        ; Check against valid features
                                        (0800)                                        ;  for device receipient
0939: 39 01    CMP   A,0x1              (0801)     cmp     A, USB_DEVICE_REMOTE_WAKEUP    ; Only remote wakeup is defined for clear
093B: BE 87    JNZ   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0802)     jnz     USBFS_Not_Supported        ;
093D: 26 02 FD AND   [0x2],0xFD         (0803)     and     [USBFS_DeviceStatus], ~USB_DEVICE_STATUS_REMOTE_WAKEUP
0940: 8F 8C    JMP   0x08CD             (0804)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0805) ELSE
                                        (0806) IF (USB_CB_SRC_h2d_std_dev_01 & USB_APP_SUPPLIED)
                                        (0807) export  USBFS_CB_h2d_std_dev_01
                                        (0808) USBFS_CB_h2d_std_dev_01:
                                        (0809)     ljmp    APP_USBFS_CB_h2d_std_dev_01
                                        (0810) ENDIF
                                        (0811) ENDIF
                                        (0812) ;-----------------------------------------------------------------------------
                                        (0813) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_03
                                        (0814) ;
                                        (0815) ;  DESCRIPTION:   Set Device Featue
                                        (0816) ;
                                        (0817) ;****************************************************************
                                        (0818) ; STANDARD DEVICE OUT REQUEST: Set_Device_Feature
                                        (0819) ;****************************************************************
                                        (0820) ;
                                        (0821) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0822) ; bRequest       : SET_FEATURE                    = 03h
                                        (0823) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (0824) ; wIndex         : RESERVED                       = 0000h
                                        (0825) ; wLength        : RESERVED                       = 0000h
                                        (0826) ;
                                        (0827) ; The SET_DEVICE_FEATURE request enables a particular feature
                                        (0828) ; on a device. The only feature supported for a device is the
                                        (0829) ; REMOTE_WAKEUP feature.
                                        (0830) ;
                                        (0831) ;****************************************************************
                                        (0832) ;-----------------------------------------------------------------------------
                                        (0833) ;
                                        (0834) ;  ARGUMENTS:
                                        (0835) ;
                                        (0836) ;  RETURNS:
                                        (0837) ;
                                        (0838) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0839) ;
                                        (0840) ;  THEORY of OPERATION or PROCEDURE:
                                        (0841) ;
                                        (0842) ;-----------------------------------------------------------------------------
                                        (0843) IF (USB_CB_SRC_h2d_std_dev_03 & USB_UM_SUPPLIED)
                                        (0844) export  USBFS_CB_h2d_std_dev_03
                                        (0845) USBFS_CB_h2d_std_dev_03:
0942: 5D 5A    MOV   A,REG[0x5A]        (0846)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the Feature Selector
                                        (0847)                                        ; Check against valid features
                                        (0848)                                        ;  for device receipient
0944: 39 01    CMP   A,0x1              (0849)     cmp     A, USB_DEVICE_REMOTE_WAKEUP    ; Remote wakeup?
0946: A0 07    JZ    0x094E             (0850)     jz      .remote_wakeup
                                        (0851) 
0948: 39 02    CMP   A,0x2              (0852)     cmp     A, USB_TEST_MODE           ; Test Mode
094A: A0 08    JZ    0x0953             (0853)     jz      .test_mode
                                        (0854) ; Flow here for any other selector is invalid for device receipient
094C: 8E 76    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0855)     jmp     USBFS_Not_Supported
                                        (0856) ; Jump here to enable remote wake up
                                        (0857) .remote_wakeup:
094E: 2E 02 02 OR    [0x2],0x2          (0858)     or      [USBFS_DeviceStatus], USB_DEVICE_STATUS_REMOTE_WAKEUP
0951: 80 03    JMP   0x0955             (0859)     jmp     .finish
                                        (0860) ; Jump here to enable test mode
                                        (0861) .test_mode:
0953: 8E 6F    JMP   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0862)     jmp     USBFS_Not_Supported
                                        (0863) .finish:
0955: 8F 77    JMP   0x08CD             (0864)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0865) ELSE
                                        (0866) IF (USB_CB_SRC_h2d_std_dev_03 & USB_APP_SUPPLIED)
                                        (0867) export  USBFS_CB_h2d_std_dev_03
                                        (0868) USBFS_CB_h2d_std_dev_03:
                                        (0869)     ljmp    APP_USBFS_CB_h2d_std_dev_03
                                        (0870) ENDIF
                                        (0871) ENDIF
                                        (0872) ;-----------------------------------------------------------------------------
                                        (0873) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_05
                                        (0874) ;
                                        (0875) ;  DESCRIPTION:   Set Device Address
                                        (0876) ;
                                        (0877) ;****************************************************************
                                        (0878) ; STANDARD DEVICE OUT REQUEST: Set_Device_Address
                                        (0879) ;****************************************************************
                                        (0880) ;
                                        (0881) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0882) ; bRequest       : SET_ADDRESS                    = 05h
                                        (0883) ; wValue         : DEVICE_ADDRESS                 = 00xxh
                                        (0884) ; wIndex         : RESERVED                       = 0000h
                                        (0885) ; wLength        : RESERVED                       = 0000h
                                        (0886) ;
                                        (0887) ; The SET_DEVICE_ADDRESS request sets the USB device address
                                        (0888) ; for all future USB accesses.
                                        (0889) ;
                                        (0890) ;****************************************************************
                                        (0891) ;
                                        (0892) ;-----------------------------------------------------------------------------
                                        (0893) ;
                                        (0894) ;  ARGUMENTS:
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;
                                        (0898) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0899) ;
                                        (0900) ;  THEORY of OPERATION or PROCEDURE:
                                        (0901) ;
                                        (0902) ;-----------------------------------------------------------------------------
                                        (0903) IF (USB_CB_SRC_h2d_std_dev_05 & USB_UM_SUPPLIED)
                                        (0904) export  USBFS_CB_h2d_std_dev_05
                                        (0905) USBFS_CB_h2d_std_dev_05:
                                        (0906)       
0957: 55 1F 01 MOV   [0x1F],0x1         (0907)     mov     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING       
095A: 5D 5A    MOV   A,REG[0x5A]        (0908)     mov     A, reg[USBFS_EP0DATA+wValueLo]       
095C: 53 0D    MOV   [0xD],A            (0909)     mov     [USBFS_TransferBuffer], A       
                                        (0910)                                                    
095E: 8F 6E    JMP   0x08CD             (0911)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0912) ELSE
                                        (0913) IF (USB_CB_SRC_h2d_std_dev_05 & USB_APP_SUPPLIED)
                                        (0914) export  USBFS_CB_h2d_std_dev_05
                                        (0915) USBFS_CB_h2d_std_dev_05:
                                        (0916)     ljmp    APP_USBFS_CB_h2d_std_dev_05
                                        (0917) ENDIF
                                        (0918) ENDIF
                                        (0919) 
                                        (0920) 
                                        (0921) ;-----------------------------------------------------------------------------
                                        (0922) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_09
                                        (0923) ;
                                        (0924) ;  DESCRIPTION:   Set Configuration
                                        (0925) ;
                                        (0926) ;****************************************************************
                                        (0927) ; STANDARD DEVICE OUT REQUEST: Set_Device_Configuration
                                        (0928) ;****************************************************************
                                        (0929) ;
                                        (0930) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0931) ; bRequest       : SET_CONFIGURATION              = 09h
                                        (0932) ; wValue         : CONFIGURATION_VALUE            = --xxh
                                        (0933) ; wIndex         : RESERVED                       = 0000h
                                        (0934) ; wLength        : RESERVED                       = 0000h
                                        (0935) ;
                                        (0936) ; The SET_DEVICE_CONFIGURATION request selects a device
                                        (0937) ; configuration to be activated as the current configuration.
                                        (0938) ;
                                        (0939) ;****************************************************************
                                        (0940) ;-----------------------------------------------------------------------------
                                        (0941) ;
                                        (0942) ;  ARGUMENTS:
                                        (0943) ;
                                        (0944) ;  RETURNS:
                                        (0945) ;
                                        (0946) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0947) ;
                                        (0948) ;  THEORY of OPERATION or PROCEDURE:
                                        (0949) ;
                                        (0950) ;-----------------------------------------------------------------------------
                                        (0951) IF (USB_CB_SRC_h2d_std_dev_09 & USB_UM_SUPPLIED)
                                        (0952) export  USBFS_CB_h2d_std_dev_09
                                        (0953) USBFS_CB_h2d_std_dev_09:
0960: 93 90    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0954)     call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
0962: 55 20 21 MOV   [0x20],0x21        (0955)     mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
0965: 93 7A    CALL  USBFS_GETWORD      (0956)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0957)                                        ; ITempW has the address
0967: 5D 5A    MOV   A,REG[0x5A]        (0958)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
0969: 53 20    MOV   [0x20],A           (0959)     mov     [USBFS_t2], A              ; Save it
096B: 51 21    MOV   A,[0x21]           (0960)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
096D: 58 22    MOV   X,[0x22]           (0961)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
096F: 28       ROMX                     (0962)     romx                               ; First entry is the table size (only a byte)
0970: 3A 20    CMP   A,[0x20]           (0963)     cmp     A, [USBFS_t2]              ; Range check
0972: CE 50    JC    USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0964)     jc      USBFS_Not_Supported
                                        (0965) 
                                        (0966) ; Refactored from the two loops below
0974: 5F 01 20 MOV   [0x1],[0x20]       (0967)     mov     [USBFS_Configuration], [USBFS_t2]    ; Save the config number
                                        (0968) 
0977: 3C 20 00 CMP   [0x20],0x0         (0969)     cmp     [USBFS_t2], 0              ; Unconfigure?
097A: A0 25    JZ    0x09A0             (0970)     jz      .unconfigure
                                        (0971) 
                                        (0972) ; Flow here to configure the endpoints
097C: 51 21    MOV   A,[0x21]           (0973)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
097E: 58 22    MOV   X,[0x22]           (0974)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
0980: 75       INC   X                  (0975)     inc     X                          ; Point to the first table entry
0981: 09 00    ADC   A,0x0              (0976)     adc     A, 0                       ;
0983: 55 20 21 MOV   [0x20],0x21        (0977)     mov     [USBFS_t2], USBFS_t1       ; Set up the destination
0986: 93 59    CALL  USBFS_GETWORD      (0978)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0979)                                        ; ITempW has the address
0988: 57 00    MOV   X,0x0              (0980)     mov     X, 0                       ; Start the index at 0, but we inc first
                                        (0981) .configure_next:
098A: 75       INC   X                  (0982)     inc     X                          ; Do the next one
098B: 10       PUSH  X                  (0983)     push    X                          ; Save the endpoint number
098C: 51 21    MOV   A,[0x21]           (0984)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
098E: 58 22    MOV   X,[0x22]           (0985)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
0990: 28       ROMX                     (0986)     romx
0991: 76 22    INC   [0x22]             (0987)     inc     [USBFS_t1+1]               ; Point to the next
0993: 0E 21 00 ADC   [0x21],0x0         (0988)     adc     [USBFS_t1], 0              ;
0996: 20       POP   X                  (0989)     pop     X
0997: 90 CF    CALL  0x0A68             (0990)     call    ConfigureEP                ; X contains the EP number
                                        (0991)                                        ; A contains the EP Direction
0999: 5B       MOV   A,X                (0992)     mov     A, X                       ;
099A: 39 04    CMP   A,0x4              (0993)     cmp     A, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
099C: BF ED    JNZ   0x098A             (0994)     jnz     .configure_next            ; Do another one?
                                        (0995) ; Flow here when we are done
099E: 80 10    JMP   0x09AF             (0996)     jmp     .done
09A0: 71 10    OR    F,0x10             
                                        (0997) 
                                        (0998) ; Jump here to unconfigure the endpoints
                                        (0999) .unconfigure:
                                        (1000)     M8C_SetBank1	; _EP1MODE is in Bank 1
09A2: 57 04    MOV   X,0x4              (1001)     mov     X, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
                                        (1002) .unconfigure_next:
09A4: 56 23 02 MOV   [X+35],0x2         (1003)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED   ; For the API
09A7: 63 C3 00 MOV   REG[X+0xC3],0x0    (1004)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_DISABLE   ; Disable the endpoint
09AA: 79       DEC   X                  (1005)     dec     X                          ; One more down
09AB: BF F8    JNZ   0x09A4             (1006)     jnz     .unconfigure_next          ; Don't unconfigure EP0
09AD: 70 EF    AND   F,0xEF             
                                        (1007) 	M8C_SetBank0
                                        (1008) .done:
09AF: 8F 1D    JMP   0x08CD             (1009)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1010) ELSE
                                        (1011) IF (USB_CB_SRC_h2d_std_dev_09 & USB_APP_SUPPLIED)
                                        (1012) export  USBFS_CB_h2d_std_dev_09
                                        (1013) USBFS_CB_h2d_std_dev_09:
                                        (1014)     ljmp    APP_USBFS_CB_h2d_std_dev_09
                                        (1015) ENDIF
                                        (1016) ENDIF
                                        (1017) ;-----------------------------------------------------------------------------
                                        (1018) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_00
                                        (1019) ;
                                        (1020) ;  DESCRIPTION:   Get Interface Status
                                        (1021) ;
                                        (1022) ;****************************************************************
                                        (1023) ; STANDARD INTERFACE IN REQUEST: Get_Interface_Status
                                        (1024) ;****************************************************************
                                        (1025) ;
                                        (1026) ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h
                                        (1027) ; bRequest       : GET_STATUS                     = 00h
                                        (1028) ; wValue         : RESERVED                       = 0000h
                                        (1029) ; wIndex         : INTERFACE                      = --xxh
                                        (1030) ; wLength        : SIZEOF_INTERFACE_STATUS        = 0002h
                                        (1031) ;
                                        (1032) ; The GET_INTERFACE_STATUS request returns status for the
                                        (1033) ; specified interface.
                                        (1034) ;
                                        (1035) ;****************************************************************
                                        (1036) ;-----------------------------------------------------------------------------
                                        (1037) ;
                                        (1038) ;  ARGUMENTS:
                                        (1039) ;
                                        (1040) ;  RETURNS:
                                        (1041) ;
                                        (1042) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1043) ;
                                        (1044) ;  THEORY of OPERATION or PROCEDURE:
                                        (1045) ;
                                        (1046) ;-----------------------------------------------------------------------------
                                        (1047) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_UM_SUPPLIED)
                                        (1048) .LITERAL
                                        (1049) GetInterfaceStatusTransferDescrTable:
                                        (1050)     TD_START_TABLE  1                  ; One entry
                                        (1051)     TD_ENTRY        USB_DS_RAM, 2, USBFS_TransferBuffer, NULL_PTR    ; Reuse the transfer buffer
                                        (1052) .ENDLITERAL
                                        (1053) export  USBFS_CB_d2h_std_ifc_00
                                        (1054) USBFS_CB_d2h_std_ifc_00:
09BA: 55 0D 00 MOV   [0xD],0x0          (1055)     mov     [USBFS_TransferBuffer], 0       ; Zero the transfer buffer
09BD: 55 0E 00 MOV   [0xE],0x0          (1056)     mov     [USBFS_TransferBuffer+1], 0    ;
                                        (1057) 
09C0: 55 20 00 MOV   [0x20],0x0         (1058)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
09C3: 50 09    MOV   A,0x9              (1059)     mov     A, >GetInterfaceStatusTransferDescrTable    ; Get the ROM Address MSB
09C5: 57 B1    MOV   X,0xB1             (1060)     mov     X, <GetInterfaceStatusTransferDescrTable    ; Get the ROM Address LSB
                                        (1061) 
09C7: 8F 02    JMP   0x08CA             (1062)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1063) ELSE
                                        (1064) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_APP_SUPPLIED)
                                        (1065) export  USBFS_CB_d2h_std_ifc_00
                                        (1066) USBFS_CB_d2h_std_ifc_00:
                                        (1067)     ljmp    APP_USBFS_CB_d2h_std_ifc_00
                                        (1068) ENDIF
                                        (1069) ENDIF
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_10
                                        (1072) ;
                                        (1073) ;  DESCRIPTION:   Get Interface
                                        (1074) ;
                                        (1075) ;****************************************************************
                                        (1076) ; STANDARD INTERFACE IN REQUEST: Get_Interface
                                        (1077) ;****************************************************************
                                        (1078) ;
                                        (1079) ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h
                                        (1080) ; bRequest       : GET_INTERFACE                  = 0Ah
                                        (1081) ; wValue         : RESERVED                       = 0000h
                                        (1082) ; wIndex         : INTERFACE                      = xxxxh
                                        (1083) ; wLength        : SIZEOF_GET_INTERFACE           = 0001h
                                        (1084) ;
                                        (1085) ; The GET_INTERFACE request returns the selected alternate
                                        (1086) ; setting for the specified interface.
                                        (1087) ;
                                        (1088) ;****************************************************************
                                        (1089) ;-----------------------------------------------------------------------------
                                        (1090) ;
                                        (1091) ;  ARGUMENTS:
                                        (1092) ;
                                        (1093) ;  RETURNS:
                                        (1094) ;
                                        (1095) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1096) ;
                                        (1097) ;  THEORY of OPERATION or PROCEDURE:
                                        (1098) ;
                                        (1099) ;-----------------------------------------------------------------------------
                                        (1100) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_UM_SUPPLIED)
                                        (1101) .LITERAL
                                        (1102) GetInterfaceTransferDescrTable:
                                        (1103)     TD_START_TABLE  1                  ; One entry
                                        (1104)     TD_ENTRY        USB_DS_RAM, 1, USBFS_TransferBuffer, NULL_PTR    ; Reuse the transfer buffer
                                        (1105) .ENDLITERAL
                                        (1106) export  USBFS_CB_d2h_std_ifc_10
                                        (1107) USBFS_CB_d2h_std_ifc_10:
09D2: 5D 5C    MOV   A,REG[0x5C]        (1108)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the interface number
09D4: 39 03    CMP   A,0x3              (1109)     cmp     A, 3h                      ; Valid interface number? (UM Parameter: NumInterfaces)
09D6: DD EC    JNC   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1110)     jnc     USBFS_Not_Supported
                                        (1111) 
09D8: 5C       MOV   X,A                (1112)     mov     X, A                       ; The interface number is the index into alternates settings table
                                        (1113) 
09D9: 52 03    MOV   A,[X+3]            (1114)     mov     A, [X + USBFS_InterfaceSetting]    ; Save the current interface setting
09DB: 53 0D    MOV   [0xD],A            (1115)     mov     [USBFS_TransferBuffer], A       ; into the transfer buffer
                                        (1116) 
09DD: 55 20 00 MOV   [0x20],0x0         (1117)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
09E0: 50 09    MOV   A,0x9              (1118)     mov     A, >GetInterfaceTransferDescrTable    ; Get the ROM Address MSB
09E2: 57 C9    MOV   X,0xC9             (1119)     mov     X, <GetInterfaceTransferDescrTable    ; Get the ROM Address LSB
                                        (1120) 
09E4: 8E E5    JMP   0x08CA             (1121)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1122) ELSE
                                        (1123) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_APP_SUPPLIED)
                                        (1124) export  USBFS_CB_d2h_std_ifc_10
                                        (1125) USBFS_CB_d2h_std_ifc_10:
                                        (1126)     ljmp    APP_USBFS_CB_d2h_std_ifc_10
                                        (1127) ENDIF
                                        (1128) ENDIF
                                        (1129) ;-----------------------------------------------------------------------------
                                        (1130) ;  FUNCTION NAME: USBFS_CB_d2h_std_ep_00
                                        (1131) ;
                                        (1132) ;  DESCRIPTION:   Get Endpoint Status
                                        (1133) ;
                                        (1134) ;****************************************************************
                                        (1135) ; STANDARD ENDPOINT IN REQUEST: Get_Endpoint_Status
                                        (1136) ;****************************************************************
                                        (1137) ;
                                        (1138) ; bmRequestType  : (IN | STANDARD | ENDPOINT)     = 82h
                                        (1139) ; bRequest       : GET_STATUS                     = 00h
                                        (1140) ; wValue         : RESERVED                       = 0000h
                                        (1141) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1142) ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h
                                        (1143) ;
                                        (1144) ; The GET_ENDPOINT_STATUS request returns status for the specified
                                        (1145) ; endpoint.
                                        (1146) ;
                                        (1147) ;****************************************************************
                                        (1148) ;-----------------------------------------------------------------------------
                                        (1149) ;
                                        (1150) ;  ARGUMENTS:
                                        (1151) ;
                                        (1152) ;  RETURNS:
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1155) ;
                                        (1156) ;  THEORY of OPERATION or PROCEDURE:
                                        (1157) ;
                                        (1158) ;-----------------------------------------------------------------------------
                                        (1159) IF (USB_CB_SRC_d2h_std_ep_00 & USB_UM_SUPPLIED)
                                        (1160) export  USBFS_CB_d2h_std_ep_00
                                        (1161) USBFS_CB_d2h_std_ep_00:
09E6: 5D 5C    MOV   A,REG[0x5C]        (1162)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the endpoint number
09E8: 21 7F    AND   A,0x7F             (1163)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
09EA: 39 05    CMP   A,0x5              (1164)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
09EC: DD D6    JNC   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1165)     jnc     USBFS_Not_Supported
                                        (1166) 
09EE: 5C       MOV   X,A                (1167)     mov     X, A                       ; The endpoint number is the index
                                        (1168) 
09EF: 55 20 00 MOV   [0x20],0x0         (1169)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
                                        (1170) 
09F2: 55 0E 00 MOV   [0xE],0x0          (1171)     mov     [USBFS_TransferBuffer + 1], 0    ; Use the UM Transfer Buffer
09F5: 52 06    MOV   A,[X+6]            (1172)     mov     A, [X + USBFS_EndpointStatus]    ; Get the status
09F7: 53 0D    MOV   [0xD],A            (1173)     mov     [USBFS_TransferBuffer], A    ; Save it in the report
                                        (1174) 
09F9: 50 07    MOV   A,0x7              (1175)     mov     A, >GetStatusTransferDescrTable    ; Get the ROM Address MSB
09FB: 57 CA    MOV   X,0xCA             (1176)     mov     X, <GetStatusTransferDescrTable    ; Get the ROM Address LSB
                                        (1177) 
09FD: 8E CC    JMP   0x08CA             (1178)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1179) ELSE
                                        (1180) IF (USB_CB_SRC_d2h_std_ep_00 & USB_APP_SUPPLIED)
                                        (1181) export  USBFS_CB_d2h_std_ep_00
                                        (1182) USBFS_CB_d2h_std_ep_00:
                                        (1183)     ljmp    APP_USBFS_CB_d2h_std_ep_00
                                        (1184) ENDIF
                                        (1185) ENDIF
                                        (1186) 
                                        (1187) ;-----------------------------------------------------------------------------
                                        (1188) ;  FUNCTION NAME: USBFS_CB_h2d_std_ep_01
                                        (1189) ;
                                        (1190) ;  DESCRIPTION:   Clear Endpoint Feature
                                        (1191) ;
                                        (1192) ;****************************************************************
                                        (1193) ; STANDARD ENDPOINT OUT REQUEST: Clear_Endpoint_Feature
                                        (1194) ;****************************************************************
                                        (1195) ;
                                        (1196) ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                                        (1197) ; bRequest       : CLEAR_FEATURE                  = 01h
                                        (1198) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (1199) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1200) ; wLength        : RESERVED                       = 0000h
                                        (1201) ;
                                        (1202) ; The CLEAR_ENDPOINT_FEATURE request disables a particular
                                        (1203) ; feature for an endpoint.
                                        (1204) ;
                                        (1205) ; The only feature supported for an endpoint is the EP_HALT
                                        (1206) ; feature.
                                        (1207) ;
                                        (1208) ;****************************************************************
                                        (1209) ;-----------------------------------------------------------------------------
                                        (1210) ;
                                        (1211) ;  ARGUMENTS:
                                        (1212) ;
                                        (1213) ;  RETURNS:
                                        (1214) ;
                                        (1215) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1216) ;
                                        (1217) ;  THEORY of OPERATION or PROCEDURE:
                                        (1218) ;
                                        (1219) ;-----------------------------------------------------------------------------
                                        (1220) IF (USB_CB_SRC_h2d_std_ep_01 & USB_UM_SUPPLIED)
                                        (1221) export  USBFS_CB_h2d_std_ep_01
                                        (1222) USBFS_CB_h2d_std_ep_01:
09FF: 5D 5A    MOV   A,REG[0x5A]        (1223)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the feature selector
0A01: 39 00    CMP   A,0x0              (1224)     cmp     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
0A03: BD BF    JNZ   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1225)     jnz     USBFS_Not_Supported
                                        (1226) 
0A05: 5D 5C    MOV   A,REG[0x5C]        (1227)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the Endpoint number
0A07: 21 7F    AND   A,0x7F             (1228)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
0A09: 39 00    CMP   A,0x0              (1229)     cmp     A, 0                       ; Since we can't halt the Control Endpoint
0A0B: A0 2C    JZ    0x0A38             (1230)     jz      .done
                                        (1231) 
0A0D: 39 05    CMP   A,0x5              (1232)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
0A0F: DD B3    JNC   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1233)     jnc     USBFS_Not_Supported
                                        (1234) 
0A11: 5C       MOV   X,A                (1235)     mov     X, A                       ; Endpoint number is the index
0A12: 27 06 FE AND   [X+6],0xFE         (1236)     and     [X+USBFS_EndpointStatus], ~USB_ENDPOINT_STATUS_HALT    ; Clear the endpoint halt
                                        (1237) 
                                        (1238) ;mykt_ukr    index   USBFS_USB_EP_BIT_LOOKUP	   ; Find bit position for endpoint
0A15: 10       PUSH  X                  (1239)     push X
0A16: 01 59    ADD   A,0x59             (1240)     add     A, <USBFS_USB_EP_BIT_LOOKUP           ; endpoint address LSB
0A18: 57 04    MOV   X,0x4              (1241)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; endpoint address MSB
0A1A: 4B       SWAP  A,X                (1242)     swap    A, X
0A1B: 09 00    ADC   A,0x0              (1243)     adc     A, 0
0A1D: 28       ROMX                     (1244)     romx
0A1E: 20       POP   X                  (1245)     pop X
                                        (1246) 
0A1F: 31 FF    XOR   A,0xFF             (1247)     xor     A, FFh
0A21: 24 1E    AND   [0x1E],A           (1248)     and     [USBFS_EPDataToggle], A ; Clear the data toggle for this endpoint
                                        (1249) 
0A23: 49 5C 80 TST   REG[0x5C],0x80     (1250)     tst     reg[USBFS_EP0DATA+wIndexLo], USB_DIR_IN    ; IN or OUT endpoint?
0A26: 71 10    OR    F,0x10             
                                        (1251)     M8C_SetBank1	                      ; For EP1_MODE register
0A28: B0 09    JNZ   0x0A32             (1252)     jnz     .in
                                        (1253) 
                                        (1254)     ; Mark endpoint as empty so it will be reloaded
0A2A: 56 23 00 MOV   [X+35],0x0         (1255)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING
0A2D: 63 C3 09 MOV   REG[X+0xC3],0x9    (1256)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_ACK_OUT    ; ACK the endpoint
0A30: 80 07    JMP   0x0A38             (1257)     jmp     .done
                                        (1258) .in:
0A32: 56 23 01 MOV   [X+35],0x1         (1259)     mov     [X+USBFS_EndpointAPIStatus], EVENT_PENDING
0A35: 63 C3 0C MOV   REG[X+0xC3],0xC    (1260)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_NAK_IN    ; NAK the endpoint
0A38: 70 EF    AND   F,0xEF             
                                        (1261) .done:
                                        (1262) 	M8C_SetBank0
0A3A: 8E 92    JMP   0x08CD             (1263)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1264) ELSE
                                        (1265) IF (USB_CB_SRC_h2d_std_ep_01 & USB_APP_SUPPLIED)
                                        (1266) export  USBFS_CB_h2d_std_ep_01
                                        (1267) USBFS_CB_h2d_std_ep_01:
                                        (1268)     ljmp    APP_USBFS_CB_h2d_std_ep_01
                                        (1269) ENDIF
                                        (1270) ENDIF
                                        (1271) ;-----------------------------------------------------------------------------
                                        (1272) ;  FUNCTION NAME: USBFS_CB_h2d_std_ep_03
                                        (1273) ;
                                        (1274) ;  DESCRIPTION:   Set Endpoint Feature
                                        (1275) ;
                                        (1276) ;****************************************************************
                                        (1277) ; STANDARD ENDPOINT OUT REQUEST: Set_Endpoint_Feature
                                        (1278) ;****************************************************************
                                        (1279) ;
                                        (1280) ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                                        (1281) ; bRequest       : SET_FEATURE                    = 03h
                                        (1282) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (1283) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1284) ; wLength        : RESERVED                       = 0000h
                                        (1285) ;
                                        (1286) ; The SET_ENDPOINT_FEATURE request enables a particular feature
                                        (1287) ; for a specific endpoint. The only feature supported for an
                                        (1288) ; endpoint is the EP_HALT feature.
                                        (1289) ;
                                        (1290) ;****************************************************************
                                        (1291) ;-----------------------------------------------------------------------------
                                        (1292) ;
                                        (1293) ;  ARGUMENTS:
                                        (1294) ;
                                        (1295) ;  RETURNS:
                                        (1296) ;
                                        (1297) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) IF (USB_CB_SRC_h2d_std_ep_03 & USB_UM_SUPPLIED)
                                        (1303) export  USBFS_CB_h2d_std_ep_03
                                        (1304) USBFS_CB_h2d_std_ep_03:
0A3C: 5D 5A    MOV   A,REG[0x5A]        (1305)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the feature selector
0A3E: 39 00    CMP   A,0x0              (1306)     cmp     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
0A40: BD 82    JNZ   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1307)     jnz     USBFS_Not_Supported
                                        (1308) 
0A42: 5D 5C    MOV   A,REG[0x5C]        (1309)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the Endpoint number
0A44: 21 7F    AND   A,0x7F             (1310)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
0A46: 39 00    CMP   A,0x0              (1311)     cmp     A, 0                       ; Never halt the Control Endpoint
0A48: A0 1B    JZ    0x0A64             (1312)     jz      .done
                                        (1313) 
0A4A: 39 05    CMP   A,0x5              (1314)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
0A4C: DD 76    JNC   USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1315)     jnc     USBFS_Not_Supported
                                        (1316) 
0A4E: 5C       MOV   X,A                (1317)     mov     X, A                       ; Endpoint number is the index
                                        (1318) 
0A4F: 2F 06 01 OR    [X+6],0x1          (1319)     or      [X+USBFS_EndpointStatus], USB_ENDPOINT_STATUS_HALT    ; Halt the endpoint
0A52: 56 23 02 MOV   [X+35],0x2         (1320)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED
                                        (1321) 
0A55: 49 5C 80 TST   REG[0x5C],0x80     (1322)     tst     reg[USBFS_EP0DATA+wIndexLo], USB_DIR_IN    ; IN or OUT endpoint?
0A58: 71 10    OR    F,0x10             
                                        (1323)     M8C_SetBank1	                      ; For EP1_MODE register
0A5A: B0 06    JNZ   0x0A61             (1324)     jnz     .in
                                        (1325) 
0A5C: 63 C3 89 MOV   REG[X+0xC3],0x89   (1326)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_OUT    ; Stall the endpoint
0A5F: 80 04    JMP   0x0A64             (1327)     jmp     .done
                                        (1328) .in:
0A61: 63 C3 8D MOV   REG[X+0xC3],0x8D   (1329)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_IN    ; Stall the endpoint
0A64: 70 EF    AND   F,0xEF             
                                        (1330) .done:
                                        (1331) 	M8C_SetBank0
0A66: 8E 66    JMP   0x08CD             (1332)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1333) ELSE
                                        (1334) IF (USB_CB_SRC_h2d_std_ep_03 & USB_APP_SUPPLIED)
                                        (1335) export  USBFS_CB_h2d_std_ep_03
                                        (1336) USBFS_CB_h2d_std_ep_03:
                                        (1337)     ljmp    APP_USBFS_CB_h2d_std_ep_03
                                        (1338) ENDIF
                                        (1339) ENDIF
                                        (1340) ;-----------------------------------------------------------------------------
                                        (1341) ;  FUNCTION NAME: ConfigureEP
                                        (1342) ;
                                        (1343) ;  DESCRIPTION:   Configure an endpoint
                                        (1344) ;
                                        (1345) ;  ARGUMENTS:    A contains the endpoint direction
                                        (1346) ;                X contains the endpoint number
                                        (1347) ;
                                        (1348) ;  RETURNS:
                                        (1349) ;
                                        (1350) ;  SIDE EFFECTS:  The A REGISTER IS VOLATILE.  X REGISTER IS MAINTAINED!
                                        (1351) ;
                                        (1352) ;  THEORY of OPERATION or PROCEDURE:
                                        (1353) ;
                                        (1354) ;-----------------------------------------------------------------------------
                                        (1355) ConfigureEP:
0A68: 39 7F    CMP   A,0x7F             (1356)     cmp     A, USB_DIR_UNUSED          ; Is this endpoint unused?
0A6A: B0 02    JNZ   0x0A6D             (1357)     jnz     .enable                    ; Only enable it if it is used
0A6C: 7F       RET                      (1358)     ret                                ; Quick exit if this endpoint is unused
                                        (1359) 
                                        (1360) ; Jump here to enable an endpoint
                                        (1361) .enable:
0A6D: 08       PUSH  A                  (1362)     push    A		                        ; Save the endpoint direction
0A6E: 5B       MOV   A,X                (1363)     mov     A, X	                      ; We are using a jacc to dispatch to enable the interrupt
0A6F: 64       ASL   A                  (1364)     asl     A		                        ;
0A70: E0 01    JACC  0x0A72             (1365)     jacc    .EP_INT_ENABLE             ;
                                        (1366) 
                                        (1367) 
                                        (1368) .EP_INT_ENABLE:
0A72: 80 09    JMP   0x0A7C             (1369)     jmp     .EP0IntEnable              ; Enable EP0
0A74: 80 0C    JMP   0x0A81             (1370)     jmp     .EP1IntEnable              ; Enable EP1
0A76: 80 0F    JMP   0x0A86             (1371)     jmp     .EP2IntEnable              ; Enable EP2
0A78: 80 12    JMP   0x0A8B             (1372)     jmp     .EP3IntEnable              ; Enable EP3
0A7A: 80 15    JMP   0x0A90             (1373)     jmp     .EP4IntEnable              ; Enable EP4
0A7C: 43 DF 04 OR    REG[0xDF],0x4      
                                        (1374) 
                                        (1375) ; Jump here to enable EP0 Interrupts
                                        (1376) .EP0IntEnable:
                                        (1377)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP0_MASK
                                        (1378) ;    jmp   .exit2
0A7F: 80 15    JMP   0x0A95             (1379)     jmp     .cont
0A81: 43 DF 08 OR    REG[0xDF],0x8      
                                        (1380) .EP1IntEnable:
                                        (1381)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP1_MASK
0A84: 80 10    JMP   0x0A95             (1382)     jmp     .cont
0A86: 43 DF 10 OR    REG[0xDF],0x10     
                                        (1383) .EP2IntEnable:
                                        (1384)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP2_MASK
0A89: 80 0B    JMP   0x0A95             (1385)     jmp     .cont
0A8B: 43 DF 20 OR    REG[0xDF],0x20     
                                        (1386) .EP3IntEnable:
                                        (1387)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP3_MASK
0A8E: 80 06    JMP   0x0A95             (1388)     jmp     .cont
0A90: 43 DF 40 OR    REG[0xDF],0x40     
                                        (1389) .EP4IntEnable:
                                        (1390)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP4_MASK
0A93: 80 01    JMP   0x0A95             (1391) 	jmp     .cont
                                        (1392) 
                                        (1393) ; Jump or flow here to continue configuring the endpoint
                                        (1394) ;.contEP0:
                                        (1395) ;    pop   A                           ; Get the endpoint direction back
                                        (1396) ;    and   A, USB_DIR_IN               ; Is it an IN endpoint?
                                        (1397) ;    jnz   .inEP0                      ; Jump on IN
                                        (1398) ; Flow here for an OUT Endpoint
                                        (1399) ;    mov   [USBFS_TempMode], USB_MODE_NAK_OUT   ; NAK the endpoint
                                        (1400) ;    jmp   .exit2
                                        (1401) ; Jump here for an IN Endpoint
                                        (1402) ;.inEP0:
                                        (1403) ;    mov   [USBFS_TempMode], USB_MODE_NAK_IN   ; NAK the endpoint
                                        (1404) ;	jmp   .exit2
                                        (1405) .cont:
0A95: 5B       MOV   A,X                (1406)     mov     A, X	                      ; Get the endpoint number from X
                                        (1407) 
                                        (1408) ;mykt_ukr     index   USBFS_USB_EP_BIT_LOOKUP	   ; Find bit position for endpoint
0A96: 10       PUSH  X                  (1409)     push X	
0A97: 01 59    ADD   A,0x59             (1410)     add     A, <USBFS_USB_EP_BIT_LOOKUP           ; endpoint address LSB
0A99: 57 04    MOV   X,0x4              (1411)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; endpoint address MSB
0A9B: 4B       SWAP  A,X                (1412)     swap    A, X
0A9C: 09 00    ADC   A,0x0              (1413)     adc     A, 0
0A9E: 28       ROMX                     (1414)     romx
0A9F: 20       POP   X                  (1415)     pop X
                                        (1416) 	
0AA0: 31 FF    XOR   A,0xFF             (1417)     xor     A, FFh
0AA2: 24 1E    AND   [0x1E],A           (1418)     and     [USBFS_EPDataToggle], A ; Clear the data toggle for this endpoint
                                        (1419) 
0AA4: 27 06 FE AND   [X+6],0xFE         (1420)     and     [X+USBFS_EndpointStatus], ~USB_ENDPOINT_STATUS_HALT    ; Clear any endpoint halts
0AA7: 71 10    OR    F,0x10             
                                        (1421) 
                                        (1422) ; if endpoint 0 set EP0MODE
                                        (1423) ; then exit
                                        (1424) ;    mov     A, X	                     ; Get the endpoint number from X
                                        (1425) ;    cmp     A, EP0	                   ; Is this endpoint zero?
                                        (1426) ;    jnz     .enable                   ; Only enable it if it is used
                                        (1427) 
                                        (1428)     M8C_SetBank1
0AA9: 18       POP   A                  (1429)     pop     A                          ; Get the endpoint direction back
0AAA: 21 80    AND   A,0x80             (1430)     and     A, USB_DIR_IN              ; Is it an IN endpoint?
0AAC: B0 09    JNZ   0x0AB6             (1431)     jnz     .in                        ; Jump on IN
                                        (1432) ; Flow here for an OUT Endpoint
0AAE: 63 C3 09 MOV   REG[X+0xC3],0x9    (1433)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_ACK_OUT   ; ACK the endpoint
0AB1: 56 23 00 MOV   [X+35],0x0         (1434)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; For the API
0AB4: 80 07    JMP   0x0ABC             (1435)     jmp     .exit1
                                        (1436) ; Jump here for an IN Endpoint
                                        (1437) .in:
0AB6: 63 C3 0C MOV   REG[X+0xC3],0xC    (1438)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_NAK_IN   ; NAK the endpoint
0AB9: 56 23 01 MOV   [X+35],0x1         (1439)     mov     [X+USBFS_EndpointAPIStatus], EVENT_PENDING   ; For the API
0ABC: 70 EF    AND   F,0xEF             
                                        (1440) ; Jump or flow here to set the API event and exit
                                        (1441) .exit1:
                                        (1442) 	M8C_SetBank0
                                        (1443) .exit2:
                                        (1444) ;    mov   [X+USBFS_EPDataToggle], 0    ; Clear all EP data toggles?  Is this right?
0ABE: 7F       RET                      (1445)     ret
                                        (1446) 
                                        (1447) ; End of File USBFS_std.asm
FILE: lib\usbfs_drv.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFS_drv.asm
                                        (0004) ;;  Version: 2.10, Updated on 2015/3/4 at 22:27:56
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module control endpoint driver
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "USBFS_macros.inc"
                                        (0025) include "USBFS.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  USBFS_EP0_ISR
                                        (0031) export _USBFS_EP0_ISR
                                        (0032) export  USBFS_InitControlRead
                                        (0033) export _USBFS_InitControlRead
                                        (0034) export  USBFS_InitControlWrite
                                        (0035) export _USBFS_InitControlWrite
                                        (0036) export  USBFS_InitNoDataStageControlTransfer
                                        (0037) export _USBFS_InitNoDataStageControlTransfer
                                        (0038) export  USBFS_NoDataStageControlTransfer
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Macro Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) ;-----------------------------------------------
                                        (0045) ;  Constant Definitions
                                        (0046) ;-----------------------------------------------
                                        (0047) 
                                        (0048) ;-----------------------------------------------
                                        (0049) ; Variable Allocation
                                        (0050) ;-----------------------------------------------
                                        (0051) AREA InterruptRAM (RAM, REL, CON)
                                        (0052) ;----------------------------------------------------------------------------
                                        (0053) ; Current Device
                                        (0054) ;----------------------------------------------------------------------------
                                        (0055) export USBFS_bCurrentDevice, _USBFS_bCurrentDevice
                                        (0056)  USBFS_bCurrentDevice:
                                        (0057) _USBFS_bCurrentDevice:                  BLK   1    ;  Current Device
                                        (0058) ;----------------------------------------------------------------------------
                                        (0059) ; Current Configuration
                                        (0060) ;----------------------------------------------------------------------------
                                        (0061) export USBFS_Configuration, _USBFS_Configuration
                                        (0062)  USBFS_Configuration:
                                        (0063) _USBFS_Configuration:                   BLK   1    ;  Current Configuration
                                        (0064) ;----------------------------------------------------------------------------
                                        (0065) ; Current Device Status
                                        (0066) ;----------------------------------------------------------------------------
                                        (0067) export USBFS_DeviceStatus, _USBFS_DeviceStatus
                                        (0068)  USBFS_DeviceStatus:
                                        (0069) _USBFS_DeviceStatus:                    BLK   1    ;  Current Device Status
                                        (0070) ;----------------------------------------------------------------------------
                                        (0071) ; Interface Setting
                                        (0072) ;----------------------------------------------------------------------------
                                        (0073) ;  User Module Parameter determines the number of interfaces
                                        (0074) export USBFS_InterfaceSetting, _USBFS_InterfaceSetting
                                        (0075)  USBFS_InterfaceSetting:
                                        (0076) _USBFS_InterfaceSetting:                BLK   3h    ; Interface Setting
                                        (0077) ;----------------------------------------------------------------------------
                                        (0078) ; Endpoint Status--USB Status
                                        (0079) ;----------------------------------------------------------------------------
                                        (0080) export USBFS_EndpointStatus, _USBFS_EndpointStatus
                                        (0081)  USBFS_EndpointStatus:
                                        (0082) _USBFS_EndpointStatus:                  BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
                                        (0083) ;----------------------------------------------------------------------------
                                        (0084) ; Last Packet Size
                                        (0085) ;----------------------------------------------------------------------------
                                        (0086) export USBFS_LastSize
                                        (0087)  USBFS_LastSize:                        BLK   1    ; Last Packet Size
                                        (0088) ;----------------------------------------------------------------------------
                                        (0089) ; Control Transfer State Machine
                                        (0090) ; State values for Control Write
                                        (0091) ; State values for Control Read
                                        (0092) ;----------------------------------------------------------------------------
                                        (0093) export USBFS_TransferType
                                        (0094)  USBFS_TransferType:                    BLK   1    ; Control Transfer State Machine
                                        (0095) ;----------------------------------------------------------------------------
                                        (0096) ; Control Transfer Intermediate Buffer--Shared among the requests
                                        (0097) ;----------------------------------------------------------------------------
                                        (0098) export USBFS_TransferBuffer
                                        (0099)  USBFS_TransferBuffer:                  BLK   8
                                        (0100) ;----------------------------------------------------------------------------
                                        (0101) ; Transfer Descriptor Data for Control Transfer
                                        (0102) ;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
                                        (0103) ;----------------------------------------------------------------------------
                                        (0104) ; Control Transfer Data Source
                                        (0105) ;   USB_DS_ROM
                                        (0106) ;   USB_DS_RAM
                                        (0107) ;   USB_DS_RAM_AS_NEEDED
                                        (0108) ;----------------------------------------------------------------------------
                                        (0109) export USBFS_CurrentTD, _USBFS_CurrentTD
                                        (0110) _USBFS_CurrentTD:
                                        (0111)  USBFS_CurrentTD:
                                        (0112) export USBFS_DataSource, _USBFS_DataSource
                                        (0113) _USBFS_DataSource:
                                        (0114)  USBFS_DataSource:                      BLK   1
                                        (0115) ;----------------------------------------------------------------------------
                                        (0116) ; Control Transfer Data Size
                                        (0117) ;----------------------------------------------------------------------------
                                        (0118) export USBFS_TransferSize, _USBFS_TransferSize
                                        (0119) _USBFS_TransferSize:
                                        (0120)  USBFS_TransferSize:                    BLK   2
                                        (0121) ;----------------------------------------------------------------------------
                                        (0122) ; Control Transfer Data Pointer
                                        (0123) ;   Source for Control Read
                                        (0124) ;   Destination for Control Write
                                        (0125) ;----------------------------------------------------------------------------
                                        (0126) export USBFS_DataPtr, _USBFS_DataPtr
                                        (0127) _USBFS_DataPtr:
                                        (0128)  USBFS_DataPtr:                         BLK   2
                                        (0129) ;----------------------------------------------------------------------------
                                        (0130) ; Transfer Completion Notification
                                        (0131) ;----------------------------------------------------------------------------
                                        (0132) export USBFS_StatusBlockPtr, _USBFS_StatusBlockPtr
                                        (0133) _USBFS_StatusBlockPtr:
                                        (0134)  USBFS_StatusBlockPtr:                  BLK   2
                                        (0135) 
                                        (0136) ;----------------------------------------------------------------------------
                                        (0137) ; Control Transfer _TransferByteCount (Actually transfered
                                        (0138) ;----------------------------------------------------------------------------
                                        (0139)  USBFS_TransferByteCount:               BLK   2
                                        (0140) 
                                        (0141) ;----------------------------------------------------------------------------
                                        (0142) ; Control Endpoint Data toggle / krypton uses this ONLY for EP0  
                                        (0143) ; For 20x6x devices: See USBFS_EPXDataToggle defined in usb.asm
                                        (0144) export USBFS_EPDataToggle, _USBFS_EPDataToggle
                                        (0145)  _USBFS_EPDataToggle:
                                        (0146)  USBFS_EPDataToggle:
                                        (0147)  USBFS_EP0DataToggle:                   BLK   1
                                        (0148) ;----------------------------------------------------------------------------
                                        (0149) ; Control Endpoint Data Pending Flag
                                        (0150) export USBFS_fDataPending
                                        (0151)  USBFS_fDataPending:                    BLK   1
                                        (0152) ;----------------------------------------------------------------------------
                                        (0153) ; Control Endpoint Data Pending Flag
                                        (0154) ;export USBFS_PendingData
                                        (0155) ; USBFS_PendingData:                    BLK   1
                                        (0156) ;----------------------------------------------------------------------------
                                        (0157) ; Temporary Data registers
                                        (0158) export USBFS_t2, USBFS_t1, USBFS_t0
                                        (0159)  USBFS_t2:                              BLK   1    ; Temporary shared by the UM
                                        (0160)  USBFS_t1:                              BLK   1    ; Temporary shared by the UM
                                        (0161)  USBFS_t0:                              BLK   1    ; Temporary shared by the UM
                                        (0162) 
                                        (0163) ;export USBFS_IntState
                                        (0164) ; USBFS_IntState:                       BLK  1
                                        (0165) ;export USBFS_StackPointer
                                        (0166) ; USBFS_StackPointer:                   BLK  1
                                        (0167) ;export USBFS_TempMode
                                        (0168) ; USBFS_TempMode:                       BLK 1
                                        (0169) ;----------------------------------------------------------------------------
                                        (0170) ; Endpoint Transfer--API Status
                                        (0171) ;----------------------------------------------------------------------------
                                        (0172) export USBFS_EndpointAPIStatus, _USBFS_EndpointAPIStatus
                                        (0173)  USBFS_EndpointAPIStatus:
                                        (0174) _USBFS_EndpointAPIStatus:               BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
                                        (0175) 
                                        (0176) IF 1
                                        (0177) ELSE
                                        (0178) ERROR_RUN_USB_WIZARD
                                        (0179) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0180) ; In order for the USB User Module to compile properly the USB Wizard must be run.
                                        (0181) ; To do this navigate back to the Device Editor Window, right click on the icon for the
                                        (0182) ; USB User Module and select the 'USB Setup Wizard...'.  Configure the device as needed
                                        (0183) ; and then click OK.  Re-generate source before compiling again.
                                        (0184) ; For HID devices it is important that all instances of HID Class Descriptors point to a valid
                                        (0185) ; HID report.
                                        (0186) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0187) ENDIF
                                        (0188) 
                                        (0189) AREA UserModules (ROM, REL)
                                        (0190) ;-----------------------------------------------------------------------------
                                        (0191) ;  FUNCTION NAME: USBFS_EP0_ISR
                                        (0192) 
                                        (0193) ;
                                        (0194) ;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
                                        (0195) ;                 dispaches all SETUP, IN, and OUT transfers to the proper
                                        (0196) ;                 dispatch routines for all supported USB requests.
                                        (0197) ;
                                        (0198) ;-----------------------------------------------------------------------------
                                        (0199) ;
                                        (0200) ;  ARGUMENTS:   n/a
                                        (0201) ;
                                        (0202) ;  RETURNS:     n/a
                                        (0203) ;
                                        (0204) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0205) ;
                                        (0206) ;  THEORY of OPERATION or PROCEDURE:
                                        (0207) ;
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209)  USBFS_EP0_ISR:
                                        (0210) _USBFS_EP0_ISR:
0ABF: 08       PUSH  A                  (0211)     push    A
0AC0: 10       PUSH  X                  (0212)     push    X
0AC1: 5D D5    MOV   A,REG[0xD5]        
0AC3: 08       PUSH  A                  
0AC4: 5D D4    MOV   A,REG[0xD4]        
0AC6: 08       PUSH  A                  
0AC7: 62 D5 00 MOV   REG[0xD5],0x0      
0ACA: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0213)     REG_PRESERVE MVW_PP
                                        (0214)     REG_PRESERVE MVR_PP
                                        (0215) 
                                        (0216)     RAM_SETPAGE_MVW 0
                                        (0217)     RAM_SETPAGE_MVR 0
                                        (0218) 
                                        (0219)     ; Dispatch to setup/in/out handlers
0ACD: 5D 56    MOV   A,REG[0x56]        (0220)     mov     A, reg[USBFS_EP0MODE]       ; Get the mode reg
                                        (0221) 
0ACF: 5C       MOV   X,A                (0222)     mov     X, A ; store for later
                                        (0223)     ; Check EP0_CR for the following cases:
                                        (0224)     ; bit 7 is set but ack is not set or mode is not 1 => invalid setup
                                        (0225)     ; bit 7 is not set, bit 5 or 6 is set, but bit 4 is not set => invalid in/out
0AD0: 21 9F    AND   A,0x9F             (0226)     and     A, 9Fh
0AD2: 39 91    CMP   A,0x91             (0227)     cmp     A, 91h
0AD4: A0 43    JZ    0x0B18             (0228)     jz      USBFS_EP0_Setup
                                        (0229)     ; Check if setup bit is set--if so then invalid EP0_CR reg read so exit
0AD6: 21 80    AND   A,0x80             (0230)     and     A, 80h
                                        (0231)     ; Getting here means there is an invalid setup; exit without modifying the mode
0AD8: B0 36    JNZ   0x0B0F             (0232)     jnz     USBFS_EP0_ISR_EXIT
                                        (0233)     ; Getting here means the setup bit is not set, now check in/out
0ADA: 5B       MOV   A,X                (0234)     mov     A, X   ; restore EP0_CR reg as read
0ADB: 21 70    AND   A,0x70             (0235)     and     A, 70h
0ADD: 39 50    CMP   A,0x50             (0236)     cmp     A, 50h
0ADF: A0 62    JZ    0x0B42             (0237)     jz      USBFS_EP0_IN
0AE1: 39 30    CMP   A,0x30             (0238)     cmp     A, 30h
0AE3: A0 6C    JZ    0x0B50             (0239)     jz      USBFS_EP0_OUT
                                        (0240)     ; Getting here means there is an invalid in/out; exit without modifying the mode
0AE5: 80 29    JMP   0x0B0F             (0241)     jmp     USBFS_EP0_ISR_EXIT  
                                        (0242) 
                                        (0243) ; ISR Exit Point to update the mode register
                                        (0244) ;   mode and count have been pushed onto the stack
                                        (0245) export USBFS_EP0_UPD_MODE_EXIT
                                        (0246) USBFS_EP0_UPD_MODE_EXIT:
0AE7: 53 22    MOV   [0x22],A           (0247)     mov     [USBFS_t0], A                    ; store EP0_CNT reg value for later
0AE9: 5D 56    MOV   A,REG[0x56]        (0248)     mov     A, reg[USBFS_EP0MODE]            ; unlock registers  
0AEB: 21 80    AND   A,0x80             (0249)     and     A, 80h                                      ; Check if SETUP bit is set
0AED: B0 21    JNZ   0x0B0F             (0250)     jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR	
0AEF: 51 22    MOV   A,[0x22]           (0251)     mov     A, [USBFS_t0]                    ; restore EP0_CNT reg value
0AF1: 60 57    MOV   REG[0x57],A        (0252)     mov     reg[USBFS_EP0CNT], A             ; Update the count register
0AF3: 5D 57    MOV   A,REG[0x57]        (0253)     mov     A, reg[USBFS_EP0CNT]             ; writing check
0AF5: 3A 22    CMP   A,[0x22]           (0254)     cmp     A, [USBFS_t0]                    ; if writing was not succesful,
0AF7: B0 17    JNZ   0x0B0F             (0255)     jnz     USBFS_EP0_ISR_EXIT               ;         then abort the ISR    
                                        (0256) 
0AF9: 5A 22    MOV   [0x22],X           (0257)     mov     [USBFS_t0], X                     ; store EP0_MODE reg value for later
                                        (0258) .ReWriteMODE:
0AFB: 5D 56    MOV   A,REG[0x56]        (0259)     mov     A, reg[USBFS_EP0MODE]             ; unblock registers    
0AFD: 21 80    AND   A,0x80             (0260)     and     A, 80h                                      ; Check if SETUP bit is set
0AFF: B0 0F    JNZ   0x0B0F             (0261)     jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
                                        (0262)     
0B01: 51 22    MOV   A,[0x22]           (0263)     mov     A, [USBFS_t0]                     ; restore the new MODE
0B03: 60 56    MOV   REG[0x56],A        (0264)     mov     reg[USBFS_EP0MODE], A             ; Update the mode regiter
                                        (0265)     
0B05: 5D 56    MOV   A,REG[0x56]        (0266)     mov     A, reg[USBFS_EP0MODE]             ; writing check
0B07: 21 0F    AND   A,0xF              (0267)     and     A,  0Fh                                     ; clear 7-4 bits
0B09: 3A 22    CMP   A,[0x22]           (0268)     cmp     A, [USBFS_t0]                     ; if writing was succesful,
0B0B: A0 03    JZ    0x0B0F             (0269)     jz      USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
                                        (0270)                                                          ; if writing was not succesful,
0B0D: 8F ED    JMP   0x0AFB             (0271)     jmp      .ReWriteMODE                                 ;           then repeat write operation   
0B0F: 18       POP   A                  
0B10: 60 D4    MOV   REG[0xD4],A        
0B12: 18       POP   A                  
0B13: 60 D5    MOV   REG[0xD5],A        
                                        (0272) 
                                        (0273) 
                                        (0274) 
                                        (0275) ; Common Exit Point
                                        (0276) USBFS_EP0_ISR_EXIT:
                                        (0277)     REG_RESTORE MVR_PP
                                        (0278)     REG_RESTORE MVW_PP
0B15: 20       POP   X                  (0279)     pop     X                           ;
                                        (0280) ;       mov  A, [USBFS_TempMode]
                                        (0281) ;       mov  reg[USBFS_EP0MODE], A
0B16: 18       POP   A                  (0282)     pop     A                           ; Restore Context
0B17: 7E       RETI                     (0283)     reti
                                        (0284) 
                                        (0285) 
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: USBFS_EP0_Setup
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:   Dispatch a USB SETUP
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292)  USBFS_EP0_Setup:
                                        (0293) _USBFS_EP0_Setup:
                                        (0294) ; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
0B18: 5D 56    MOV   A,REG[0x56]        (0295)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
0B1A: 60 56    MOV   REG[0x56],A        (0296)     mov     reg[USBFS_EP0MODE], A ; clear setup bit 
0B1C: 5D 56    MOV   A,REG[0x56]        (0297)     mov     A, reg[USBFS_EP0MODE]    ; (re)read register
0B1E: 21 80    AND   A,0x80             (0298)     and     A, 80h                              ; Check if SETUP bit is set
0B20: BF EE    JNZ   0x0B0F             (0299)     jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
0B22: 08       PUSH  A                  (0300)     push    A                          ; Save the mode register
0B23: 50 02    MOV   A,0x2              (0301)     mov     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
0B25: 91 F3    CALL  0x0D1A             (0302)     call    USBFS_UpdateStatusBlock
0B27: 18       POP   A                  (0303)     pop     A                          ; Restore the mode register
0B28: 5D 57    MOV   A,REG[0x57]        (0304)     mov     A, reg[USBFS_EP0CNT]             ; Get the count reg
0B2A: 39 4A    CMP   A,0x4A             (0305)     cmp     A, (USB_CNT_VALID | 0x0A)
0B2C: A0 03    JZ    0x0B30             (0306)     jz      .dispatch
                                        (0307) 
0B2E: 82 5B    JMP   0x0D8A             (0308)     jmp     USBFS_Not_Supported_Local_Drv
                                        (0309) 
                                        (0310) 
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ; Jump here to dispatch the request
                                        (0313) ; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
                                        (0314) ; 7, 6, 5, 1, 0 determine what the request is. Bits [2:4] are default to zero. The below code
                                        (0315) ; re-organizes [bmRequestType] to the following format:
                                        (0316) ; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
                                        (0317) ; "re-organization", the firmware will jump to an appropriate table to handle the request.
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) .dispatch:
0B30: 5D 58    MOV   A,REG[0x58]        (0320)     mov     A, reg[USBFS_EP0DATA+bmRequestType]   ; Get bmRequestType
0B32: 21 E3    AND   A,0xE3             (0321)     and     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
0B34: 08       PUSH  A                  (0322)     push    A                                ; store value on the stack
0B35: 67       ASR   A                  (0323)     asr     A                                ; move bits 7-6-5 into 4-3-2's place
0B36: 67       ASR   A                  (0324)     asr     A                                ; "asr" instruction shift all bits one place to the right.
0B37: 67       ASR   A                  (0325)     asr     A                                ; Bit7 remains the same.
0B38: 53 20    MOV   [0x20],A           (0326)     mov     [USBFS_t2], A                    ; store shifted value
0B3A: 18       POP   A                  (0327)     pop     A                                ; get original value
0B3B: 2A 20    OR    A,[0x20]           (0328)     or      A, [USBFS_t2]                    ; or the two to get the 5-bit field
0B3D: 21 1F    AND   A,0x1F             (0329)     and     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
                                        (0330)                                              ; Bit0 is loaded with a Zero. This results in multiplying
                                        (0331)                                              ; the accumulator by 2, and the reason to mutiply it by 2
                                        (0332)                                              ; is that each "jmp" instruction in the tables is two bytes long.
                                        (0333) 
0B3F: 7D 0D 81 LJMP  USBFS_bmRequestType_Dispatch(0334)     ljmp    USBFS_bmRequestType_Dispatch
                                        (0335) 
                                        (0336) 
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;  FUNCTION NAME: USBFS_EP0_IN
                                        (0339) ;
                                        (0340) ;  DESCRIPTION: Handles an IN request.  Depending on the state of the
                                        (0341) ;               enumeration sequence it decides what to do next
                                        (0342) ;
                                        (0343) ;-----------------------------------------------------------------------------
                                        (0344)  USBFS_EP0_IN:
                                        (0345) _USBFS_EP0_IN:
0B42: 5D 56    MOV   A,REG[0x56]        (0346)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
                                        (0347) ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
                                        (0348) ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
                                        (0349) ;    and     A, 80h                              ; Check if SETUP bit is set
                                        (0350) ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
0B44: 51 0C    MOV   A,[0xC]            (0351)     mov     A, [USBFS_TransferType]
                                        (0352) ;    call USBFS_ControlInDispatch
                                        (0353) ;    jmp  USBFS_EP0_ISR_EXIT                 ; And exit
                                        (0354) USBFS_ControlInDispatch:
0B46: E0 01    JACC  0x0B48             (0355)     jacc    USBFS_ControlInDispatchTable
                                        (0356) USBFS_ControlInDispatchTable:
0B48: 82 41    JMP   0x0D8A             (0357)     jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
0B4A: 80 39    JMP   0x0B84             (0358)     jmp     USBFS_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
0B4C: 80 B9    JMP   0x0C06             (0359)     jmp     USBFS_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
0B4E: 80 C4    JMP   0x0C13             (0360)     jmp     USBFS_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0361) 
                                        (0362) 
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: USBFS_EP0_OUT
                                        (0365) ;
                                        (0366) ;  DESCRIPTION: HANDles an OUT request.  Depending on the state of the
                                        (0367) ;               enumeration sequence it decides what to do next
                                        (0368) ;
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370)  USBFS_EP0_OUT:
                                        (0371) _USBFS_EP0_OUT:
0B50: 5D 56    MOV   A,REG[0x56]        (0372)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
                                        (0373) ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
                                        (0374) ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
                                        (0375) ;    and     A, 80h                              ; Check if SETUP bit is set
                                        (0376) ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
0B52: 51 0C    MOV   A,[0xC]            (0377)     mov     A, [USBFS_TransferType]
0B54: E0 01    JACC  0x0B56             (0378)     jacc    USBFS_ControlOutDispatchTable
                                        (0379) USBFS_ControlOutDispatchTable:
0B56: 82 33    JMP   0x0D8A             (0380)     jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
0B58: 80 2D    JMP   0x0B86             (0381)     jmp     USBFS_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
0B5A: 80 5E    JMP   0x0BB9             (0382)     jmp     USBFS_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
0B5C: 80 D0    JMP   0x0C2D             (0383)     jmp     USBFS_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0384) 
                                        (0385) 
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: USBFS_InitControlRead
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
                                        (0390) ;                 not called.  It assumes a tranfer descriptor has been loaded
                                        (0391) ;                 into the driver USBFS_CurrentTD data structure.
                                        (0392) ;
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394)  USBFS_InitControlRead:
                                        (0395) _USBFS_InitControlRead:
0B5E: 53 0B    MOV   [0xB],A            (0396)     mov     [USBFS_LastSize], A        ; Save the packet size?
0B60: 91 CE    CALL  0x0D30             (0397)     call    USBFS_InitializeStatusBlock
0B62: 55 0C 02 MOV   [0xC],0x2          (0398)     mov     [USBFS_TransferType], USB_TRANS_STATE_CONTROL_READ
                                        (0399) 
                                        (0400)     ; Check the transfer size against the request size
0B65: 5D 5F    MOV   A,REG[0x5F]        (0401)     mov     A, reg[USBFS_EP0DATA+wLengthHi]   ; MSB of wLength
0B67: 3A 16    CMP   A,[0x16]           (0402)     cmp     A, [USBFS_TransferSize]
0B69: B0 07    JNZ   0x0B71             (0403)     jnz     .L1
                                        (0404) 
0B6B: 5D 5E    MOV   A,REG[0x5E]        (0405)     mov     A, reg[USBFS_EP0DATA+wLengthLo]   ; LSB of wLength
0B6D: 3A 17    CMP   A,[0x17]           (0406)     cmp     A, [USBFS_TransferSize+1]
0B6F: A0 09    JZ    0x0B79             (0407)     jz      .L9
                                        (0408) .L1:
0B71: D0 07    JNC   0x0B79             (0409)     jnc     .L9
                                        (0410) ;
0B73: 53 17    MOV   [0x17],A           (0411)     mov    [USBFS_TransferSize+1], A   ;
0B75: 5D 5F    MOV   A,REG[0x5F]        (0412)     mov    A, reg[USBFS_EP0DATA+wLengthHi]   ;
0B77: 53 16    MOV   [0x16],A           (0413)     mov    [USBFS_TransferSize], A     ;
                                        (0414) .L9:
0B79: 55 1C 00 MOV   [0x1C],0x0         (0415)     mov    [USBFS_TransferByteCount], 0   ;
0B7C: 55 1D 00 MOV   [0x1D],0x0         (0416)     mov    [USBFS_TransferByteCount+1], 0   ;
                                        (0417) 
0B7F: 2E 1E 01 OR    [0x1E],0x1         (0418)     or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
0B82: 80 B4    JMP   0x0C37             (0419)     jmp    USBFS_LoadEndpoint          ;
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: USBFS_ControlReadDataStage
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:   This routine processes the data stage of a control read.  It
                                        (0424) ;                 must be JUMPed to, not called.  It assumes a tranfer descriptor
                                        (0425) ;                 has been loaded into the driver USBFS_CurrentTD
                                        (0426) ;                 data structure.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429)  USBFS_ControlReadDataStage:
0B84: 80 B2    JMP   0x0C37             (0430)     jmp     USBFS_LoadEndpoint
                                        (0431) 
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;  FUNCTION NAME: USBFS_ControlReadStatusStage
                                        (0434) ;
                                        (0435) ;  DESCRIPTION:   This routine processes the status stage of a control read.  It
                                        (0436) ;                 must be JUMPed to, not called.  It handles short or 0 packet
                                        (0437) ;                 It assumes a tranfer descriptor has been loaded into the
                                        (0438) ;                 driver USBFS_CurrentTD data structure.
                                        (0439) ;
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441)  USBFS_ControlReadStatusStage:
0B86: 51 0B    MOV   A,[0xB]            (0442)     mov    A, [USBFS_LastSize]         ; Get the number of bytes from the last transfer
0B88: 04 1D    ADD   [0x1D],A           (0443)     add    [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
0B8A: 0E 1C 00 ADC   [0x1C],0x0         (0444)     adc    [USBFS_TransferByteCount], 0   ;
0B8D: 50 01    MOV   A,0x1              (0445)     mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
0B8F: 91 89    CALL  0x0D1A             (0446)     call   USBFS_UpdateStatusBlock
0B91: 55 0C 00 MOV   [0xC],0x0          (0447)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE
0B94: 50 00    MOV   A,0x0              (0448)     mov    A, 0                        ; Count Register
0B96: 57 03    MOV   X,0x3              (0449)     mov    X, USB_MODE_STALL_IN_OUT
0B98: 8F 4E    JMP   USBFS_EP0_UPD_MODE_EXIT(0450)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0451) ;-----------------------------------------------------------------------------
                                        (0452) ;  FUNCTION NAME: USBFS_NoDataStageControlTransfer
                                        (0453) ;                 USBFS_InitNoDataStageControlTransfer
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:   This routine processes the status stage of a no data control
                                        (0456) ;                 write.  It must be JUMPed to, not called.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459)  USBFS_NoDataStageControlTransfer:
                                        (0460) _USBFS_InitNoDataStageControlTransfer:
                                        (0461)  USBFS_InitNoDataStageControlTransfer:
0B9A: 91 94    CALL  0x0D30             (0462)     call    USBFS_InitializeStatusBlock
                                        (0463) 
0B9C: 55 0C 06 MOV   [0xC],0x6          (0464)     mov    [USBFS_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0465) 
0B9F: 50 00    MOV   A,0x0              (0466)     mov    A, 0                        ; Count Register
0BA1: 57 06    MOV   X,0x6              (0467)     mov    X, USB_MODE_STATUS_IN_ONLY
0BA3: 8F 43    JMP   USBFS_EP0_UPD_MODE_EXIT(0468)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0469) 
                                        (0470) 
                                        (0471) ;-----------------------------------------------------------------------------
                                        (0472) ;  FUNCTION NAME: USBFS_InitControlWrite
                                        (0473) ;
                                        (0474) ;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
                                        (0475) ;                 to, not called.  It assumes a tranfer descriptor has been loaded
                                        (0476) ;                 into the driver USBFS_CurrentTD data structure.
                                        (0477) ;
                                        (0478) ;-----------------------------------------------------------------------------
                                        (0479)  USBFS_InitControlWrite:
                                        (0480) _USBFS_InitControlWrite:
0BA5: 51 15    MOV   A,[0x15]           (0481)     mov     A, [USBFS_DataSource]      ; Need to make sure the destination is not ROM
0BA7: 39 00    CMP   A,0x0              (0482)     cmp     A, USB_DS_ROM
0BA9: A1 E0    JZ    0x0D8A             (0483)     jz      USBFS_Not_Supported_Local_Drv
                                        (0484) 
0BAB: 91 83    CALL  0x0D30             (0485)     call    USBFS_InitializeStatusBlock
                                        (0486) 
0BAD: 55 0C 04 MOV   [0xC],0x4          (0487)     mov    [USBFS_TransferType], USB_TRANS_STATE_CONTROL_WRITE
                                        (0488) 
0BB0: 2E 1E 01 OR    [0x1E],0x1         (0489)     or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
                                        (0490) 
0BB3: 50 00    MOV   A,0x0              (0491)     mov    A, 0                        ; Count Register
0BB5: 57 0B    MOV   X,0xB              (0492)     mov    X, USB_MODE_ACK_OUT_STATUS_IN
0BB7: 8F 2F    JMP   USBFS_EP0_UPD_MODE_EXIT(0493)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0494) 
                                        (0495) 
                                        (0496) ;-----------------------------------------------------------------------------
                                        (0497) ;  FUNCTION NAME: USBFS_ControlWriteDataStage
                                        (0498) ;
                                        (0499) ;  DESCRIPTION:   This routine processes the data stage of a control
                                        (0500) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0501) ;                 tranfer descriptor has been loaded into the driver
                                        (0502) ;                 USBFS_CurrentTD data structure.
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505)  USBFS_ControlWriteDataStage:
0BB9: 36 1E 01 XOR   [0x1E],0x1         (0506)     xor    [USBFS_EP0DataToggle], 1    ; Update data toggle
                                        (0507) 
0BBC: 5D 57    MOV   A,REG[0x57]        (0508)     mov    A, reg[USBFS_EP0CNT]        ; Get the count
                                        (0509) 
0BBE: 21 0F    AND   A,0xF              (0510)     and     A, 0x0F
0BC0: 11 02    SUB   A,0x2              (0511)     sub     A, 2                       ; Count include the two byte checksum
                                        (0512) 
0BC2: 53 20    MOV   [0x20],A           (0513)     mov     [USBFS_t2], A              ; Assume we have room to receive the whole packet
                                        (0514) 
0BC4: 50 00    MOV   A,0x0              (0515)     mov     A, 0
0BC6: 3A 16    CMP   A,[0x16]           (0516)     cmp     A, [USBFS_TransferSize]    ; If the MSB has anything just use the count
0BC8: B0 07    JNZ   0x0BD0             (0517)     jnz     .L1
                                        (0518) 
0BCA: 51 20    MOV   A,[0x20]           (0519)     mov     A, [USBFS_t2]
0BCC: 3A 17    CMP   A,[0x17]           (0520)     cmp     A, [USBFS_TransferSize+1]    ;
0BCE: A0 06    JZ    0x0BD5             (0521)     jz      .L6
                                        (0522) .L1:
0BD0: C0 04    JC    0x0BD5             (0523)     jc      .L6
0BD2: 5F 20 17 MOV   [0x20],[0x17]      (0524)     mov     [USBFS_t2], [USBFS_TransferSize+1]
                                        (0525) 
                                        (0526) .L6:
0BD5: 51 20    MOV   A,[0x20]           (0527)     mov     A, [USBFS_t2]
0BD7: 14 17    SUB   [0x17],A           (0528)     sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
0BD9: 1E 16 00 SBB   [0x16],0x0         (0529)     sbb     [USBFS_TransferSize], 0    ;
                                        (0530) 
0BDC: 04 1D    ADD   [0x1D],A           (0531)     add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
0BDE: 0E 1C 00 ADC   [0x1C],0x0         (0532)     adc     [USBFS_TransferByteCount], 0   ;
                                        (0533) 
0BE1: 57 00    MOV   X,0x0              (0534)     mov     X, 0                       ; Start the index at 0
0BE3: 5D D5    MOV   A,REG[0xD5]        
0BE5: 08       PUSH  A                  
                                        (0535) 
                                        (0536) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0537)     REG_PRESERVE MVW_PP
0BE6: 51 18    MOV   A,[0x18]           (0538)     mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
0BE8: 60 D5    MOV   REG[0xD5],A        (0539)     mov     reg[MVW_PP], A
                                        (0540) ENDIF
                                        (0541) 
                                        (0542) .RAM_COPY:
0BEA: 5E 58    MOV   A,REG[X+0x58]      (0543)     mov     A, reg[X+USBFS_EP0DATA]    ; Get the data
0BEC: 3F 19    MVI   [0x19],A           (0544)     mvi     [USBFS_DataPtr+1], A       ; Store the data, bump the destination
                                        (0545) 
0BEE: 75       INC   X                  (0546)     inc     X                          ; Bump the destination offset
0BEF: 5B       MOV   A,X                (0547)     mov     A, X                       ; Are we done?
0BF0: 3A 20    CMP   A,[0x20]           (0548)     cmp     A, [USBFS_t2]
0BF2: CF F7    JC    0x0BEA             (0549)     jc      .RAM_COPY                  ; Not done
0BF4: 18       POP   A                  
0BF5: 60 D5    MOV   REG[0xD5],A        
                                        (0550) 
                                        (0551) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0552)     REG_RESTORE MVW_PP
                                        (0553) ENDIF
                                        (0554) 
0BF7: 50 00    MOV   A,0x0              (0555)     mov    A, 0                        ; Count Register
0BF9: 57 0B    MOV   X,0xB              (0556)     mov    X, USB_MODE_ACK_OUT_STATUS_IN
0BFB: 8E EB    JMP   USBFS_EP0_UPD_MODE_EXIT(0557)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0558) 
                                        (0559) ; Jump here on data toggle error
                                        (0560) .error:
0BFD: 55 0C 00 MOV   [0xC],0x0          (0561)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; This simply aborts the transfer
0C00: 50 00    MOV   A,0x0              (0562)     mov    A, 0                        ; Count Register
0C02: 57 03    MOV   X,0x3              (0563)     mov    X, USB_MODE_STALL_IN_OUT
0C04: 8E E2    JMP   USBFS_EP0_UPD_MODE_EXIT(0564)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0565) 
                                        (0566) 
                                        (0567) ;-----------------------------------------------------------------------------
                                        (0568) ;  FUNCTION NAME: USBFS_ControlWriteStatusStage
                                        (0569) ;
                                        (0570) ;  DESCRIPTION:   This routine processes the status stage of a control
                                        (0571) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0572) ;                 tranfer descriptor has been loaded into the driver
                                        (0573) ;                 USBFS_CurrentTD data structure.
                                        (0574) ;
                                        (0575) ;-----------------------------------------------------------------------------
                                        (0576)  USBFS_ControlWriteStatusStage:
0C06: 50 01    MOV   A,0x1              (0577)     mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
0C08: 91 10    CALL  0x0D1A             (0578)     call   USBFS_UpdateStatusBlock
0C0A: 55 0C 00 MOV   [0xC],0x0          (0579)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; The packet is done
0C0D: 50 00    MOV   A,0x0              (0580)     mov    A, 0                        ; Count Register
0C0F: 57 03    MOV   X,0x3              (0581)     mov    X, USB_MODE_STALL_IN_OUT
0C11: 8E D5    JMP   USBFS_EP0_UPD_MODE_EXIT(0582)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0583) 
                                        (0584) 
                                        (0585) ;-----------------------------------------------------------------------------
                                        (0586) ;  FUNCTION NAME: USBFS_NoDataControlStatusStage
                                        (0587) ;
                                        (0588) ;  DESCRIPTION:   This routine processes the status stage of a control
                                        (0589) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0590) ;                 tranfer descriptor has been loaded into the driver
                                        (0591) ;                 USBFS_CurrentTD data structure.
                                        (0592) ;
                                        (0593) ;                 USB Device Addressing happens here because we can't change
                                        (0594) ;                 the SIE Address before the Status IN is received.
                                        (0595) ;
                                        (0596) ;-----------------------------------------------------------------------------
                                        (0597)  USBFS_NoDataControlStatusStage:
0C13: 50 01    MOV   A,0x1              (0598)     mov     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
0C15: 91 03    CALL  0x0D1A             (0599)     call    USBFS_UpdateStatusBlock
                                        (0600)     ; Dispatch to the proper handler
0C17: 3C 1F 01 CMP   [0x1F],0x1         (0601)     cmp     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING
0C1A: B0 09    JNZ   0x0C24             (0602)     jnz     .L1
                                        (0603) 
                                        (0604)     ; USB ADDRESS CHANGE
0C1C: 51 0D    MOV   A,[0xD]            (0605)     mov     A, [USBFS_TransferBuffer]    ; Get the pending data
                                        (0606) 
0C1E: 29 80    OR    A,0x80             (0607)     or      A, USB_ADDR_ENABLE         ; Set the enable bit
0C20: 60 4A    MOV   REG[0x4A],A        (0608)     mov     reg[USBFS_ADDR], A         ; Update the SIE address
0C22: 80 01    JMP   0x0C24             (0609)     jmp     .EXIT
                                        (0610) .L1:
                                        (0611) 
                                        (0612) .EXIT:
0C24: 55 1F 00 MOV   [0x1F],0x0         (0613)     mov     [USBFS_fDataPending], 0    ; Clear data pending
                                        (0614) 
0C27: 50 00    MOV   A,0x0              (0615)     mov    A, 0                        ; Count Register
0C29: 57 06    MOV   X,0x6              (0616)     mov    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
0C2B: 8E BB    JMP   USBFS_EP0_UPD_MODE_EXIT(0617)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0618) 
                                        (0619) 
                                        (0620) ;-----------------------------------------------------------------------------
                                        (0621) ;  FUNCTION NAME: USBFS_NoDataControlError
                                        (0622) ;
                                        (0623) ;  DESCRIPTION:   This routine handles the condition when we expected a
                                        (0624) ;                 status IN, but receive an OUT
                                        (0625) ;
                                        (0626) ;-----------------------------------------------------------------------------
                                        (0627)  USBFS_NoDataControlError:
0C2D: 50 03    MOV   A,0x3              (0628)     mov    A, USB_XFER_ERROR           ; Return Transaction Error
0C2F: 90 E9    CALL  0x0D1A             (0629)     call   USBFS_UpdateStatusBlock
0C31: 50 00    MOV   A,0x0              (0630)     mov    A, 0                        ; Count Register
0C33: 57 03    MOV   X,0x3              (0631)     mov    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
0C35: 8E B1    JMP   USBFS_EP0_UPD_MODE_EXIT(0632)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0633) 
                                        (0634) 
                                        (0635) ;-----------------------------------------------------------------------------
                                        (0636) ;  FUNCTION NAME: USBFS_LoadEndpoint
                                        (0637) ;
                                        (0638) ;  DESCRIPTION: Moves data from either RAM or ROM - depending on the request
                                        (0639) ;               type and then places the appropriate number of bytes -
                                        (0640) ;               depending on the request size into the endpoint FIFO.
                                        (0641) ;               It finally sets up the endpoint to send data.
                                        (0642) ;
                                        (0643) USBFS_LoadEndpoint:
0C37: 51 0B    MOV   A,[0xB]            (0644)     mov     A, [USBFS_LastSize]        ; Get the number of bytes from the last transfer
0C39: 04 1D    ADD   [0x1D],A           (0645)     add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
0C3B: 0E 1C 00 ADC   [0x1C],0x0         (0646)     adc     [USBFS_TransferByteCount], 0   ;
0C3E: 51 16    MOV   A,[0x16]           (0647)     mov     A,  [USBFS_TransferSize]   ; Check to see if we have any
0C40: 2A 17    OR    A,[0x17]           (0648)     or      A,  [USBFS_TransferSize+1]   ;  more data to send
0C42: B0 0E    JNZ   0x0C51             (0649)     jnz     .cont                      ; Jump if we have to send more data
                                        (0650) 
                                        (0651) ; Flow here if there is no more data to send
0C44: 3C 0B 08 CMP   [0xB],0x8          (0652)     cmp     [USBFS_LastSize], 8        ; Was it a full packet?
0C47: A0 52    JZ    0x0C9A             (0653)     JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)
                                        (0654) 
                                        (0655) ; Flow here if we are entering the status stage
0C49: 50 00    MOV   A,0x0              (0656)     mov     A, 0                       ; Count Register
0C4B: 53 0B    MOV   [0xB],A            (0657)     mov     [USBFS_LastSize], A        ; Clear the byte count
0C4D: 57 02    MOV   X,0x2              (0658)     mov     X, USB_MODE_STATUS_OUT_ONLY   ; Only ACK the Status Out
0C4F: 8E 97    JMP   USBFS_EP0_UPD_MODE_EXIT(0659)     jmp     USBFS_EP0_UPD_MODE_EXIT
                                        (0660) 
                                        (0661) ; Jump here to determine how many bytes should we transfer
                                        (0662) .cont:
0C51: 3C 16 00 CMP   [0x16],0x0         (0663)     cmp     [USBFS_TransferSize], 0    ; Check the MSB
0C54: B0 0A    JNZ   0x0C5F             (0664)     jnz     .L1
                                        (0665) 
0C56: 3C 17 08 CMP   [0x17],0x8         (0666)     cmp     [USBFS_TransferSize+1], 8    ; Check the LSB
0C59: D0 05    JNC   0x0C5F             (0667)     jnc     .L1
                                        (0668) 
0C5B: 51 17    MOV   A,[0x17]           (0669)     mov     A, [USBFS_TransferSize+1]     ; Transfer all the remaing data
0C5D: 80 03    JMP   0x0C61             (0670)     jmp     .L3
                                        (0671) 
                                        (0672) .L1:
0C5F: 50 08    MOV   A,0x8              (0673)     mov     A, 8                       ; Just transfer the next 8 bytes
                                        (0674) 
                                        (0675) .L3:
                                        (0676) 
0C61: 14 17    SUB   [0x17],A           (0677)     sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
0C63: 1E 16 00 SBB   [0x16],0x0         (0678)     sbb     [USBFS_TransferSize], 0
0C66: 53 20    MOV   [0x20],A           (0679)     mov     [USBFS_t2], A              ; Save the count
0C68: 57 00    MOV   X,0x0              (0680)     mov     X, 0
                                        (0681) 
0C6A: 3C 15 00 CMP   [0x15],0x0         (0682)     cmp     [USBFS_DataSource], USB_DS_ROM    ; RAM or ROM copy?
0C6D: B0 17    JNZ   0x0C85             (0683)     jnz     .RAM_COPY
                                        (0684) 
                                        (0685) ; Copy data from a ROM source
                                        (0686) .ROM_COPY:
0C6F: 10       PUSH  X                  (0687)     push    X                          ; Save the destination offset
0C70: 51 18    MOV   A,[0x18]           (0688)     mov     A, [USBFS_DataPtr]         ; Get the transfer source MSB
0C72: 58 19    MOV   X,[0x19]           (0689)     mov     X, [USBFS_DataPtr+1]       ; Set the transfer source LSB
0C74: 76 19    INC   [0x19]             (0690)     inc     [USBFS_DataPtr+1]          ; Increment the data pointer
0C76: 0E 18 00 ADC   [0x18],0x0         (0691)     adc     [USBFS_DataPtr], 0         ;   MSB if necessary
                                        (0692) 
0C79: 28       ROMX                     (0693)     romx                               ; Get the data byte
                                        (0694) 
0C7A: 20       POP   X                  (0695)     pop     X                          ; Get the destination offset
0C7B: 61 58    MOV   REG[X+0x58],A      (0696)     mov     reg[X + USBFS_EP0DATA], A  ; Load the data
0C7D: 75       INC   X                  (0697)     inc     X                          ; Bump the destination offset
0C7E: 5B       MOV   A,X                (0698)     mov     A, X                       ; Are we done?
0C7F: 3A 20    CMP   A,[0x20]           (0699)     cmp     A, [USBFS_t2]
0C81: CF ED    JC    0x0C6F             (0700)     jc      .ROM_COPY                  ; Not done
0C83: 80 16    JMP   0x0C9A             (0701)     jmp     .START_TRANSFER            ; Otherwise go start the transfer
0C85: 5D D4    MOV   A,REG[0xD4]        
0C87: 08       PUSH  A                  
                                        (0702) 
                                        (0703) ; Copy data from a RAM source
                                        (0704) .RAM_COPY:
                                        (0705) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0706)     REG_PRESERVE MVR_PP
0C88: 51 18    MOV   A,[0x18]           (0707)     mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
0C8A: 60 D4    MOV   REG[0xD4],A        (0708)     mov     reg[MVR_PP], A
                                        (0709) ENDIF
                                        (0710) .CP1:
0C8C: 3E 19    MVI   A,[0x19]           (0711)     mvi     A, [USBFS_DataPtr+1]       ; Get the data, bump the source
                                        (0712) 
0C8E: 61 58    MOV   REG[X+0x58],A      (0713)     mov     reg[X +USBFS_EP0DATA], A   ; Load the data
0C90: 75       INC   X                  (0714)     inc     X                          ; Bump the destination offset
0C91: 5B       MOV   A,X                (0715)     mov     A, X                       ; Are we done?
0C92: 3A 20    CMP   A,[0x20]           (0716)     cmp     A, [USBFS_t2]
0C94: CF F7    JC    0x0C8C             (0717)     jc      .CP1                       ; Not done
0C96: 18       POP   A                  
0C97: 60 D4    MOV   REG[0xD4],A        
                                        (0718) 
                                        (0719) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0720)     REG_RESTORE MVR_PP
0C99: 5B       MOV   A,X                (0721)     mov     A, X                       ; Restore A
                                        (0722) ENDIF
                                        (0723) 
                                        (0724) ;; Set up the IN transfer count/mode/etc
                                        (0725) ;    A contains the byte count
                                        (0726) .START_TRANSFER:
0C9A: 53 0B    MOV   [0xB],A            (0727)     mov     [USBFS_LastSize], A        ; Save the packet size
                                        (0728) 
0C9C: 50 01    MOV   A,0x1              (0729)     mov     A, 1
0C9E: 22 1E    AND   A,[0x1E]           (0730)     and     A, [USBFS_EP0DataToggle]
0CA0: A0 03    JZ    0x0CA4             (0731)     jz      .BYPASS_T1
0CA2: 50 80    MOV   A,0x80             (0732)     mov     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle
                                        (0733) 
                                        (0734) .BYPASS_T1:
0CA4: 2A 0B    OR    A,[0xB]            (0735)     or      A, [USBFS_LastSize]
0CA6: 36 1E 01 XOR   [0x1E],0x1         (0736)     xor     [USBFS_EP0DataToggle], 1      ; Update the data toggle for next time
                                        (0737) 
0CA9: 57 0F    MOV   X,0xF              (0738)     mov     X, USB_MODE_ACK_IN_STATUS_OUT    ; Set the mode register
0CAB: 8E 3B    JMP   USBFS_EP0_UPD_MODE_EXIT(0739)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0740) 
                                        (0741) 
                                        (0742) ;-----------------------------------------------------------------------------
                                        (0743) ;  FUNCTION NAME: USBFS_GetTableEntry
                                        (0744) ;
                                        (0745) ;  DESCRIPTION: This function figures out based on the various bytes in the
                                        (0746) ;               setup packet where to get the data from or put the data to.
                                        (0747) ;               Transfer Data structures are defined each of the supported
                                        (0748) ;               control transfers, this function finds the right one and
                                        (0749) ;               saves it in the CurrentTD structure in RAM.  It then
                                        (0750) ;               calls InitControlRead or InitControlWrite to being the
                                        (0751) ;               transaction.
                                        (0752) ;
                                        (0753) ;-----------------------------------------------------------------------------
                                        (0754) export USBFS_GetTableEntry
                                        (0755) USBFS_GetTableEntry:
                                        (0756) 
0CAD: 75       INC   X                  (0757)     inc     X                          ; Point to the first table entry
0CAE: 09 00    ADC   A,0x0              (0758)     adc     A, 0                       ;
0CB0: 08       PUSH  A                  
0CB1: 65 20    ASL   [0x20]             
0CB3: 65 20    ASL   [0x20]             
0CB5: 65 20    ASL   [0x20]             
0CB7: 18       POP   A                  
                                        (0759) 
                                        (0760)     TD_INDEX_TO_OFFSET USBFS_t2 ; Convert the index
                                        (0761) 
0CB8: 4B       SWAP  A,X                (0762)     swap    A, X
0CB9: 02 20    ADD   A,[0x20]           (0763)     add     A, [USBFS_t2]
0CBB: 4B       SWAP  A,X                (0764)     swap    A, X
0CBC: 09 00    ADC   A,0x0              (0765)     adc     A, 0                       ; A:X now points to the descriptor table entry we want
                                        (0766) 
                                        (0767) ; Flow here to load the Transfer Descriptor (TD_ENTRY)
0CBE: 55 20 15 MOV   [0x20],0x15        (0768)     mov     [USBFS_t2], USBFS_CurrentTD    ; Use Temp as mvi pointer
0CC1: 90 26    CALL  USBFS_GETBYTE      (0769)     call     USBFS_GETBYTE             ; Get the descriptor data source
0CC3: 90 1C    CALL  USBFS_GETWORD      (0770)     call     USBFS_GETWORD             ; Get the descriptor size
0CC5: 90 1A    CALL  USBFS_GETWORD      (0771)     call     USBFS_GETWORD             ; Get the descriptor address
0CC7: 90 18    CALL  USBFS_GETWORD      (0772)     call     USBFS_GETWORD             ; Get the Status Pointer
                                        (0773) ; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
0CC9: 5D 58    MOV   A,REG[0x58]        (0774)     mov     A, reg[USBFS_EP0DATA+bmRequestType] ; Get bmRequestType
0CCB: 21 80    AND   A,0x80             (0775)     and     A, 0x80                         ; Control Read or Write
0CCD: A0 03    JZ    0x0CD1             (0776)     jz      .control_write
                                        (0777) 
0CCF: 8E 8E    JMP   _USBFS_InitControlRead(0778)     jmp     USBFS_InitControlRead
                                        (0779) 
                                        (0780) .control_write:
0CD1: 8E D3    JMP   _USBFS_InitControlWrite(0781)     jmp     USBFS_InitControlWrite
                                        (0782) 
                                        (0783) 
                                        (0784) ;-----------------------------------------------------------------------------
                                        (0785) ;  FUNCTION NAME: USBFS_LOOKUP
                                        (0786) ;
                                        (0787) ;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
                                        (0788) ;
                                        (0789) ;-----------------------------------------------------------------------------
                                        (0790) ;
                                        (0791) ;  ARGUMENTS:    A:X Point to the lookup table
                                        (0792) ;                USBFS_t2 contain the table index
                                        (0793) ;
                                        (0794) ;  RETURNS:      Address of the LT_ENTRY in A:X
                                        (0795) ;
                                        (0796) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0797) ;
                                        (0798) ;  THEORY of OPERATION or PROCEDURE:
                                        (0799) ;
                                        (0800) ;-----------------------------------------------------------------------------
                                        (0801) export USBFS_LOOKUP
                                        (0802) USBFS_LOOKUP:
0CD3: 75       INC   X                  (0803)     inc     X                          ; Point to the first table entry
0CD4: 09 00    ADC   A,0x0              (0804)     adc     A, 0                       ;
0CD6: 65 20    ASL   [0x20]             
0CD8: 65 20    ASL   [0x20]             
                                        (0805) 
                                        (0806)     LT_INDEX_TO_OFFSET USBFS_t2        ; Convert the index
0CDA: 4B       SWAP  A,X                (0807)     swap    A, X
0CDB: 02 20    ADD   A,[0x20]           (0808)     add     A, [USBFS_t2]              ;
0CDD: 4B       SWAP  A,X                (0809)     swap    A, X
0CDE: 09 00    ADC   A,0x0              (0810)     adc     A, 0
0CE0: 7F       RET                      (0811)     ret
                                        (0812) 
                                        (0813) 
                                        (0814) ;-----------------------------------------------------------------------------
                                        (0815) ;  FUNCTION NAME: USBFS_GETWORD/USBFS_GETBYTE
                                        (0816) ;
                                        (0817) ;  DESCRIPTION:    Get a word value from ROM
                                        (0818) ;
                                        (0819) ;-----------------------------------------------------------------------------
                                        (0820) ;
                                        (0821) ;  ARGUMENTS:    A:X is the ROM Address
                                        (0822) ;                USBFS_t2 is the destination address
                                        (0823) ;
                                        (0824) ;  RETURNS:      USBFS_t1
                                        (0825) ;
                                        (0826) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0827) ;                USES USBFS_t2
                                        (0828) ;                A:X points to the subsequent locaction ROM location
                                        (0829) ;  THEORY of OPERATION or PROCEDURE:
                                        (0830) ;
                                        (0831) ;-----------------------------------------------------------------------------
                                        (0832) export USBFS_GETWORD
                                        (0833) USBFS_GETWORD:
                                        (0834) 
0CE1: 08       PUSH  A                  (0835)     push    A                          ; Don't loose the pointer MSB
0CE2: 28       ROMX                     (0836)     romx                               ; Data source flag
0CE3: 3F 20    MVI   [0x20],A           (0837)     mvi     [USBFS_t2], A              ; Save the data source
0CE5: 18       POP   A                  (0838)     pop     A                          ; Get the MSB back
0CE6: 75       INC   X                  (0839)     inc     X                          ; Point to the next  entry
0CE7: 09 00    ADC   A,0x0              (0840)     adc     A, 0                       ;
                                        (0841) 
                                        (0842) export USBFS_GETBYTE
                                        (0843) USBFS_GETBYTE:
                                        (0844) 
0CE9: 08       PUSH  A                  (0845)     push    A                          ; Don't loose the pointer MSB
0CEA: 28       ROMX                     (0846)     romx                               ; Data source flag
0CEB: 3F 20    MVI   [0x20],A           (0847)     mvi     [USBFS_t2], A              ; Save the data source
0CED: 18       POP   A                  (0848)     pop     A                          ; Get the MSB back
0CEE: 75       INC   X                  (0849)     inc     X                          ; Point to the next  entry
0CEF: 09 00    ADC   A,0x0              (0850)     adc     A, 0                       ;
0CF1: 7F       RET                      (0851)     ret
                                        (0852) 
                                        (0853) 
                                        (0854) ;-----------------------------------------------------------------------------
                                        (0855) ;  FUNCTION NAME: USBFS_GET_DEVICE_TABLE_ENTRY
                                        (0856) ;
                                        (0857) ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
                                        (0858) ;                  Not intended for use by C fucntions
                                        (0859) ;
                                        (0860) ;-----------------------------------------------------------------------------
                                        (0861) ;
                                        (0862) ;  ARGUMENTS:
                                        (0863) ;
                                        (0864) ;  RETURNS:        A:X points the the current DEVICE_TABLE entry
                                        (0865) ;                  Carry flag is set if the current device index is out of range
                                        (0866) ;
                                        (0867) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0868) ;
                                        (0869) ;  THEORY of OPERATION or PROCEDURE:
                                        (0870) ;
                                        (0871) ;-----------------------------------------------------------------------------
                                        (0872) export USBFS_GET_DEVICE_TABLE_ENTRY
                                        (0873) USBFS_GET_DEVICE_TABLE_ENTRY:
0CF2: 5F 20 00 MOV   [0x20],[0x0]       (0874)     mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector
                                        (0875) 
0CF5: 50 01    MOV   A,0x1              (0876)     mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
0CF7: 57 C6    MOV   X,0xC6             (0877)     mov     X, <USBFS_DEVICE_LOOKUP    ; Get the ROM Address LSB
0CF9: 28       ROMX                     (0878)     romx                               ; First entry is the table size (only a byte)
0CFA: 3A 20    CMP   A,[0x20]           (0879)     cmp     A, [USBFS_t2]              ; Range check
0CFC: 50 01    MOV   A,0x1              (0880)     mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
0CFE: C0 03    JC    0x0D02             (0881)     jc      .exit
                                        (0882) ; Flow here if the index is valid
0D00: 9F D1    CALL  USBFS_LOOKUP       (0883)     call    USBFS_LOOKUP               ; Look up the configuration
                                        (0884) ; Jump or flow here on exit
                                        (0885) .exit:
0D02: 7F       RET                      (0886)     ret
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;  FUNCTION NAME: USBFS_GET_CONFIG_TABLE_ENTRY
                                        (0891) ;
                                        (0892) ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
                                        (0893) ;                  Not intended fOR use by C fucntions
                                        (0894) ;                  Does not do range checking on
                                        (0895) ;
                                        (0896) ;-----------------------------------------------------------------------------
                                        (0897) ;
                                        (0898) ;  ARGUMENTS:
                                        (0899) ;
                                        (0900) ;  RETURNS:        A:X points the the current CONFIG_TABLE entry
                                        (0901) ;                  Carry flag is set if the current device index is out of range
                                        (0902) ;
                                        (0903) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0904) ;
                                        (0905) ;  THEORY of OPERATION or PROCEDURE:
                                        (0906) ;
                                        (0907) ;-----------------------------------------------------------------------------
                                        (0908) export USBFS_GET_CONFIG_TABLE_ENTRY
                                        (0909) USBFS_GET_CONFIG_TABLE_ENTRY:
0D03: 9F ED    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0910)     call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
0D05: 55 20 21 MOV   [0x20],0x21        (0911)     mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
0D08: 9F D7    CALL  USBFS_GETWORD      (0912)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0913)                                        ; ITempW has the address
0D0A: 5D 5A    MOV   A,REG[0x5A]        (0914)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
0D0C: 53 20    MOV   [0x20],A           (0915)     mov     [USBFS_t2], A              ; Save it
0D0E: 51 21    MOV   A,[0x21]           (0916)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
0D10: 58 22    MOV   X,[0x22]           (0917)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
                                        (0918) 
                                        (0919) ; A:X Points to the CONFIG_LOOKUP, so get the current entry
0D12: 5F 20 01 MOV   [0x20],[0x1]       (0920)     mov     [USBFS_t2], [USBFS_Configuration]   ; Get the configuration number
0D15: 7A 20    DEC   [0x20]             (0921)     DEC     [USBFS_t2]                 ; We don't populate the 0th entry
0D17: 9F BA    CALL  USBFS_LOOKUP       (0922)     call    USBFS_LOOKUP               ; Look up the configuration
0D19: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) 
                                        (0926) ;-----------------------------------------------------------------------------
                                        (0927) ;  FUNCTION NAME: USBFS_UpdateStatusBlock
                                        (0928) ;
                                        (0929) ;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
                                        (0930) ;                  block is updated with the completion code from the
                                        (0931) ;                  argument (A) and the _TransferByteCount.
                                        (0932) ;
                                        (0933) ;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
                                        (0934) ;                  to make sure no other updates are made to the StatusBlock by
                                        (0935) ;                  the USB User Module.
                                        (0936) ;
                                        (0937) ;-----------------------------------------------------------------------------
                                        (0938) ;
                                        (0939) ;  ARGUMENTS:      A contains the Completion Status Code
                                        (0940) ;
                                        (0941) ;  RETURNS:        None
                                        (0942) ;
                                        (0943) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0944) ;
                                        (0945) ;  THEORY of OPERATION or PROCEDURE:
                                        (0946) ;
                                        (0947) ;-----------------------------------------------------------------------------
                                        (0948) USBFS_UpdateStatusBlock:
0D1A: 58 1B    MOV   X,[0x1B]           (0949)     mov     X, [USBFS_StatusBlockPtr + 1]   ;
0D1C: 4B       SWAP  A,X                (0950)     swap    A, X                       ; Don't loose the completion code
0D1D: 39 00    CMP   A,0x0              (0951)     cmp     A, 0                       ; NULL?
0D1F: A0 0F    JZ    0x0D2F             (0952)     jz      .done                      ; No update on NULL
                                        (0953) ; Flow here to update the VSR Completion Status Block
0D21: 4B       SWAP  A,X                (0954)     swap    A, X                       ; Completion code A, Pointer in X
0D22: 54 00    MOV   [X+0],A            (0955)     mov     [X + 0], A                 ; Update the completion Code
0D24: 51 1C    MOV   A,[0x1C]           (0956)     mov     A, [USBFS_TransferByteCount]   ; Actual Byte Count MSB
0D26: 54 01    MOV   [X+1],A            (0957)     mov     [X + 1], A
0D28: 51 1D    MOV   A,[0x1D]           (0958)     mov     A, [USBFS_TransferByteCount + 1]   ; Actual Byte Count LSB
0D2A: 54 02    MOV   [X+2],A            (0959)     mov     [X + 2], A
0D2C: 55 1B 00 MOV   [0x1B],0x0         (0960)     mov     [USBFS_StatusBlockPtr + 1], 0   ; Clear the Block Pointer
                                        (0961) .done:
0D2F: 7F       RET                      (0962)     ret                                ; All done
                                        (0963) 
                                        (0964) 
                                        (0965) ;-----------------------------------------------------------------------------
                                        (0966) ;  FUNCTION NAME: USBFS_InitializeStatusBlock
                                        (0967) ;
                                        (0968) ;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
                                        (0969) ;                  The completion code is set to USB_XFER_IDLE.
                                        (0970) ;
                                        (0971) ;-----------------------------------------------------------------------------
                                        (0972) ;
                                        (0973) ;  ARGUMENTS:      None
                                        (0974) ;
                                        (0975) ;  RETURNS:        None
                                        (0976) ;
                                        (0977) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0978) ;
                                        (0979) ;  THEORY of OPERATION or PROCEDURE:
                                        (0980) ;
                                        (0981) ;-----------------------------------------------------------------------------
                                        (0982) USBFS_InitializeStatusBlock:
0D30: 51 1B    MOV   A,[0x1B]           (0983)     mov     A, [USBFS_StatusBlockPtr + 1]   ;
0D32: 39 00    CMP   A,0x0              (0984)     cmp     A, 0                       ; NULL?
0D34: A0 0B    JZ    0x0D40             (0985)     jz      .done                      ; No update on NULL
                                        (0986) ; Flow here to initialize the Completion Status Block
0D36: 4B       SWAP  A,X                (0987)     swap    A, X                       ; Pointer in X
0D37: 56 00 00 MOV   [X+0],0x0          (0988)     mov     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0)
0D3A: 55 1C 00 MOV   [0x1C],0x0         (0989)     mov     [USBFS_TransferByteCount], 0   ; Clear the byte count
0D3D: 55 1D 00 MOV   [0x1D],0x0         (0990)     mov     [USBFS_TransferByteCount + 1], 0   ;
                                        (0991) .done:
0D40: 7F       RET                      (0992)     ret                                ; All done
0D41: 8A D1    JMP   USBFS_DT_h2d_std_dev_Dispatch
0D43: 8B 1A    JMP   USBFS_DT_h2d_std_ifc_Dispatch
0D45: 8B 68    JMP   USBFS_DT_h2d_std_ep_Dispatch
0D47: 80 42    JMP   0x0D8A             
0D49: 80 40    JMP   0x0D8A             
0D4B: 81 D4    JMP   USBFS_DT_h2d_cls_ifc_Dispatch
0D4D: 80 3C    JMP   0x0D8A             
0D4F: 80 3A    JMP   0x0D8A             
0D51: 80 38    JMP   0x0D8A             
0D53: 80 36    JMP   0x0D8A             
0D55: 80 34    JMP   0x0D8A             
0D57: 80 32    JMP   0x0D8A             
0D59: 80 30    JMP   0x0D8A             
0D5B: 80 2E    JMP   0x0D8A             
0D5D: 80 2C    JMP   0x0D8A             
0D5F: 80 2A    JMP   0x0D8A             
0D61: 8A 92    JMP   USBFS_DT_d2h_std_dev_Dispatch
0D63: 8A D0    JMP   USBFS_DT_d2h_std_ifc_Dispatch
0D65: 8B 24    JMP   USBFS_DT_d2h_std_ep_Dispatch
0D67: 80 22    JMP   0x0D8A             
0D69: 80 20    JMP   0x0D8A             
0D6B: 81 CE    JMP   USBFS_DT_d2h_cls_ifc_Dispatch
0D6D: 80 1C    JMP   0x0D8A             
0D6F: 80 1A    JMP   0x0D8A             
0D71: 80 18    JMP   0x0D8A             
0D73: 80 16    JMP   0x0D8A             
0D75: 80 14    JMP   0x0D8A             
0D77: 80 12    JMP   0x0D8A             
0D79: 80 10    JMP   0x0D8A             
0D7B: 80 0E    JMP   0x0D8A             
0D7D: 80 0C    JMP   0x0D8A             
0D7F: 80 0A    JMP   0x0D8A             
0D81: 39 20    CMP   A,0x20             
0D83: D0 04    JNC   0x0D88             
0D85: 64       ASL   A                  
0D86: EF BA    JACC  USBFS_DT_bmRequestType
0D88: 80 01    JMP   0x0D8A             
                                        (0993) 
                                        (0994) 
                                        (0995) ;-----------------------------------------------------------------------------
                                        (0996) ;  FUNCTION NAME: ;  USB 1st Tier Dispactch Jump Table (based on bmRequestType)
                                        (0997) ;
                                        (0998) ;  DESCRIPTION:
                                        (0999) ;
                                        (1000) ;-----------------------------------------------------------------------------
                                        (1001) ;
                                        (1002) ;  ARGUMENTS:
                                        (1003) ;
                                        (1004) ;  RETURNS:
                                        (1005) ;
                                        (1006) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1007) ;
                                        (1008) ;  THEORY of OPERATION or PROCEDURE:
                                        (1009) ;
                                        (1010) ;-----------------------------------------------------------------------------
                                        (1011) MACRO BMREQUEST_DISPATCH
                                        (1012) IF (USB_CB_@0_@1_@2 & 1)
                                        (1013)     jmp     USBFS_DT_@0_@1_@2_Dispatch
                                        (1014) ELSE
                                        (1015)     jmp     USBFS_Not_Supported_Local_Drv
                                        (1016) ENDIF
                                        (1017) ENDM
                                        (1018) 
                                        (1019) USBFS_DT_bmRequestType::
                                        (1020)     BMREQUEST_DISPATCH    h2d, std, dev
                                        (1021)     BMREQUEST_DISPATCH    h2d, std, ifc
                                        (1022)     BMREQUEST_DISPATCH    h2d, std, ep
                                        (1023)     BMREQUEST_DISPATCH    h2d, std, oth
                                        (1024)     BMREQUEST_DISPATCH    h2d, cls, dev
                                        (1025)     BMREQUEST_DISPATCH    h2d, cls, ifc
                                        (1026)     BMREQUEST_DISPATCH    h2d, cls, ep
                                        (1027)     BMREQUEST_DISPATCH    h2d, cls, oth
                                        (1028)     BMREQUEST_DISPATCH    h2d, vnd, dev
                                        (1029)     BMREQUEST_DISPATCH    h2d, vnd, ifc
                                        (1030)     BMREQUEST_DISPATCH    h2d, vnd, ep
                                        (1031)     BMREQUEST_DISPATCH    h2d, vnd, oth
                                        (1032)     BMREQUEST_DISPATCH    h2d, rsv, dev
                                        (1033)     BMREQUEST_DISPATCH    h2d, rsv, ifc
                                        (1034)     BMREQUEST_DISPATCH    h2d, rsv, ep
                                        (1035)     BMREQUEST_DISPATCH    h2d, rsv, oth
                                        (1036)     BMREQUEST_DISPATCH    d2h, std, dev
                                        (1037)     BMREQUEST_DISPATCH    d2h, std, ifc
                                        (1038)     BMREQUEST_DISPATCH    d2h, std, ep
                                        (1039)     BMREQUEST_DISPATCH    d2h, std, oth
                                        (1040)     BMREQUEST_DISPATCH    d2h, cls, dev
                                        (1041)     BMREQUEST_DISPATCH    d2h, cls, ifc
                                        (1042)     BMREQUEST_DISPATCH    d2h, cls, ep
                                        (1043)     BMREQUEST_DISPATCH    d2h, cls, oth
                                        (1044)     BMREQUEST_DISPATCH    d2h, vnd, dev
                                        (1045)     BMREQUEST_DISPATCH    d2h, vnd, ifc
                                        (1046)     BMREQUEST_DISPATCH    d2h, vnd, ep
                                        (1047)     BMREQUEST_DISPATCH    d2h, vnd, oth
                                        (1048)     BMREQUEST_DISPATCH    d2h, rsv, dev
                                        (1049)     BMREQUEST_DISPATCH    d2h, rsv, ifc
                                        (1050)     BMREQUEST_DISPATCH    d2h, rsv, ep
                                        (1051)     BMREQUEST_DISPATCH    d2h, rsv, oth
                                        (1052) USBFS_DT_End:
                                        (1053) USBFS_DT_Size: equ (USBFS_DT_End-USBFS_DT_bmRequestType) / 2
                                        (1054) USBFS_bmRequestType_Dispatch::
                                        (1055)     DISPATCHER USBFS_DT_bmRequestType, USBFS_DT_Size, USBFS_Not_Supported_Local_Drv
                                        (1056) 
                                        (1057) USBFS_Not_Supported_Local_Drv:
0D8A: 7D 07 C3 LJMP  USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(1058)     ljmp     USBFS_Not_Supported
                                        (1059) 
                                        (1060) 
                                        (1061) ;-----------------------------------------------
                                        (1062) ; Add custom application code for routines
                                        (1063) ;-----------------------------------------------
                                        (1064) 
                                        (1065)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (1066)    ;---------------------------------------------------
                                        (1067)    ; Insert your custom code below this banner
                                        (1068)    ;---------------------------------------------------
                                        (1069) 
                                        (1070)    ;---------------------------------------------------
                                        (1071)    ; Insert your custom code above this banner
                                        (1072)    ;---------------------------------------------------
                                        (1073)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (1074) 
                                        (1075) ; End of File USBFS_drv.asm
FILE: lib\usbfs_cls_hid.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0D8D: 70 BF    AND   F,0xBF             (0003) ;;  FILENAME: USBFS_cls_hid.asm
0D8F: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0004) ;;   Version: 2.10, Updated on 2015/3/4 at 22:27:56
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Human Interface Device (HID) Class request implemenatation
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API
                                        (0013) ;;        function returns. Even though these registers may be preserved now,
                                        (0014) ;;        there is no guarantee they will be preserved in future releases.
                                        (0015) ;;-----------------------------------------------------------------------------
                                        (0016) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0017) ;;*****************************************************************************
                                        (0018) ;;*****************************************************************************
                                        (0019) 
                                        (0020) include "m8c.inc"
                                        (0021) include "USBFS_macros.inc"
                                        (0022) include "USBFS.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) EXPORT USBFS_UpdateHIDTimer
                                        (0029) EXPORT _USBFS_UpdateHIDTimer
                                        (0030) EXPORT USBFS_bGetProtocol
                                        (0031) EXPORT _USBFS_bGetProtocol
                                        (0032) ;export of the following items allows an application to initialize the data
                                        (0033) ; if necessary, possibly on reboot or other programatic events (usb reset).
                                        (0034) ; USBFS_Protocol is the variable controling boot/report mode for 
                                        (0035) ; HID devices.
                                        (0036) EXPORT  _USBFS_IdleReload    ; Idle Timer Reload Value
                                        (0037) EXPORT   USBFS_IdleReload    ; Idle Timer Reload Value
                                        (0038) EXPORT  _USBFS_Protocol	  ; Active Protocol
                                        (0039) EXPORT   USBFS_Protocol    ; Active Protocol
                                        (0040) 
                                        (0041) AREA InterruptRAM (RAM,REL,CON)
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  Constant Definitions
                                        (0044) ;-----------------------------------------------
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) ;----------------------------------------------------------------------------
                                        (0049) ; Interface Setting
                                        (0050) ;----------------------------------------------------------------------------
                                        (0051)   USBFS_IdleReload:
                                        (0052)  _USBFS_IdleReload:                     BLK   3h    ; Idle Timer Reload Value
                                        (0053)  USBFS_IdleTimer:                       BLK   3h    ; Idle Timers
                                        (0054)   USBFS_Protocol:   
                                        (0055)  _USBFS_Protocol:                       BLK   3h    ; Active Protocol
                                        (0056) 
                                        (0057) AREA UserModules (ROM, REL)
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: USBFS_bGetProtocol
                                        (0060) ;
                                        (0061) ;  DESCRIPTION:   Returns the selected protocol value to the application
                                        (0062) ;
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) ;  ARGUMENTS:    A: Interface number
                                        (0066) ;
                                        (0067) ;  RETURNS:      A: Protocol values
                                        (0068) ;
                                        (0069) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0070) ;
                                        (0071) ;  THEORY of OPERATION or PROCEDURE:
                                        (0072) ;
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;.SECTION
                                        (0075)  USBFS_bGetProtocol:
                                        (0076) _USBFS_bGetProtocol:
                                        (0077)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0078) 	RAM_SETPAGE_IDX >USBFS_Protocol
0D92: 5C       MOV   X,A                (0079)     mov  X, A                          ; Argument is the index
0D93: 52 76    MOV   A,[X+118]          (0080)     mov  A, [X + USBFS_Protocol] ; Return the protocol
0D95: 70 3F    AND   F,0x3F             
0D97: 71 C0    OR    F,0xC0             
                                        (0081) 	RAM_EPILOGUE RAM_USE_CLASS_3
0D99: 7F       RET                      (0082)     ret
0D9A: 70 BF    AND   F,0xBF             
0D9C: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0083) ;.ENDSECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: USBFS_UpdateHIDTimer
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:    Updates the HID report timer and reloads it if it expires
                                        (0088) ;
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:     A: Interface number
                                        (0092) ;
                                        (0093) ;  RETURNS:       A: USB_IDLE_TIMER_EXPIRED, if the timer is running and expired
                                        (0094) ;                    USB_IDLE_TIMER_RUNNING, if the timer is running
                                        (0095) ;                    USB_IDLE_TIMER_INDEFINITE, if the report should be made on change
                                        (0096) ;
                                        (0097) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0098) ;
                                        (0099) ;  THEORY of OPERATION or PROCEDURE:
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;.SECTION
                                        (0103)  USBFS_UpdateHIDTimer:
                                        (0104) _USBFS_UpdateHIDTimer:
                                        (0105)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0106) 	RAM_SETPAGE_IDX >USBFS_IdleReload
0D9F: 5C       MOV   X,A                (0107)     mov  X, A                          ; Make the argument the index
                                        (0108) ; Flow here to check if the timer is "indefinite"
0DA0: 3D 70 00 CMP   [X+112],0x0        (0109)     cmp	 [X + USBFS_IdleReload], 0     ; Indefinite?
0DA3: A0 13    JZ    0x0DB7             (0110)     jz   .indefinite                   ; Jump if Indefinite?
                                        (0111) ; Flow here to check the timers
0DA5: 7B 73    DEC   [X+115]            (0112)     DEC    [X + USBFS_IdleTimer]       ; Decrement the timer
0DA7: C0 08    JC    0x0DB0             (0113)     jc   .expired
                                        (0114) ; Flow here if the timer has not expired
0DA9: 50 02    MOV   A,0x2              (0115)     mov  A, USB_IDLE_TIMER_RUNNING     ; Return value (not expired)
0DAB: 70 3F    AND   F,0x3F             
0DAD: 71 C0    OR    F,0xC0             
                                        (0116) 	RAM_EPILOGUE RAM_USE_CLASS_3
0DAF: 7F       RET                      (0117)     ret                                ; Quick exit
                                        (0118) ; Jump here if the timer expired
                                        (0119) .expired:
0DB0: 52 70    MOV   A,[X+112]          (0120)     mov  A, [X + USBFS_IdleReload]     ; Reload the timer
0DB2: 54 73    MOV   [X+115],A          (0121)     mov  [X + USBFS_IdleTimer], A      ; 
0DB4: 50 01    MOV   A,0x1              (0122)     mov  A, USB_IDLE_TIMER_EXPIRED     ; Return value (expired)
0DB6: 7F       RET                      (0123)     ret                                ; Quick exit
                                        (0124) ; Jump here to make return "on change/indefinite"
                                        (0125) .indefinite:
0DB7: 50 00    MOV   A,0x0              (0126)     mov  A, USB_IDLE_TIMER_INDEFINITE  ; Return value (change/indefinite)
0DB9: 70 3F    AND   F,0x3F             
0DBB: 71 C0    OR    F,0xC0             
                                        (0127) 	RAM_EPILOGUE RAM_USE_CLASS_3
0DBD: 7F       RET                      (0128)     ret                                ; Exit
                                        (0129) ;.ENDSECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_06
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:   Get Interface Descriptor
                                        (0134) ;
                                        (0135) ;****************************************************************
                                        (0136) ; STANDARD INTERFACE IN REQUEST: Get_Interface_Descriptor
                                        (0137) ;****************************************************************
                                        (0138) ;
                                        (0139) ; bmRequestType   : (IN | STANDARD | INTERFACE)    = 81h
                                        (0140) ; bRequest        : GET_DESCRIPTOR                 = 06h    
                                        (0141) ; wValue          : DESCRIPTOR TYPE | INDEX        = xxxxh  
                                        (0142) ; wIndex          : INTERFACE                      = --xxh
                                        (0143) ; wLength         : DESCRIPTOR_LENGTH              = --xxh  
                                        (0144) ; 
                                        (0145) ; The GET_INTERFACE_DESCRIPTOR request returns the specified 
                                        (0146) ; descriptor if the descriptor exists. 
                                        (0147) ;
                                        (0148) ; The upper byte of request_value contains the descriptor type and 
                                        (0149) ; the lower byte contains the descriptor index. request_index 
                                        (0150) ; contains either 0000h or the Language ID. request_length contains 
                                        (0151) ; the descriptor length. The actual descriptor information is 
                                        (0152) ; transferred in subsequent data packets. 
                                        (0153) ;
                                        (0154) ; USB defines only a DEVICE recipient but the HID spec added 
                                        (0155) ; support for the INTERFACE recipient.
                                        (0156) ;
                                        (0157) ; Get Descriptor from an HID interface returns either HID, 
                                        (0158) ; REPORT, or PHYSICAL descriptors.
                                        (0159) ;
                                        (0160) ;****************************************************************
                                        (0161) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_UM_SUPPLIED)
                                        (0162) export  USBFS_CB_d2h_std_ifc_06
                                        (0163) USBFS_CB_d2h_std_ifc_06:
0DBE: 91 34    CALL  USBFS_GetInterfaceLookupTable(0164)     call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
0DC0: 08       PUSH  A                  (0165)     push  A                            ; Save the MSB
0DC1: 5D 5B    MOV   A,REG[0x5B]        (0166)     mov   A, REG[USBFS_EP0DATA+wValueHi] ; Get descriptor type
0DC3: 39 21    CMP   A,0x21             (0167)     cmp   A, DESCR_TYPE_HID_CLASS      ; HID Class descriptor?
0DC5: A0 0E    JZ    0x0DD4             (0168)     jz    .send_hid_class_descr
0DC7: 39 22    CMP   A,0x22             (0169)     cmp   A, DESCR_TYPE_HID_REPORT     ; HID Report descriptor?
0DC9: A0 04    JZ    0x0DCE             (0170)     jz    .send_hid_report_descr
                                        (0171) ; Jump or flow here if the request is not supported
                                        (0172) .not_supported:
0DCB: 18       POP   A                  (0173)     pop   A                            ; Restore the stack
0DCC: 81 7F    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0174)     jmp   USBFS_Not_Supported_Local_Hid
                                        (0175) ; Jump here to send the HID Report Descriptor
                                        (0176) .send_hid_report_descr:
0DCE: 18       POP   A                  (0177)     pop   A                            ; Restore the interface lookup table MSB
0DCF: 4B       SWAP  A,X                (0178)     swap  A, X                         ; Add the offset
0DD0: 01 02    ADD   A,0x2              (0179)     add   A, 2                         ; Point to the right table entry
0DD2: 80 05    JMP   0x0DD8             (0180)     jmp   .finish
                                        (0181) ; Jump here to send the HID Class Descriptor
                                        (0182) .send_hid_class_descr:
0DD4: 18       POP   A                  (0183)     pop   A                            ; Restore the interface lookup table MSB
0DD5: 4B       SWAP  A,X                (0184)     swap  A, X                         ; Add the offset
0DD6: 01 04    ADD   A,0x4              (0185)     add   A, 4                         ; Point to the right table entry
                                        (0186) ; Jump or flow here with A:X Pointing to the 
                                        (0187) .finish:
0DD8: 4B       SWAP  A,X                (0188)     swap  A, X                         ; Back where they belong
0DD9: 09 00    ADC   A,0x0              (0189)     adc   A, 0                         ; Don't forget the carry
0DDB: 55 20 21 MOV   [0x20],0x21        (0190)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0DDE: 9F 01    CALL  USBFS_GETWORD      (0191)     call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
                                        (0192)                                        ; ITempW has the address
                                        (0193) ; Get the interface number
0DE0: 5D 5C    MOV   A,REG[0x5C]        (0194)     mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
0DE2: 53 20    MOV   [0x20],A           (0195)     mov   [USBFS_t2], A                ; Save it for the call to LOOKUP
0DE4: 51 21    MOV   A,[0x21]           (0196)     mov   A, [USBFS_t1]                ; Get the transfer descriptor ROM Address MSB
0DE6: 58 22    MOV   X,[0x22]           (0197)     mov   X, [USBFS_t1+1]              ; Get the transfer descriptor ROM Address LSB
                                        (0198) 
0DE8: 81 66    JMP   0x0F4F             (0199)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0200) ELSE
                                        (0201) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_APP_SUPPLIED)
                                        (0202) export  USBFS_CB_d2h_std_ifc_06
                                        (0203) USBFS_CB_d2h_std_ifc_06:
                                        (0204)     LJMP    APP_USBFS_CB_d2h_std_ifc_06
                                        (0205) ENDIF
                                        (0206) ENDIF
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_01
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:   Get Report
                                        (0211) ;
                                        (0212) ;****************************************************************
                                        (0213) ; HID CLASS INTERFACE IN REQUEST: Get_Report   
                                        (0214) ;****************************************************************
                                        (0215) ;
                                        (0216) ; bmRequestType  : (IN | CLASS | INTERFACE)       = A1h
                                        (0217) ; bRequest       : GET_REPORT                     = 01h    
                                        (0218) ; wValue         : REPORT TYPE | REPORT ID        = xxxxh  
                                        (0219) ; wIndex         : INTERFACE                      = --xxh
                                        (0220) ; wLength        : REPORT LENGTH                  = --xxh  
                                        (0221) ; 
                                        (0222) ; The GET_REPORT request allows the host to receive a report from 
                                        (0223) ; a specific interface via the control pipe. 
                                        (0224) ;
                                        (0225) ;****************************************************************
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;
                                        (0232) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0233) ;
                                        (0234) ;  THEORY of OPERATION or PROCEDURE:
                                        (0235) ;
                                        (0236) ;-----------------------------------------------------------------------------
                                        (0237) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_UM_SUPPLIED)
                                        (0238) export  USBFS_CB_d2h_cls_ifc_01
                                        (0239) USBFS_CB_d2h_cls_ifc_01:
                                        (0240) 
0DEA: 90 90    CALL  USBFS_cls_hid_Find_Report(0241)     call    Find_Report
0DEC: 4B       SWAP  A,X                
0DED: B0 06    JNZ   0x0DF4             
0DEF: 4B       SWAP  A,X                
0DF0: A1 5B    JZ    USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...
0DF2: 80 02    JMP   0x0DF5             
0DF4: 4B       SWAP  A,X                
                                        (0242)     NULL_PTR_CHECK USBFS_Not_Supported_Local_Hid
                                        (0243)     
0DF5: 81 59    JMP   0x0F4F             (0244)     jmp     USBFS_GetTableEntry_Local_Hid
                                        (0245) ELSE
                                        (0246) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_APP_SUPPLIED)
                                        (0247) export  USBFS_CB_d2h_cls_ifc_01
                                        (0248) USBFS_CB_d2h_cls_ifc_01:
                                        (0249)     LJMP    APP_USBFS_CB_d2h_cls_ifc_01
                                        (0250) ENDIF
                                        (0251) ENDIF
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_02
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Get Idle
                                        (0256) ;
                                        (0257) ;****************************************************************
                                        (0258) ; HID CLASS INTERFACE IN REQUEST: Get_Idle
                                        (0259) ;****************************************************************
                                        (0260) ;
                                        (0261) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                                        (0262) ; bRequest       : GET_IDLE                       = 02h    
                                        (0263) ; wValue         : REPORT ID                      = 00xxh  
                                        (0264) ; wIndex         : INTERFACE                      = --xxh
                                        (0265) ; wLength        : Report Size                    = 0001h  
                                        (0266) ; 
                                        (0267) ; The GET_IDLE request reads the current idle rate for a given 
                                        (0268) ; input report on a specific interface. 
                                        (0269) ;
                                        (0270) ;****************************************************************
                                        (0271) ;-----------------------------------------------------------------------------
                                        (0272) ;
                                        (0273) ;  ARGUMENTS:
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;
                                        (0277) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0278) ;
                                        (0279) ;  THEORY of OPERATION or PROCEDURE:
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_UM_SUPPLIED)
                                        (0283) .LITERAL
                                        (0284) GetSetIdleTable:
                                        (0285)     TD_START_TABLE  3h                 ; One entry for each interface
                                        (0286)     TD_ENTRY        USB_DS_RAM, 1, USBFS_IdleReload,   NULL_PTR  ; Reuse the transfer buffer
                                        (0287)     TD_ENTRY        USB_DS_RAM, 1, USBFS_IdleReload+1, NULL_PTR  ; Reuse the transfer buffer
                                        (0288) .ENDLITERAL
                                        (0289) export  USBFS_CB_d2h_cls_ifc_02
                                        (0290) USBFS_CB_d2h_cls_ifc_02:
0E08: 5D 5A    MOV   A,REG[0x5A]        (0291)     mov   A, REG[USBFS_EP0DATA+wValueLo] ; Get the report number
0E0A: 39 00    CMP   A,0x0              (0292)     cmp   A, 0                         ; We don't support report by report idle
0E0C: B1 3F    JNZ   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0293)     jnz   USBFS_Not_Supported_Local_Hid
                                        (0294) 
0E0E: 5D 5C    MOV   A,REG[0x5C]        (0295)     mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
0E10: 39 03    CMP   A,0x3              (0296)     cmp   A, 3h                        ; We don't support report by report idle
0E12: D1 39    JNC   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0297)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0298) 
                                        (0299) 
0E14: 53 20    MOV   [0x20],A           (0300)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0E16: 50 0D    MOV   A,0xD              (0301)     mov   A,>GetSetIdleTable           ; Get the ROM Address MSB
0E18: 57 F7    MOV   X,0xF7             (0302)     mov   X,<GetSetIdleTable           ; Get the ROM Address LSB
                                        (0303)     
0E1A: 81 34    JMP   0x0F4F             (0304)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0305) ELSE
                                        (0306) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_APP_SUPPLIED)
                                        (0307) export  USBFS_CB_d2h_cls_ifc_02
                                        (0308) USBFS_CB_d2h_cls_ifc_02:
                                        (0309)     LJMP    APP_USBFS_CB_d2h_cls_ifc_02
                                        (0310) ENDIF
                                        (0311) ENDIF
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_03
                                        (0314) ;
                                        (0315) ;  DESCRIPTION:   Get Protocol
                                        (0316) ;
                                        (0317) ;****************************************************************
                                        (0318) ; HID CLASS INTERFACE IN REQUEST: Get_Protocol
                                        (0319) ;****************************************************************
                                        (0320) ;
                                        (0321) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                                        (0322) ; bRequest       : GET_PROTOCOL                   = 03h    
                                        (0323) ; wValue         : RESERVED                       = 0000h  
                                        (0324) ; wIndex         : INTERFACE                      = --xxh
                                        (0325) ; wLength        : SIZEOF_INTERFACE_PROTOCOL      = 0001h  
                                        (0326) ; 
                                        (0327) ; The GET_PROTOCOL request reads which protocol is currently 
                                        (0328) ; active.
                                        (0329) ;
                                        (0330) ;****************************************************************
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;
                                        (0333) ;  ARGUMENTS:
                                        (0334) ;
                                        (0335) ;  RETURNS:
                                        (0336) ;
                                        (0337) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_UM_SUPPLIED)
                                        (0343) .LITERAL
                                        (0344) GetProtocolTable:
                                        (0345)     TD_START_TABLE  2                  ; One entry for BOOT/One entry for REPORT
                                        (0346)     TD_ENTRY        USB_DS_ROM, 1, ROM_ZERO,   NULL_PTR  ; Simply use a a hard coded zero or one
                                        (0347)     TD_ENTRY        USB_DS_ROM, 1, ROM_ONE,    NULL_PTR  ; 
                                        (0348) ROM_ZERO:   DB  0
                                        (0349) ROM_ONE:    DB  1
                                        (0350) .ENDLITERAL
                                        (0351) export  USBFS_CB_d2h_cls_ifc_03
                                        (0352) USBFS_CB_d2h_cls_ifc_03:
0E2F: 5D 5C    MOV   A,REG[0x5C]        (0353)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0E31: 39 03    CMP   A,0x3              (0354)     cmp   A, 3h                        ; Range check
0E33: D1 18    JNC   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0355)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0356) 
0E35: 5C       MOV   X,A                (0357)     mov   X, A                         ; Get the protocol for the requested interface
0E36: 52 76    MOV   A,[X+118]          (0358)     mov   A, [X + USBFS_Protocol]      ; 
                                        (0359) 
0E38: 53 20    MOV   [0x20],A           (0360)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
                                        (0361) 
0E3A: 50 0E    MOV   A,0xE              (0362)     mov   A,>GetProtocolTable          ; Get the ROM Address MSB
0E3C: 57 1C    MOV   X,0x1C             (0363)     mov   X,<GetProtocolTable          ; Get the ROM Address LSB
                                        (0364)     
0E3E: 81 10    JMP   0x0F4F             (0365)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0366) ELSE
                                        (0367) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_APP_SUPPLIED)
                                        (0368) export  USBFS_CB_d2h_cls_ifc_03
                                        (0369) USBFS_CB_d2h_cls_ifc_03:
                                        (0370)     LJMP    APP_USBFS_CB_d2h_cls_ifc_03
                                        (0371) ENDIF
                                        (0372) ENDIF
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_09
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:   Set Report
                                        (0377) ;
                                        (0378) ;****************************************************************
                                        (0379) ; HID CLASS INTERFACE OUT REQUEST: Set_Report
                                        (0380) ;****************************************************************
                                        (0381) ;
                                        (0382) ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                                        (0383) ; bRequest        : SET_REPORT                     = 09h    
                                        (0384) ; wValue          : REPORT TYPE | REPORT ID        = xxxxh  
                                        (0385) ; wIndex          : INTERFACE                      = --xxh
                                        (0386) ; wLength         : REPORT LENGTH                  = --xxh  
                                        (0387) ; 
                                        (0388) ; The SET_REPORT request allows the host to send a report to the 
                                        (0389) ; device, possibly setting the state of input, output or feature 
                                        (0390) ; controls. 
                                        (0391) ;
                                        (0392) ;****************************************************************
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394) ;
                                        (0395) ;  ARGUMENTS:
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;
                                        (0399) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0400) ;
                                        (0401) ;  THEORY of OPERATION or PROCEDURE:
                                        (0402) ;
                                        (0403) ;-----------------------------------------------------------------------------
                                        (0404) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_UM_SUPPLIED)
                                        (0405) export  USBFS_CB_h2d_cls_ifc_09
                                        (0406) USBFS_CB_h2d_cls_ifc_09:
0E40: 90 3A    CALL  USBFS_cls_hid_Find_Report(0407)     CALL    Find_Report
0E42: 4B       SWAP  A,X                
0E43: B0 06    JNZ   0x0E4A             
0E45: 4B       SWAP  A,X                
0E46: A1 05    JZ    USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...
0E48: 80 02    JMP   0x0E4B             
0E4A: 4B       SWAP  A,X                
                                        (0408)     NULL_PTR_CHECK USBFS_Not_Supported_Local_Hid
                                        (0409)     
0E4B: 81 03    JMP   0x0F4F             (0410)     JMP     USBFS_GetTableEntry_Local_Hid
                                        (0411) ELSE
                                        (0412) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_APP_SUPPLIED)
                                        (0413) export  USBFS_CB_h2d_cls_ifc_09
                                        (0414) USBFS_CB_h2d_cls_ifc_09:
                                        (0415)     LJMP    APP_USBFS_CB_h2d_cls_ifc_09
                                        (0416) ENDIF
                                        (0417) ENDIF
                                        (0418) ;-----------------------------------------------------------------------------
                                        (0419) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_10
                                        (0420) ;
                                        (0421) ;  DESCRIPTION:   Set Idle
                                        (0422) ;
                                        (0423) ;****************************************************************
                                        (0424) ; HID CLASS INTERFACE OUT REQUEST: Set_Idle
                                        (0425) ;****************************************************************
                                        (0426) ;
                                        (0427) ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                                        (0428) ; bRequest        : SET_IDLE                       = 0Ah    
                                        (0429) ; wValue          : DURATION | REPORT ID           = xxxxh  
                                        (0430) ; wIndex          : INTERFACE                      = --xxh
                                        (0431) ; wLength         : ZERO                           = 0000h  
                                        (0432) ; 
                                        (0433) ; The SET_IDLE request silences a particular input report (or all 
                                        (0434) ; input reports) on a specific interface until a new event occurs 
                                        (0435) ; or the specified amount of time passes. 
                                        (0436) ;
                                        (0437) ;****************************************************************
                                        (0438) ; Note: This function does not support multiple reports per interface.
                                        (0439) ;****************************************************************
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441) ;
                                        (0442) ;  ARGUMENTS:
                                        (0443) ;
                                        (0444) ;  RETURNS:
                                        (0445) ;
                                        (0446) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0447) ;
                                        (0448) ;  THEORY of OPERATION or PROCEDURE:
                                        (0449) ;
                                        (0450) ;-----------------------------------------------------------------------------
                                        (0451) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_UM_SUPPLIED)
                                        (0452) export  USBFS_CB_h2d_cls_ifc_10
                                        (0453) USBFS_CB_h2d_cls_ifc_10:
0E4D: 5D 5A    MOV   A,REG[0x5A]        (0454)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the report number
0E4F: 39 00    CMP   A,0x0              (0455)     cmp   A, 0                         ; We don't support report by report idle
0E51: B0 FA    JNZ   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0456)     jnz   USBFS_Not_Supported_Local_Hid
                                        (0457) 
0E53: 5D 5C    MOV   A,REG[0x5C]        (0458)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0E55: 39 03    CMP   A,0x3              (0459)     cmp   A, 3h                        ; Range Check
0E57: D0 F4    JNC   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0460)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0461) 
0E59: 5C       MOV   X,A                (0462)     mov   X, A                         ; Interface Number becomes an index
                                        (0463) 
0E5A: 5D 5B    MOV   A,REG[0x5B]        (0464)     mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the duration
                                        (0465) 
0E5C: 54 70    MOV   [X+112],A          (0466)     mov   [X+USBFS_IdleReload], A      ; Save the reload immediately
0E5E: 39 00    CMP   A,0x0              (0467)     cmp   A, 0                         ; Is this request setting the duration to indefinite?
0E60: A0 06    JZ    0x0E67             (0468)     jz    .reload                      ; If so, reload the timer 
                                        (0469) 
                                        (0470)     ; Otherwise, we need to determine if we reset the current expiry
                                        (0471)     ; (HID Spec says to send the next report if we are within 4 ms (1 count)
                                        (0472)     ; of sending the next report
0E62: 3D 73 01 CMP   [X+115],0x1        (0473)     cmp   [X+USBFS_IdleTimer], 1       ; Within 4 ms?
0E65: A0 03    JZ    0x0E69             (0474)     jz    .done                        ; Jump to let the timer expire "naturally" 
                                        (0475) 
                                        (0476) ; Jump or Flow here to reload the timer
                                        (0477) .reload:
0E67: 54 73    MOV   [X+115],A          (0478)     mov   [x+USBFS_IdleTimer], A       ; Reload the timer
                                        (0479)             
                                        (0480) .done:
0E69: 8D 30    JMP   _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer|USBFS_InitNoDataStageControlTransfer(0481)     jmp   USBFS_NoDataStageControlTransfer
                                        (0482) ELSE
                                        (0483) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_APP_SUPPLIED)
                                        (0484) export  USBFS_CB_h2d_cls_ifc_10
                                        (0485) USBFS_CB_h2d_cls_ifc_10:
                                        (0486)     LJMP    APP_USBFS_CB_h2d_cls_ifc_10
                                        (0487) ENDIF
                                        (0488) ENDIF
                                        (0489) ;-----------------------------------------------------------------------------
                                        (0490) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_11
                                        (0491) ;
                                        (0492) ;  DESCRIPTION:   Set Idle
                                        (0493) ;
                                        (0494) ;****************************************************************
                                        (0495) ; HID CLASS INTERFACE OUT REQUEST: Set_Protocol
                                        (0496) ;****************************************************************
                                        (0497) ;
                                        (0498) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = 21h
                                        (0499) ; bRequest       : SET_PROTOCOL                   = 0Bh    
                                        (0500) ; wValue         : DURATION | REPORT ID           = xxxxh  
                                        (0501) ; wIndex         : PROTOCOL                       = --xxh
                                        (0502) ; wLength        : ZERO                           = 0000h  
                                        (0503) ; 
                                        (0504) ; The SET_PROTOCOL request switches between the boot protocol and 
                                        (0505) ; the report protocol (or vice versa). 
                                        (0506) ;
                                        (0507) ;****************************************************************
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;
                                        (0510) ;  ARGUMENTS:
                                        (0511) ;
                                        (0512) ;  RETURNS:
                                        (0513) ;
                                        (0514) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0515) ;
                                        (0516) ;  THEORY of OPERATION or PROCEDURE:
                                        (0517) ;
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_UM_SUPPLIED)
                                        (0520) export  USBFS_CB_h2d_cls_ifc_11
                                        (0521) USBFS_CB_h2d_cls_ifc_11:
0E6B: 5D 5C    MOV   A,REG[0x5C]        (0522)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0E6D: 39 03    CMP   A,0x3              (0523)     cmp   A, 3h                        ; Range check
0E6F: D0 DC    JNC   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0524)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0525) 
0E71: 5C       MOV   X,A                (0526)     mov   X, A                         ; Save the interface number
                                        (0527) 
0E72: 5D 5A    MOV   A,REG[0x5A]        (0528)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the protocol
0E74: 39 02    CMP   A,0x2              (0529)     cmp   A, (1+1)                     ; Must be zero or one
0E76: D0 D5    JNC   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0530)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0531) 
0E78: 54 76    MOV   [X+118],A          (0532)     mov   [X + USBFS_Protocol], A      ; Save the new protocol
                                        (0533) 
0E7A: 8D 1F    JMP   _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer|USBFS_InitNoDataStageControlTransfer(0534)     jmp   USBFS_NoDataStageControlTransfer
                                        (0535) ELSE
                                        (0536) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_APP_SUPPLIED)
                                        (0537) export  USBFS_CB_h2d_cls_ifc_11
                                        (0538) USBFS_CB_h2d_cls_ifc_11:
                                        (0539)     LJMP    APP_USBFS_CB_h2d_cls_ifc_11
                                        (0540) ENDIF
                                        (0541) ENDIF
                                        (0542) ;-----------------------------------------------------------------------------
                                        (0543) ;  FUNCTION NAME:   Find_Report
                                        (0544) ;
                                        (0545) ;  DESCRIPTION:     Scan the HID Report Tree and return a pointer to the 
                                        (0546) ;                   HID Report Transfer Descriptor (TD) or NULL
                                        (0547) ;                   This function is called in during the processing of
                                        (0548) ;                   GET_REPORT or SET_REPORT HID Class Requests.
                                        (0549) ;
                                        (0550) ;-----------------------------------------------------------------------------
                                        (0551) ;
                                        (0552) ;  ARGUMENTS:       
                                        (0553) ;
                                        (0554) ;  RETURNS:
                                        (0555) ;
                                        (0556) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0557) ;
                                        (0558) ;  THEORY of OPERATION or PROCEDURE:
                                        (0559) ;
                                        (0560) ;-----------------------------------------------------------------------------
                                        (0561) export USBFS_cls_hid_Find_Report
                                        (0562) USBFS_cls_hid_Find_Report:
                                        (0563) Find_Report:
0E7C: 90 76    CALL  USBFS_GetInterfaceLookupTable(0564)     call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
                                        (0565)     ; The first entry of the table point to the report table.
0E7E: 55 20 21 MOV   [0x20],0x21        (0566)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0E81: 9E 5E    CALL  USBFS_GETWORD      (0567)     call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
                                        (0568)                                        ; ITempW has the address
0E83: 5D 5C    MOV   A,REG[0x5C]        (0569)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0E85: 53 20    MOV   [0x20],A           (0570)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0E87: 51 21    MOV   A,[0x21]           (0571)     mov   A, [USBFS_t1]                ; Get the Table Address MSB
0E89: 58 22    MOV   X,[0x22]           (0572)     mov   X, [USBFS_t1+1]              ; Get the Table Address LSB
                                        (0573) 
0E8B: 65 20    ASL   [0x20]             (0574)     asl   [USBFS_t2] ; Convert the index to offset
                                        (0575) 
0E8D: 4B       SWAP  A,X                (0576)     swap  A, X
0E8E: 02 20    ADD   A,[0x20]           (0577)     add   A, [USBFS_t2]
0E90: 4B       SWAP  A,X                (0578)     swap  A, X
0E91: 09 00    ADC   A,0x0              (0579)     adc   A, 0                         ; A:X now points to the table entry we want
0E93: 71 40    OR    F,0x40             
0E95: 08       PUSH  A                  
0E96: 08       PUSH  A                  
0E97: 28       ROMX                     
0E98: 10       PUSH  X                  
0E99: 4F       MOV   X,SP               
0E9A: 54 FD    MOV   [X-3],A            
0E9C: 20       POP   X                  
0E9D: 18       POP   A                  
0E9E: 75       INC   X                  
0E9F: 09 00    ADC   A,0x0              
0EA1: 28       ROMX                     
0EA2: 5C       MOV   X,A                
0EA3: 18       POP   A                  
0EA4: 70 3F    AND   F,0x3F             
0EA6: 71 00    OR    F,0x0              
                                        (0580) 
                                        (0581) ; Get the pointer to the Report Type Table
                                        (0582)     GET_WORD
                                        (0583) 
                                        (0584) ; Dereference to the requested Report Type
0EA8: 08       PUSH  A                  (0585)     push  A                            ; Don't loose the pointer MSB
0EA9: 5D 5B    MOV   A,REG[0x5B]        (0586)     mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the Report Type
0EAB: 78       DEC   A                  (0587)     dec   A                            ; Make it 0 based
0EAC: 53 20    MOV   [0x20],A           (0588)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0EAE: 18       POP   A                  (0589)     pop   A                            ; Get the MSB back
0EAF: 08       PUSH  A                  (0590)     push  A                            ; Don't loose the pointer MSB
0EB0: 28       ROMX                     (0591)     romx                               ; Get the table size
0EB1: 3A 20    CMP   A,[0x20]           (0592)     cmp   A, [USBFS_t2]                ; Range check
0EB3: C0 3B    JC    0x0EEF             (0593)     jc    .not_supported_pop_1
                                        (0594)         
0EB5: 18       POP   A                  (0595)     pop   A                            ; Get the MSB back
0EB6: 75       INC   X                  (0596)     inc   X                            ; Point to the next  entry
0EB7: 09 00    ADC   A,0x0              (0597)     adc   A, 0                         ;
0EB9: 65 20    ASL   [0x20]             
0EBB: 65 20    ASL   [0x20]             
                                        (0598) 
                                        (0599)     LT_INDEX_TO_OFFSET USBFS_t2        ; Convert the index to offset
                                        (0600) 
0EBD: 4B       SWAP  A,X                (0601)     swap  A, X
0EBE: 02 20    ADD   A,[0x20]           (0602)     add   A, [USBFS_t2]
0EC0: 4B       SWAP  A,X                (0603)     swap  A, X
0EC1: 09 00    ADC   A,0x0              (0604)     adc   A, 0                         ; A:X now points to the table entry we want
0EC3: 71 40    OR    F,0x40             
0EC5: 08       PUSH  A                  
0EC6: 08       PUSH  A                  
0EC7: 28       ROMX                     
0EC8: 10       PUSH  X                  
0EC9: 4F       MOV   X,SP               
0ECA: 54 FD    MOV   [X-3],A            
0ECC: 20       POP   X                  
0ECD: 18       POP   A                  
0ECE: 75       INC   X                  
0ECF: 09 00    ADC   A,0x0              
0ED1: 28       ROMX                     
0ED2: 5C       MOV   X,A                
0ED3: 18       POP   A                  
0ED4: 70 3F    AND   F,0x3F             
0ED6: 71 00    OR    F,0x0              
0ED8: 4B       SWAP  A,X                
0ED9: B0 06    JNZ   0x0EE0             
0EDB: 4B       SWAP  A,X                
0EDC: A0 13    JZ    0x0EF0             
0EDE: 80 02    JMP   0x0EE1             
0EE0: 4B       SWAP  A,X                
                                        (0605) ; Get the pointer to the requested Report Table
                                        (0606)     GET_WORD                            ; A:X points to the 
                                        (0607) 
                                        (0608)     NULL_PTR_CHECK .not_supported      ; Null Table entries indicated not supported
                                        (0609) ; Dereference to the requested TRANSFER DESCRIPTOR
0EE1: 08       PUSH  A                  (0610)     push  A                            ; Don't loose the pointer MSB
0EE2: 5D 5A    MOV   A,REG[0x5A]        (0611)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the Report ID
0EE4: 53 20    MOV   [0x20],A           (0612)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0EE6: 18       POP   A                  (0613)     pop   A                            ; Get the MSB back
0EE7: 08       PUSH  A                  (0614)     push  A                            ; Don't loose the pointer MSB
0EE8: 28       ROMX                     (0615)     romx                               ; Get the table size
0EE9: 3A 20    CMP   A,[0x20]           (0616)     cmp   A, [USBFS_t2]                ; Range check
0EEB: C0 03    JC    0x0EEF             (0617)     jc    .not_supported_pop_1
                                        (0618)         
0EED: 18       POP   A                  (0619)     pop   A                            ; Get the MSB back
                                        (0620) 
0EEE: 7F       RET                      (0621)     ret                                ; Finished A:X point to the TD
                                        (0622) 
                                        (0623) .not_supported_pop_1:
0EEF: 18       POP   A                  (0624)     pop   A                            ; Restore the stack
                                        (0625) .not_supported:
0EF0: 50 00    MOV   A,0x0              (0626)     mov   A, 0                         ; Return a null pointer
0EF2: 5C       MOV   X,A                (0627)     mov   X, A                         ; 
0EF3: 7F       RET                      (0628)     ret
                                        (0629) 
                                        (0630) ;-----------------------------------------------------------------------------
                                        (0631) ;  FUNCTION NAME: USBFS_GetInterfaceLookupTable
                                        (0632) ;
                                        (0633) ;  DESCRIPTION:   Point to the interface lookup table
                                        (0634) ;
                                        (0635) ;-----------------------------------------------------------------------------
                                        (0636) ;
                                        (0637) ;  ARGUMENTS:
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;
                                        (0641) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0642) ;
                                        (0643) ;  THEORY of OPERATION or PROCEDURE:
                                        (0644) ;
                                        (0645) ;-----------------------------------------------------------------------------
                                        (0646) export  USBFS_GetInterfaceLookupTable
                                        (0647) USBFS_GetInterfaceLookupTable:
0EF4: 9E 0D    CALL  USBFS_GET_CONFIG_TABLE_ENTRY(0648)     call  USBFS_GET_CONFIG_TABLE_ENTRY ; Get the CONFIG_LOOKUP entry
0EF6: 4B       SWAP  A,X                (0649)     swap  A, X                         ; Second entry points to the HID_LOOKUP table
0EF7: 01 02    ADD   A,0x2              (0650)     add   A, 2                         ; So add two
0EF9: 4B       SWAP  A,X                (0651)     swap  A, X                         ; 
0EFA: 09 00    ADC   A,0x0              (0652)     adc   A, 0                         ; Don't forget the carry
0EFC: 55 20 21 MOV   [0x20],0x21        (0653)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0EFF: 9D E0    CALL  USBFS_GETWORD      (0654)     call  USBFS_GETWORD                ; Get the pointer to the HID_LOOKUP table
                                        (0655)                                        ; ITempW has the address
0F01: 51 21    MOV   A,[0x21]           (0656)     mov   A, [USBFS_t1]                ; Get the table address MSB
0F03: 58 22    MOV   X,[0x22]           (0657)     mov   X, [USBFS_t1+1]              ; Get the table address LSB
0F05: 7F       RET                      (0658)     ret
                                        (0659) 
                                        (0660) 
                                        (0661) 
                                        (0662) 
                                        (0663) ;-----------------------------------------------------------------------------
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665) ;  USB 2nd Tier Dispactch Jump Tables for HID Class Requests (based on bRequest)
                                        (0666) ;-----------------------------------------------------------------------------
                                        (0667) ;  FUNCTION NAME: ;  USB 2nd Tier Dispactch Jump Table
                                        (0668) ;
                                        (0669) ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
                                        (0670) ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
                                        (0671) ;
                                        (0672) ;-----------------------------------------------------------------------------
                                        (0673) ;
                                        (0674) ;  ARGUMENTS:
                                        (0675) ;
                                        (0676) ;  RETURNS:
                                        (0677) ;
                                        (0678) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0679) ;
                                        (0680) ;  THEORY of OPERATION or PROCEDURE:
                                        (0681) ;
                                        (0682) ;-----------------------------------------------------------------------------
                                        (0683) ;-----------------------------------------------------------------------------
                                        (0684) USBFS_DT_h2d_cls_ifc:
                                        (0685) ;-----------------------------------------------------------------------------
                                        (0686) 
0F06: 80 45    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0687)     jmp     USBFS_CB_h2d_cls_ifc_00
0F08: 80 43    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0688)     jmp     USBFS_CB_h2d_cls_ifc_01
0F0A: 80 41    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0689)     jmp     USBFS_CB_h2d_cls_ifc_02
0F0C: 80 3F    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0690)     jmp     USBFS_CB_h2d_cls_ifc_03
0F0E: 80 3D    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0691)     jmp     USBFS_CB_h2d_cls_ifc_04
0F10: 80 3B    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0692)     jmp     USBFS_CB_h2d_cls_ifc_05
0F12: 80 39    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0693)     jmp     USBFS_CB_h2d_cls_ifc_06
0F14: 80 37    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0694)     jmp     USBFS_CB_h2d_cls_ifc_07
0F16: 80 35    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0695)     jmp     USBFS_CB_h2d_cls_ifc_08
0F18: 8F 27    JMP   USBFS_CB_h2d_cls_ifc_09(0696)     jmp     USBFS_CB_h2d_cls_ifc_09
0F1A: 8F 32    JMP   USBFS_CB_h2d_cls_ifc_10(0697)     jmp     USBFS_CB_h2d_cls_ifc_10
0F1C: 8F 4E    JMP   USBFS_CB_h2d_cls_ifc_11(0698)     jmp     USBFS_CB_h2d_cls_ifc_11
0F1E: 80 2D    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0699)     jmp     USBFS_CB_h2d_cls_ifc_12
                                        (0700) 
                                        (0701) USBFS_DT_h2d_cls_ifc_End:
                                        (0702) USBFS_DT_h2d_cls_ifc_Size: equ (USBFS_DT_h2d_cls_ifc_End-USBFS_DT_h2d_cls_ifc) / 2
                                        (0703) USBFS_DT_h2d_cls_ifc_Dispatch::
0F20: 3C 01 00 CMP   [0x1],0x0          (0704)     CMP     [USBFS_Configuration], 0   ; Is the device configured?
0F23: B0 03    JNZ   0x0F27             (0705)     JNZ     .configured                ; Jump on configured
0F25: 80 26    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0706)     JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
                                        (0707) ; Jump here if the device is configured
                                        (0708) .configured:
0F27: 5D 59    MOV   A,REG[0x59]        (0709)     MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
0F29: 39 0D    CMP   A,0xD              
0F2B: D0 04    JNC   0x0F30             
0F2D: 64       ASL   A                  
0F2E: EF D7    JACC  0x0F06             
0F30: 80 1B    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...
                                        (0710)     DISPATCHER USBFS_DT_h2d_cls_ifc, USBFS_DT_h2d_cls_ifc_Size, USBFS_Not_Supported_Local_Hid 
                                        (0711) 
                                        (0712) ;-----------------------------------------------------------------------------
                                        (0713) USBFS_DT_d2h_cls_ifc:
                                        (0714) ;-----------------------------------------------------------------------------
                                        (0715) 
0F32: 80 19    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0716)     jmp     USBFS_CB_d2h_cls_ifc_00
0F34: 8E B5    JMP   USBFS_CB_d2h_cls_ifc_01(0717)     jmp     USBFS_CB_d2h_cls_ifc_01
0F36: 8E D1    JMP   USBFS_CB_d2h_cls_ifc_02(0718)     jmp     USBFS_CB_d2h_cls_ifc_02
0F38: 8E F6    JMP   USBFS_CB_d2h_cls_ifc_03(0719)     jmp     USBFS_CB_d2h_cls_ifc_03
                                        (0720) 
                                        (0721) USBFS_DT_d2h_cls_ifc_End:
                                        (0722) USBFS_DT_d2h_cls_ifc_Size: equ (USBFS_DT_d2h_cls_ifc_End-USBFS_DT_d2h_cls_ifc) / 2
                                        (0723) USBFS_DT_d2h_cls_ifc_Dispatch::
0F3A: 3C 01 00 CMP   [0x1],0x0          (0724)     CMP     [USBFS_Configuration], 0   ; Is the device configured?
0F3D: B0 03    JNZ   0x0F41             (0725)     JNZ     .configured                ; Jump on configured
0F3F: 80 0C    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...(0726)     JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
                                        (0727) ; Jump here if the device is configured
                                        (0728) .configured:
0F41: 5D 59    MOV   A,REG[0x59]        (0729)     MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
0F43: 39 04    CMP   A,0x4              
0F45: D0 04    JNC   0x0F4A             
0F47: 64       ASL   A                  
0F48: EF E9    JACC  0x0F32             
0F4A: 80 01    JMP   USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_03|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_00|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_08|...
                                        (0730)     DISPATCHER USBFS_DT_d2h_cls_ifc, USBFS_DT_d2h_cls_ifc_Size, USBFS_Not_Supported_Local_Hid 
                                        (0731) 
                                        (0732) IF (USB_CB_SRC_d2h_cls_ifc_00 & USB_NOT_SUPPORTED)
                                        (0733) export  USBFS_CB_d2h_cls_ifc_00
                                        (0734) USBFS_CB_d2h_cls_ifc_00:
                                        (0735) ENDIF
                                        (0736) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_NOT_SUPPORTED)
                                        (0737) export  USBFS_CB_d2h_cls_ifc_01
                                        (0738) USBFS_CB_d2h_cls_ifc_01:
                                        (0739) ENDIF
                                        (0740) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_NOT_SUPPORTED)
                                        (0741) export  USBFS_CB_d2h_cls_ifc_02
                                        (0742) USBFS_CB_d2h_cls_ifc_02:
                                        (0743) ENDIF
                                        (0744) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_NOT_SUPPORTED)
                                        (0745) export  USBFS_CB_d2h_cls_ifc_03
                                        (0746) USBFS_CB_d2h_cls_ifc_03:
                                        (0747) ENDIF
                                        (0748) IF (USB_CB_SRC_h2d_cls_ifc_00 & USB_NOT_SUPPORTED)
                                        (0749) export  USBFS_CB_h2d_cls_ifc_00
                                        (0750) USBFS_CB_h2d_cls_ifc_00:
                                        (0751) ENDIF
                                        (0752) IF (USB_CB_SRC_h2d_cls_ifc_01 & USB_NOT_SUPPORTED)
                                        (0753) export  USBFS_CB_h2d_cls_ifc_01
                                        (0754) USBFS_CB_h2d_cls_ifc_01:
                                        (0755) ENDIF
                                        (0756) IF (USB_CB_SRC_h2d_cls_ifc_02 & USB_NOT_SUPPORTED)
                                        (0757) export  USBFS_CB_h2d_cls_ifc_02
                                        (0758) USBFS_CB_h2d_cls_ifc_02:
                                        (0759) ENDIF
                                        (0760) IF (USB_CB_SRC_h2d_cls_ifc_03 & USB_NOT_SUPPORTED)
                                        (0761) export  USBFS_CB_h2d_cls_ifc_03
                                        (0762) USBFS_CB_h2d_cls_ifc_03:
                                        (0763) ENDIF
                                        (0764) IF (USB_CB_SRC_h2d_cls_ifc_04 & USB_NOT_SUPPORTED)
                                        (0765) export  USBFS_CB_h2d_cls_ifc_04
                                        (0766) USBFS_CB_h2d_cls_ifc_04:
                                        (0767) ENDIF
                                        (0768) IF (USB_CB_SRC_h2d_cls_ifc_05 & USB_NOT_SUPPORTED)
                                        (0769) export  USBFS_CB_h2d_cls_ifc_05
                                        (0770) USBFS_CB_h2d_cls_ifc_05:
                                        (0771) ENDIF
                                        (0772) IF (USB_CB_SRC_h2d_cls_ifc_06 & USB_NOT_SUPPORTED)
                                        (0773) export  USBFS_CB_h2d_cls_ifc_06
                                        (0774) USBFS_CB_h2d_cls_ifc_06:
                                        (0775) ENDIF
                                        (0776) IF (USB_CB_SRC_h2d_cls_ifc_07 & USB_NOT_SUPPORTED)
                                        (0777) export  USBFS_CB_h2d_cls_ifc_07
                                        (0778) USBFS_CB_h2d_cls_ifc_07:
                                        (0779) ENDIF
                                        (0780) IF (USB_CB_SRC_h2d_cls_ifc_08 & USB_NOT_SUPPORTED)
                                        (0781) export  USBFS_CB_h2d_cls_ifc_08
                                        (0782) USBFS_CB_h2d_cls_ifc_08:
                                        (0783) ENDIF
                                        (0784) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_NOT_SUPPORTED)
                                        (0785) export  USBFS_CB_h2d_cls_ifc_09
                                        (0786) USBFS_CB_h2d_cls_ifc_09:
                                        (0787) ENDIF
                                        (0788) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_NOT_SUPPORTED)
                                        (0789) export  USBFS_CB_h2d_cls_ifc_10
                                        (0790) USBFS_CB_h2d_cls_ifc_10:
                                        (0791) ENDIF
                                        (0792) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_NOT_SUPPORTED)
                                        (0793) export  USBFS_CB_h2d_cls_ifc_11
                                        (0794) USBFS_CB_h2d_cls_ifc_11:
                                        (0795) ENDIF
                                        (0796) IF (USB_CB_SRC_h2d_cls_ifc_12 & USB_NOT_SUPPORTED)
                                        (0797) export  USBFS_CB_h2d_cls_ifc_12
                                        (0798) USBFS_CB_h2d_cls_ifc_12:
                                        (0799) ENDIF
                                        (0800) 
                                        (0801) USBFS_Not_Supported_Local_Hid:
0F4C: 7D 07 C3 LJMP  USBFS_CB_d2h_std_ifc_07|USBFS_CB_d2h_std_ep_03|USBFS_CB_d2h_std_ep_12|USBFS_CB_d2h_std_ep_04|USBFS_CB_d2h_std_ep_05|USBFS_CB_d2h_std_ep_06|USBFS_CB_h2d_std_dev_08|USBFS_Not_Supported|USBFS_CB_h2d_std_dev_07|USBFS_CB_d2h_std_dev_07|USBFS_CB_d2h_std_ep_07|...(0802)     LJMP     USBFS_Not_Supported
                                        (0803) 
                                        (0804) USBFS_GetTableEntry_Local_Hid:
0F4F: 7D 0C AD LJMP  USBFS_GetTableEntry(0805)     LJMP     USBFS_GetTableEntry
                                        (0806) 
                                        (0807) ;-----------------------------------------------
                                        (0808) ; Add custom application code for routines 
                                        (0809) ; redefined by USB_APP_SUPPLIED in USB_HID.INC
                                        (0810) ;-----------------------------------------------
                                        (0811) 
                                        (0812)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0813)    ;---------------------------------------------------
                                        (0814)    ; Insert your custom code below this banner
                                        (0815)    ;---------------------------------------------------
                                        (0816) 
                                        (0817)    ;---------------------------------------------------
                                        (0818)    ; Insert your custom code above this banner
                                        (0819)    ;---------------------------------------------------
                                        (0820)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0821) 
                                        (0822) ; End of File USBFS_cls_hid.asm
FILE: lib\usbfs.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0F52: 70 BF    AND   F,0xBF             (0003) ;;*****************************************************************************
0F54: 62 D0 00 MOV   REG[0xD0],0x0      
0F57: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0004) ;;  FILENAME: USBFS.asm
                                        (0005) ;;   Version: 2.10, Updated on 2015/3/4 at 22:27:56
                                        (0006) ;;  Generated by PSoC Designer 5.4.3191
                                        (0007) ;;
                                        (0008) ;;  DESCRIPTION: USB Device User Module software implementation file
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) include "USBFS_macros.inc"
                                        (0026) include "USBFS.inc"
                                        (0027) IF 0x5 & 0x10000000
                                        (0028) PSOC_ERROR Please run the USB Setup Wizard.  Device Editor, Right Click the USB User Module
                                        (0029) ; This message will only appear if the USB Setup Wizard has not be run and the descriptors
                                        (0030) ; and associated data structures have been created.
                                        (0031) ; After running the USB Setup Wizard, you must also select the Config/Generate Application
                                        (0032) ; menu item from PSoC Designer in order to generate USB User Module data structures and
                                        (0033) ; descriptors.
                                        (0034) ENDIF
                                        (0035) ;-----------------------------------------------
                                        (0036) ;  Global Symbols
                                        (0037) ;-----------------------------------------------
                                        (0038) export  USBFS_Start
                                        (0039) export _USBFS_Start
                                        (0040) export  USBFS_Stop
                                        (0041) export _USBFS_Stop
                                        (0042) export  USBFS_bCheckActivity
                                        (0043) export _USBFS_bCheckActivity
                                        (0044) export  USBFS_bGetConfiguration
                                        (0045) export _USBFS_bGetConfiguration
                                        (0046) export  USBFS_bGetEPState
                                        (0047) export _USBFS_bGetEPState
                                        (0048) export  USBFS_wGetEPCount
                                        (0049) export _USBFS_wGetEPCount
                                        (0050) export  USBFS_LoadInEP
                                        (0051) export _USBFS_LoadInEP
                                        (0052) export  USBFS_LoadInISOCEP
                                        (0053) export _USBFS_LoadInISOCEP
                                        (0054) export  USBFS_EnableOutEP
                                        (0055) export _USBFS_EnableOutEP
                                        (0056) export  USBFS_EnableOutISOCEP
                                        (0057) export _USBFS_EnableOutISOCEP
                                        (0058) export  USBFS_DisableOutEP
                                        (0059) export _USBFS_DisableOutEP
                                        (0060) export  USBFS_bReadOutEP
                                        (0061) export _USBFS_bReadOutEP
                                        (0062) export  USBFS_Force
                                        (0063) export _USBFS_Force
                                        (0064) export  USBFS_bGetEPAckState
                                        (0065) export _USBFS_bGetEPAckState
                                        (0066) ;export USBFS_Suspend
                                        (0067) ;export _USBFS_Suspend
                                        (0068) ;export USBFS_Resume
                                        (0069) ;export _USBFS_Resume
                                        (0070) export  USBFS_bRWUEnabled
                                        (0071) export _USBFS_bRWUEnabled
                                        (0072) export  USBFS_SetPowerStatus
                                        (0073) export _USBFS_SetPowerStatus
                                        (0074) 
                                        (0075) AREA InterruptRAM (RAM, REL, CON)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  Constant Definitions
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) ;-----------------------------------------------
                                        (0081) ;  Variable Allocation
                                        (0082) ;-----------------------------------------------
                                        (0083) export USBFS_APITemp
                                        (0084)  USBFS_APITemp:                         BLK   2 ; Two bytes of temporary
                                        (0085)                                                 ; storage shared by the API
                                        (0086)                                                 ; functions
                                        (0087) export USBFS_APIEPNumber, _USBFS_APIEPNumber
                                        (0088) _USBFS_APIEPNumber:
                                        (0089)  USBFS_APIEPNumber:                    BLK   1 ; API storage for speed
                                        (0090) export USBFS_APICount, _USBFS_APICount
                                        (0091) _USBFS_APICount:
                                        (0092)  USBFS_APICount:                       BLK   1 ; API storage for speed
                                        (0093) 
                                        (0094) export USBFS_bActivity, _USBFS_bActivity
                                        (0095) _USBFS_bActivity:
                                        (0096)  USBFS_bActivity:                      BLK   1 ; Activity flag (Shared between the ISR and API)
                                        (0097) ;-----------------------------------------------
                                        (0098) ;  Constant Data Allocation
                                        (0099) ;-----------------------------------------------
                                        (0100) IF	(TOOLCHAIN & HITECH)
                                        (0101)   AREA lit (ROM,REL,CON)
                                        (0102) ELSE
                                        (0103)   AREA lit (ROM,REL,CON,LIT)
                                        (0104) ENDIF
                                        (0105) export USBFS_USB_EP_BIT_LOOKUP
                                        (0106) .LITERAL
                                        (0107) USBFS_USB_EP_BIT_LOOKUP:  ;
                                        (0108)     DB     01H                       ; EP0
                                        (0109)     DB     02H                       ; EP1
                                        (0110)     DB     04H                       ; EP2
                                        (0111)     DB     08H                       ; EP3
                                        (0112)     DB     010H                      ; EP4
                                        (0113) .ENDLITERAL
                                        (0114) 
                                        (0115) AREA UserModules (ROM, REL)
                                        (0116) 
                                        (0117) .SECTION
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: USBFS_Start
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:    Starts the USB User Module
                                        (0122) ;                    Sets the device selection
                                        (0123) ;                    Set the configuration to unconfigured
                                        (0124) ;                    Enables the SIE for Address 0
                                        (0125) ;                    Enables the USB pullup (D- for low speed, D+ for full speed)
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) ;  ARGUMENTS:    A is the desired device
                                        (0130) ;                X is the operation voltage
                                        (0131) ;
                                        (0132) ;  RETURNS:              Nothing
                                        (0133) ;
                                        (0134) ;  SIDE EFFECTS:
                                        (0135) ;    The A and X registers may be modified by this or future implementations
                                        (0136) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0137) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0138) ;    responsibility to perserve their values across calls to fastcall16
                                        (0139) ;    functions.
                                        (0140) ;
                                        (0141)  USBFS_Start:
                                        (0142) _USBFS_Start:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0144)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0145)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0146)     RAM_SETPAGE_IDX >USBFS_bCurrentDevice   ; Set the IDX_PP to the right page
0F5A: 10       PUSH  X                  (0147)     push    X
0F5B: 53 00    MOV   [0x0],A            (0148)     mov     [USBFS_bCurrentDevice], A  ; The app selects the desired device
                                        (0149) 
0F5D: 55 0C 00 MOV   [0xC],0x0          (0150)     mov     [USBFS_TransferType], USB_TRANS_STATE_IDLE   ; Transaction Idle State
0F60: 55 01 00 MOV   [0x1],0x0          (0151)     mov     [USBFS_Configuration], 0   ; Unconfigured
0F63: 55 02 00 MOV   [0x2],0x0          (0152)     mov     [USBFS_DeviceStatus], 0    ; Clears device status
                                        (0153) 
0F66: 55 1E 00 MOV   [0x1E],0x0         (0154)     mov     [USBFS_EPDataToggle], 0    ; Clear all EP data toggles
                                        (0155) 
0F69: 62 6C 00 MOV   REG[0x6C],0x0      (0156)     mov     reg[TMP_DR0], 0            ; EP1 start address in PMA space
0F6C: 62 6D 40 MOV   REG[0x6D],0x40     (0157)     mov     reg[TMP_DR1], 64           ; EP2 start address in PMA space
0F6F: 62 6E 80 MOV   REG[0x6E],0x80     (0158)     mov     reg[TMP_DR2], 128          ; EP3 start address in PMA space
0F72: 62 6F C0 MOV   REG[0x6F],0xC0     (0159)     mov     reg[TMP_DR3], 192          ; EP4 start address in PMA space
                                        (0160) 
                                        (0161) ;    mov     X, USB_MAX_EP_NUMBER      ; Set up loop to clear all of the endpoint data items
                                        (0162) ; Flow or jump here to clear the data for the next endpoint
                                        (0163) ;.loop:
                                        (0164) ;    mov     [X + USBFS_EPDataToggle], 0    ; Or in the toggle
                                        (0165) ;    dec     X                         ; Are we done?
                                        (0166) ;    jnz     .loop                     ; Jump to do another endpoint
                                        (0167) 
                                        (0168) IF (USBFS_CLASS & USB_CLASS_HID)
                                        (0169)     ; Initialize USBFS_Protocol variable to comply with HID 7.2.6 Set_Protocol Request: 
                                        (0170)     ; "When initialized, all devices default to report protocol." 
0F75: 57 02    MOV   X,0x2              (0171)     mov     X, 3-1                     ;number of interfaces -1 
                                        (0172) .loop:
0F77: 56 76 01 MOV   [X+118],0x1        (0173)     mov     [X + USBFS_Protocol], 1    ; Protocol = Report
0F7A: 79       DEC   X                  (0174)     dec     X                                ;Are we done?
0F7B: DF FB    JNC   0x0F77             (0175)     jnc     .loop                            ;Jump to do another interface
                                        (0176) ENDIF
                                        (0177) 
                                        (0178) ; Flow here to enable the SIE
                                        (0179) 
0F7D: 62 4A 80 MOV   REG[0x4A],0x80     (0180)     mov     reg[USBFS_ADDR], USB_ADDR_ENABLE   ; Enable Address 0
0F80: 62 4B 00 MOV   REG[0x4B],0x0      (0181)     mov     reg[USBFS_USBIO_CR0], USB_AUTO_DPDM
                                        (0182) 
                                        (0183) ; Set the Operating Voltage at which the chip will run
0F83: 18       POP   A                  (0184)     pop     A
0F84: 71 10    OR    F,0x10             
                                        (0185)     M8C_SetBank1
0F86: 60 C1    MOV   REG[0xC1],A        (0186)     mov     reg[USBFS_USB_CR1], A
0F88: 70 EF    AND   F,0xEF             
                                        (0187)     M8C_SetBank0
                                        (0188) ;   TODO
0F8A: 62 56 03 MOV   REG[0x56],0x3      (0189)     mov     reg[USBFS_EP0MODE], USB_MODE_STALL_IN_OUT   ; ACK Setup/Stall IN/OUT
0F8D: 43 DF 05 OR    REG[0xDF],0x5      
                                        (0190)     M8C_EnableIntMask USBFS_INT_REG, (USBFS_INT_RESET_MASK | USBFS_INT_EP0_MASK)
                                        (0191) 
                                        (0192) ;   Enable the pullup so we can start to rock and roll
0F90: 62 4C 04 MOV   REG[0x4C],0x4      (0193)     mov     reg[USBFS_USBIO_CR1], USB_PULLUP_ENABLE   ; Pullup D+
0F93: 70 3F    AND   F,0x3F             
0F95: 71 C0    OR    F,0xC0             
                                        (0194) 
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0196)     RAM_EPILOGUE RAM_USE_CLASS_4
0F97: 7F       RET                      (0197)     ret
0F98: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198) .ENDSECTION
                                        (0199) 
                                        (0200) .SECTION
                                        (0201) ;-----------------------------------------------------------------------------
                                        (0202) ;  FUNCTION NAME: USBFS_Stop
                                        (0203) ;
                                        (0204) ;  DESCRIPTION:
                                        (0205) ;
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;
                                        (0208) ;  ARGUMENTS: None
                                        (0209) ;
                                        (0210) ;  RETURNS:   Nothing
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;    The A and X registers may be modified by this or future implementations
                                        (0214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0216) ;    responsibility to perserve their values across calls to fastcall16
                                        (0217) ;    functions.
                                        (0218) ;
                                        (0219)  USBFS_Stop:
                                        (0220) _USBFS_Stop:
                                        (0221)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0222)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
0F9B: 50 00    MOV   A,0x0              (0223)     mov     A, 0
0F9D: 53 00    MOV   [0x0],A            (0224)     mov     [USBFS_bCurrentDevice], A  ; The app selects the desired device
                                        (0225) 
0F9F: 55 0C 00 MOV   [0xC],0x0          (0226)     mov     [USBFS_TransferType], USB_TRANS_STATE_IDLE   ; Transaction Idle State
0FA2: 53 01    MOV   [0x1],A            (0227)     mov     [USBFS_Configuration], A   ; Unconfigured
0FA4: 53 02    MOV   [0x2],A            (0228)     mov     [USBFS_DeviceStatus], A    ; Clears device status
0FA6: 60 4A    MOV   REG[0x4A],A        (0229)     mov     reg[USBFS_ADDR], A         ; Clear the addfress and Address 0
                                        (0230) 
0FA8: 41 4C FB AND   REG[0x4C],0xFB     (0231)     and     reg[USBFS_USBIO_CR1], ~USB_PULLUP_ENABLE   ; Release D-
0FAB: 41 DF 00 AND   REG[0xDF],0x0      
                                        (0232)     M8C_DisableIntMask USBFS_INT_REG, 0xff   ; Disable USB interrupts
                                        (0233) 
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_4
0FAE: 7F       RET                      (0235)     ret
0FAF: 71 10    OR    F,0x10             
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: USBFS_bCheckActivity
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;
                                        (0244) ;-----------------------------------------------------------------------------
                                        (0245) ;
                                        (0246) ;  ARGUMENTS: Nothing
                                        (0247) ;
                                        (0248) ;  RETURNS:   A is a flag that indicates bus activity
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS: ;    The A and X registers may be modified by this or future implementations
                                        (0251) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0252) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0253) ;    responsibility to perserve their values across calls to fastcall16
                                        (0254) ;    functions.
                                        (0255) ;
                                        (0256)  USBFS_bCheckActivity:
                                        (0257) _USBFS_bCheckActivity:
                                        (0258)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0259)     M8C_SetBank1
0FB1: 5D C1    MOV   A,REG[0xC1]        (0260)     mov    A, reg[USBFS_USB_CR1]       ; USB Activity bit indicates activity
0FB3: 21 04    AND   A,0x4              (0261)     and    A, USB_BUS_ACTIVITY         ; Activity?
0FB5: A0 08    JZ    0x0FBE             (0262)     jz     .no_activity                ; Jump on no activity?
                                        (0263) ; Flow here on bus activity
0FB7: 41 C1 FB AND   REG[0xC1],0xFB     (0264)     and    reg[USBFS_USB_CR1], ~USB_BUS_ACTIVITY    ; Clear the activity flag
0FBA: 50 01    MOV   A,0x1              (0265)     mov    A, 1                        ; Return true
0FBC: 80 03    JMP   0x0FC0             (0266)     jmp    .done
                                        (0267) ; Jump here on no activity
                                        (0268) .no_activity:
0FBE: 50 00    MOV   A,0x0              (0269)     mov    A, 0                        ; Return false
0FC0: 70 EF    AND   F,0xEF             
                                        (0270) ; Jump or flow here to clear the activity bit, then return
                                        (0271) .done:
                                        (0272)     M8C_SetBank0
                                        (0273)     RAM_EPILOGUE RAM_USE_CLASS_1
0FC2: 7F       RET                      (0274)     ret
0FC3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: USBFS_bGetConfiguration
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:   Returns the current configuration number
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:    None
                                        (0286) ;
                                        (0287) ;  RETURNS:      A contains the current configuration number
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS:
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296)  USBFS_bGetConfiguration:
                                        (0297) _USBFS_bGetConfiguration:
                                        (0298)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0299)     RAM_SETPAGE_CUR >USBFS_Configuration
0FC6: 51 01    MOV   A,[0x1]            (0300)     mov     A, [USBFS_Configuration]
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_4
0FC8: 7F       RET                      (0302)     ret
0FC9: 70 BF    AND   F,0xBF             
0FCB: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: USBFS_bGetEPState
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS:    A contains the endpoint number
                                        (0314) ;
                                        (0315) ;  RETURNS:      A contains the endpoint state
                                        (0316) ;
                                        (0317) ;  SIDE EFFECTS:
                                        (0318) ;    The A and X registers may be modified by this or future implementations
                                        (0319) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0320) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0321) ;    responsibility to perserve their values across calls to fastcall16
                                        (0322) ;    functions.
                                        (0323) ;
                                        (0324)  USBFS_bGetEPState:
                                        (0325) _USBFS_bGetEPState:
                                        (0326)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0327)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
0FCE: 39 05    CMP   A,0x5              (0328)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0FD0: D0 06    JNC   0x0FD7             (0329)     jnc     .invalid_ep                ; Bail out
                                        (0330) ; Flow here to enable an endpoint
0FD2: 5C       MOV   X,A                (0331)     mov     X, A                       ; Endpoint number is the index
0FD3: 52 23    MOV   A,[X+35]           (0332)     mov     A, [X+USBFS_EndpointAPIStatus]; Get the state
0FD5: 80 03    JMP   0x0FD9             (0333)     jmp     .exit                      ; Go to the common exit
                                        (0334) ; Jump here for an invalid endpoint
                                        (0335) .invalid_ep:
0FD7: 50 00    MOV   A,0x0              (0336)     mov     A, 0                       ; Return 0 for an invalid ep
0FD9: 70 3F    AND   F,0x3F             
0FDB: 71 C0    OR    F,0xC0             
                                        (0337) ; Jump or flow here for a common exit
                                        (0338) .exit:
                                        (0339)     RAM_EPILOGUE RAM_USE_CLASS_3
0FDD: 7F       RET                      (0340)     ret                                ; All done
0FDE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0341) .ENDSECTION
                                        (0342) 
                                        (0343) 
                                        (0344) 
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;  FUNCTION NAME: USBFS_bRWUEnabled
                                        (0347) ;
                                        (0348) ;  DESCRIPTION:   Returns 1 if Remote Wake Up is enabled, otherwise 0
                                        (0349) ;
                                        (0350) ;-----------------------------------------------------------------------------
                                        (0351) ;
                                        (0352) ;  ARGUMENTS:   None
                                        (0353) ;
                                        (0354) ;  RETURNS:     A: 1--Remote Wake Up Enabled
                                        (0355) ;                  0--Remote Wake Up Disabled
                                        (0356) ;
                                        (0357) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0358) ;
                                        (0359) ;  THEORY of OPERATION or PROCEDURE:
                                        (0360) ;
                                        (0361) ;-----------------------------------------------------------------------------
                                        (0362) .SECTION
                                        (0363)  USBFS_bRWUEnabled:
                                        (0364) _USBFS_bRWUEnabled:
                                        (0365)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0366)     RAM_SETPAGE_CUR >USBFS_DeviceStatus
0FE1: 47 02 02 TST   [0x2],0x2          (0367)     tst     [USBFS_DeviceStatus], USB_DEVICE_STATUS_REMOTE_WAKEUP
0FE4: B0 05    JNZ   0x0FEA             (0368)     jnz     .enabled                   ; Jump if enabled
                                        (0369) ; Flow here if RWU is disabled
0FE6: 50 00    MOV   A,0x0              (0370)     mov     A, 0                       ; Return disabled
0FE8: 80 03    JMP   0x0FEC             (0371)     jmp     .exit                      ; Go to the common exit
                                        (0372) ; Jump when RWU is enabled
                                        (0373) .enabled:
0FEA: 50 01    MOV   A,0x1              (0374)     mov     A, 1                       ; Return enabled
                                        (0375) ; Jump or flow here for a common exit
                                        (0376) .exit:
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0FEC: 7F       RET                      (0378)     ret                                ; All done
                                        (0379) .ENDSECTION
                                        (0380) 
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;  FUNCTION NAME: USBFS_bGetEPCount
                                        (0383) ;
                                        (0384) ;  DESCRIPTION:
                                        (0385) ;
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;
                                        (0388) ;  ARGUMENTS:    A contains the Endpoint Number
                                        (0389) ;
                                        (0390) ;  RETURNS:              A and X contain a WORD that indicate the values stored in the
                                        (0391) ;                Count registers of the Endpoint
                                        (0392) ;
                                        (0393) ;  SIDE EFFECTS:
                                        (0394) ;    The A and X registers may be modified by this or future implementations
                                        (0395) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0396) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0397) ;    responsibility to perserve their values across calls to fastcall16
                                        (0398) ;    functions.
                                        (0399) ;
                                        (0400) .SECTION
                                        (0401)  USBFS_wGetEPCount:
                                        (0402) _USBFS_wGetEPCount:
                                        (0403)     RAM_PROLOGUE RAM_USE_CLASS_1
0FED: 39 05    CMP   A,0x5              (0404)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0FEF: D0 11    JNC   0x1001             (0405)     jnc     .invalid_ep                ; Bail out
                                        (0406) ; Flow here to get the endpoint count
0FF1: 64       ASL   A                  (0407)     asl     A                          ; Multiply the index by two to get to the value
0FF2: 5C       MOV   X,A                (0408)     mov     X, A                       ; Endpoint number is the index
0FF3: 5E 4D    MOV   A,REG[X+0x4D]      (0409)     mov     A, reg[X+USBFS_EP1CNT1 - 1]   ; Here is the count
0FF5: 11 02    SUB   A,0x2              (0410)     sub     A, 2
0FF7: 08       PUSH  A                  (0411)     push    A
0FF8: 79       DEC   X                  (0412)     dec     X
0FF9: 5E 4D    MOV   A,REG[X+0x4D]      (0413)     mov     A, reg[X+USBFS_EP1CNT1 - 1]   ; Here is the count
0FFB: 21 01    AND   A,0x1              (0414)     and     A, 0x01
0FFD: 5C       MOV   X,A                (0415)     mov     X, A
0FFE: 18       POP   A                  (0416)     pop     A
0FFF: 80 03    JMP   0x1003             (0417)     jmp     .exit                      ; Go to the common exit
                                        (0418) ; Jump here for an invalid endpoint
                                        (0419) .invalid_ep:
1001: 50 00    MOV   A,0x0              (0420)     mov     A, 0                       ; Return 0 for an invalid ep
                                        (0421) ; Jump or flow here for a common exit
                                        (0422) .exit:
                                        (0423)     RAM_EPILOGUE RAM_USE_CLASS_1
1003: 7F       RET                      (0424)     ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) .SECTION
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;  FUNCTION NAME: USBFS_LoadInEP and USBFS_LoadInISOCEP
                                        (0430) ;
                                        (0431) ;  DESCRIPTION:    This function loads the specified USB endpoint with
                                        (0432) ;                  the data specified.
                                        (0433) ;
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     [SP-8] Toggle
                                        (0438) ;     [SP-7] MSB of Count to send
                                        (0439) ;     [SP-6] LSB of Count to send
                                        (0440) ;     [SP-5] MSB of data array address
                                        (0441) ;     [SP-4] LSB of data array address
                                        (0442) ;     [SP-3] Endpoint Number
                                        (0443) ;
                                        (0444) ;  RETURNS:
                                        (0445) ;     none
                                        (0446) ;
                                        (0447) ;  SIDE EFFECTS:
                                        (0448) ;    The A and X registers may be modified by this or future implementations
                                        (0449) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0450) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0451) ;    responsibility to perserve their values across calls to fastcall16
                                        (0452) ;    functions.
                                        (0453) ;
                                        (0454) ;    Currently only the page pointer registers listed below are modified:
                                        (0455) ;          CUR_PP
                                        (0456) ;          IDX_PP
                                        (0457) ;
                                        (0458) EP_TYPE:        equ -1
                                        (0459) ; -2 and -3 is the return address to caller
                                        (0460) EP_NUM:     equ -4                       ; Endpoint Number
                                        (0461) DATA_LSB:   equ -5           ; LSB pointer of data
                                        (0462) DATA_MSB:   equ -6           ; MSB pointer of data
                                        (0463) CNTLEN_LSB: equ -7
                                        (0464) CNTLEN_MSB: equ -8           ; Length of data to send
                                        (0465) TOGGLE:     equ -9
                                        (0466) 
                                        (0467)  USBFS_LoadInISOCEP:
                                        (0468) _USBFS_LoadInISOCEP:
1004: 50 07    MOV   A,0x7              (0469)     mov     A, USB_MODE_ISO_IN
1006: 08       PUSH  A                  (0470)     push    A
1007: 80 04    JMP   0x100C             (0471)     jmp             BodyLoadIN_USBFS
                                        (0472)  USBFS_LoadInEP:
                                        (0473) _USBFS_LoadInEP:
1009: 50 0D    MOV   A,0xD              (0474)     mov     A, USB_MODE_ACK_IN
100B: 08       PUSH  A                  (0475)     push    A
100C: 70 BF    AND   F,0xBF             
100E: 62 D0 00 MOV   REG[0xD0],0x0      
1011: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0476) BodyLoadIN_USBFS:
                                        (0477)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0478)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0479) 
                                        (0480)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0481)     RAM_SETPAGE_IDX2STK
1014: 4F       MOV   X,SP               (0482)     mov     X, SP
1015: 52 FC    MOV   A,[X-4]            (0483)     mov     A, [X+EP_NUM]
1017: 39 05    CMP   A,0x5              (0484)     cmp     A, USB_MAX_EP_NUMBER+1     ; Range check
1019: D0 A9    JNC   0x10C3             (0485)     jnc     .exit                      ; Bail out
                                        (0486) 
                                        (0487)     ;SET THE COUNT
101B: 52 F8    MOV   A,[X-8]            (0488)     mov     A, [X+CNTLEN_MSB]          ; Get the MSB of the Count
101D: 21 01    AND   A,0x1              (0489)     and     A, 0x01                    ; Mask off the count bit
101F: 53 7A    MOV   [0x7A],A           (0490)     mov     [USBFS_APITemp+1], A       ; Save the count
1021: 52 F9    MOV   A,[X-7]            (0491)     mov     A, [X+CNTLEN_LSB]          ; Get the LSB of the Count
1023: 53 79    MOV   [0x79],A           (0492)     mov     [USBFS_APITemp], A         ; Save the count
                                        (0493) 
                                        (0494) 
                                        (0495)         ;  Perform normal data toggle or bypass?
1025: 10       PUSH  X                  (0496)     push    X
1026: 52 F7    MOV   A,[X-9]            (0497)     mov     A, [X+TOGGLE]
1028: B0 0F    JNZ   0x1038             (0498)     jnz     .normalToggle
                                        (0499) 		; the endpoint ISR automatically toggles the endpoint, so to support
                                        (0500) 		; the idea of not having the toggle change we must untoggle here.
102A: 50 59    MOV   A,0x59             (0501)     mov     A, <USBFS_USB_EP_BIT_LOOKUP           ; calculate the address LSB
102C: 03 FC    ADD   A,[X-4]            (0502)     add     A, [X+EP_NUM]           ; Get the Endpoint number
102E: 57 04    MOV   X,0x4              (0503)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; calculate the address MSB
1030: 4B       SWAP  A,X                (0504)     swap    A, X
1031: 09 00    ADC   A,0x0              (0505) 	adc     A, 0
1033: 28       ROMX                     (0506) 	romx
1034: 20       POP   X                  (0507) 	pop     X	                            ; Restore X to obtain the endpt correctly in the next block
1035: 10       PUSH  X                  (0508) 	push    X
                                        (0509) 
                                        (0510) ;    INDEX   USBFS_USB_EP_BIT_LOOKUP ; Get the bit mask
1036: 34 1E    XOR   [0x1E],A           (0511)     xor     [USBFS_EPDataToggle], A ; Retoggle the toggle
                                        (0512) 
                                        (0513) .normalToggle:
1038: 50 59    MOV   A,0x59             (0514)     mov     A, <USBFS_USB_EP_BIT_LOOKUP           ; calculate the address LSB
103A: 03 FC    ADD   A,[X-4]            (0515)     add     A, [X+EP_NUM]           ; Get the Endpoint number
103C: 57 04    MOV   X,0x4              (0516)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; calculate the address MSB
103E: 4B       SWAP  A,X                (0517)     swap    A, X
103F: 09 00    ADC   A,0x0              (0518) 	adc     A, 0
1041: 28       ROMX                     (0519) 	romx	;   now A contains the toggle
                                        (0520) 
                                        (0521) ;    INDEX   USBFS_USB_EP_BIT_LOOKUP ; Get the bit mask
1042: 20       POP   X                  (0522)     pop     X	 ;do before the and so the zero flag won't be corrupted.
1043: 22 1E    AND   A,[0x1E]           (0523)     and     A, [USBFS_EPDataToggle]
1045: A0 06    JZ    0x104C             (0524)     jz      .toggle0
                                        (0525) 
1047: 26 7A 7F AND   [0x7A],0x7F        (0526)     and      [USBFS_APITemp+1], ~USB_CNT_TOGGLE ; Set the data toggle
104A: 80 04    JMP   0x104F             (0527)     jmp     .toggle_done
                                        (0528) .toggle0:
104C: 2E 7A 80 OR    [0x7A],0x80        (0529)     or     [USBFS_APITemp+1], USB_CNT_TOGGLE
                                        (0530) 
                                        (0531) .toggle_done:
                                        (0532) 
104F: 4F       MOV   X,SP               (0533)     mov     X, SP
1050: 52 FC    MOV   A,[X-4]            (0534)     mov     A, [X+EP_NUM]               ; Get the Endpoint number
1052: 64       ASL   A                  (0535)     asl     A                           ; Double the ep number for proper cnt access
1053: 5C       MOV   X,A                (0536)     mov     X, A                        ; Make it into an index
1054: 51 79    MOV   A,[0x79]           (0537)     mov     A, [USBFS_APITemp]          ; Retrieve the saved MSB
1056: 61 4D    MOV   REG[X+0x4D],A      (0538)     mov     reg[X+USBFS_EP1CNT1 - 1], A     ; Write it into the register
1058: 79       DEC   X                  (0539)     dec     X                           ; Decrement the index to access the LSB
1059: 51 7A    MOV   A,[0x7A]           (0540)     mov     A, [USBFS_APITemp+1]        ; Retrieve the saved LSB
105B: 61 4D    MOV   REG[X+0x4D],A      (0541)     mov     reg[X+USBFS_EP1CNT1 - 1], A     ; Write it into the register
                                        (0542) 
                                        (0543) ; It's Time to move the data
                                        (0544) 
                                        (0545) ; First we need to determine where within the PMA the EP Start Address is
105D: 4F       MOV   X,SP               (0546)     mov     X, SP                       ; Get the Stack Pointer
105E: 52 FC    MOV   A,[X-4]            (0547)     mov     A, [X+EP_NUM]               ; Get the Endpoint number
1060: 5C       MOV   X,A                (0548)     mov     X, A                        ; Use the EP number as an index
1061: 5E 6B    MOV   A,REG[X+0x6B]      (0549)     mov     A, reg[X+TMP_DR0-1]         ; Get the address of ep from tmp register
1063: 71 10    OR    F,0x10             
                                        (0550) 
                                        (0551)    M8C_SetBank1
1065: 49 F7 01 TST   REG[0xF7],0x1      (0552)    tst   reg[CPU_F], 0x01
1068: A0 09    JZ    0x1072             (0553)    jz    .DontTouchGIE1
106A: 70 FE    AND   F,0xFE             
                                        (0554)    M8C_DisableGInt
106C: 60 40    MOV   REG[0x40],A        (0555)    mov   reg[PMA0_WA], A                ; Set the Write pointer of our pma to ep space
106E: 71 01    OR    F,0x1              
                                        (0556)    M8C_EnableGInt
1070: 80 03    JMP   0x1074             (0557)    jmp   .Continue1
                                        (0558) .DontTouchGIE1:
1072: 60 40    MOV   REG[0x40],A        (0559)    mov   reg[PMA0_WA], A                ; Set the Write pointer of our pma to ep space
1074: 70 EF    AND   F,0xEF             
                                        (0560) .Continue1:
                                        (0561) 	M8C_SetBank0
                                        (0562) 
                                        (0563) ; Now we are ready to start moving data
1076: 4F       MOV   X,SP               (0564)     mov     X, SP
1077: 27 F8 01 AND   [X-8],0x1          (0565)     and     [X+CNTLEN_MSB], 0x01        ; Mask off the MSB bit
107A: B0 05    JNZ   0x1080             (0566)     jnz     .start_send                 ; If it is high then we have 256 bytes
107C: 52 F9    MOV   A,[X-7]            (0567)     mov     A, [X+CNTLEN_LSB]           ; Check the LSB register
107E: A0 15    JZ    0x1094             (0568)     jz      .done                       ; If it is 0 then we have a 0 length packet
                                        (0569) .start_send:
1080: 52 FB    MOV   A,[X-5]            (0570)     mov     A, [X+DATA_LSB]
1082: 08       PUSH  A                  (0571)     push    A
                                        (0572) IF SYSTEM_LARGE_MEMORY_MODEL
1083: 52 FA    MOV   A,[X-6]            (0573)     mov     A, [X+DATA_MSB]
1085: 60 D3    MOV   REG[0xD3],A        (0574)     mov     reg[IDX_PP], A
                                        (0575) ENDIF
1087: 20       POP   X                  (0576)     pop     X
                                        (0577) 
                                        (0578) .loop:
1088: 52 00    MOV   A,[X+0]            (0579)     mov     A, [X]
108A: 60 40    MOV   REG[0x40],A        (0580)     mov     reg[PMA0_DR], A
108C: 75       INC   X                  (0581)     inc     X
108D: 7A 79    DEC   [0x79]             (0582)     dec     [USBFS_APITemp]
108F: BF F8    JNZ   0x1088             (0583)     jnz     .loop
1091: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0584) 
                                        (0585)     RAM_SETPAGE_IDX2STK
                                        (0586) .done:
1094: 4F       MOV   X,SP               (0587)     mov     X, SP
1095: 52 FC    MOV   A,[X-4]            (0588)     mov     A, [X+EP_NUM]
1097: 5C       MOV   X,A                (0589)     mov     X, A
1098: 71 10    OR    F,0x10             
                                        (0590) 
                                        (0591)    M8C_SetBank1
109A: 5E 6B    MOV   A,REG[X+0x6B]      (0592)    mov   A, reg[X+TMP_DR0-1]           ; Get the value of the PMA start Address
109C: 49 F7 01 TST   REG[0xF7],0x1      (0593)    tst   reg[CPU_F], 0x01
109F: A0 09    JZ    0x10A9             (0594)    jz    .DontTouchGIE2
10A1: 70 FE    AND   F,0xFE             
                                        (0595)    M8C_DisableGInt
10A3: 61 50    MOV   REG[X+0x50],A      (0596)    mov   reg[X + PMA0_RA], A           ; Load it into EP PMA so pre-fetch occurs
10A5: 71 01    OR    F,0x1              
                                        (0597)    M8C_EnableGInt
10A7: 80 03    JMP   0x10AB             (0598)    jmp   .Continue2
                                        (0599) .DontTouchGIE2:
10A9: 61 50    MOV   REG[X+0x50],A      (0600)    mov   reg[X + PMA0_RA], A           ; Load it into EP PMA so pre-fetch occurs
10AB: 70 EF    AND   F,0xEF             
                                        (0601) .Continue2:
                                        (0602) 	M8C_SetBank0
                                        (0603) 
10AD: 10       PUSH  X                  (0604)     push    X
10AE: 4F       MOV   X,SP               (0605)     mov     X, SP
10AF: 52 FE    MOV   A,[X-2]            (0606)     mov     A, [X+EP_TYPE-1]
10B1: 20       POP   X                  (0607)     pop     X
10B2: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0608) 
                                        (0609)     ; Check that we aren't halted
                                        (0610)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
10B5: 3D 23 02 CMP   [X+35],0x2         (0611)     cmp     [X + USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED    ; Get the state
10B8: A0 0A    JZ    0x10C3             (0612)     jz      .exit
                                        (0613) 
10BA: 56 23 00 MOV   [X+35],0x0         (0614)     mov     [X + USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; Set the state
10BD: 71 10    OR    F,0x10             
                                        (0615)     M8C_SetBank1
10BF: 61 C3    MOV   REG[X+0xC3],A      (0616)     mov     reg[X + USBFS_EP1MODE-1], A ; Enable the endpoint
10C1: 70 EF    AND   F,0xEF             
                                        (0617)     M8C_SetBank0
                                        (0618) 
                                        (0619) .exit:
10C3: 18       POP   A                  (0620)     pop     A                          ; Clean up EP_TYPE
10C4: 70 3F    AND   F,0x3F             
10C6: 71 C0    OR    F,0xC0             
                                        (0621)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
10C8: 7F       RET                      (0623)     ret
                                        (0624) .ENDSECTION
                                        (0625) 
                                        (0626) .SECTION
                                        (0627) ;-----------------------------------------------------------------------------
                                        (0628) ;  FUNCTION NAME: USBFS_EnableOutEP and
                                        (0629) ;                                 USBFS_EnableOutISOCEP
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:    This function enables an OUT endpoint.  It should not be
                                        (0632) ;                  called for an IN endpoint.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:      A contains the endpoint number
                                        (0637) ;
                                        (0638) ;  RETURNS:        None
                                        (0639) ;
                                        (0640) ;  SIDE EFFECTS:
                                        (0641) ;    The A and X registers may be modified by this or future implementations
                                        (0642) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0643) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0644) ;    responsibility to perserve their values across calls to fastcall16
                                        (0645) ;    functions.
                                        (0646) ;
                                        (0647) USBFS_EnableOutISOCEP:
                                        (0648) _USBFS_EnableOutISOCEP:
10C9: 57 05    MOV   X,0x5              (0649)     mov     X, USB_MODE_ISO_OUT
10CB: 10       PUSH  X                  (0650)     push    X
10CC: 80 04    JMP   0x10D1             (0651)     jmp     BodyEnableOut_USBFS
                                        (0652)  USBFS_EnableOutEP:
                                        (0653) _USBFS_EnableOutEP:
10CE: 57 09    MOV   X,0x9              (0654)     mov     X, USB_MODE_ACK_OUT
10D0: 10       PUSH  X                  (0655)     push    X
10D1: 70 BF    AND   F,0xBF             
10D3: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0656) BodyEnableOut_USBFS:
                                        (0657)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0658)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
                                        (0659) 
10D6: 39 00    CMP   A,0x0              (0660)     cmp     A, 0                       ; Can't enable EP0
10D8: A0 25    JZ    0x10FE             (0661)     jz      .exit                      ; Bail out
10DA: 39 05    CMP   A,0x5              (0662)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
10DC: D0 21    JNC   0x10FE             (0663)     jnc     .exit                      ; Bail out
                                        (0664) ; Flow here to enable an endpoint
10DE: 5C       MOV   X,A                (0665)     mov     X, A                       ; Endpoint number is the index
                                        (0666) 
                                        (0667)     ; Check that we aren't halted
10DF: 3D 23 02 CMP   [X+35],0x2         (0668)     cmp     [X + USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED    
10E2: A0 1B    JZ    0x10FE             (0669)     jz      .exit
                                        (0670) 
10E4: 10       PUSH  X                  (0671)     push    X
10E5: 56 23 00 MOV   [X+35],0x0         (0672)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; For the API
10E8: 5B       MOV   A,X                (0673)     mov     A, X
10E9: 64       ASL   A                  (0674)     asl     A
10EA: 5C       MOV   X,A                (0675)     mov     X, A
10EB: 63 4D 40 MOV   REG[X+0x4D],0x40   (0676)     mov     reg[X+EP1_CNT1-1], 64
10EE: 71 10    OR    F,0x10             
                                        (0677)     M8C_SetBank1
10F0: 20       POP   X                  (0678)     pop     X
10F1: 5E 6B    MOV   A,REG[X+0x6B]      (0679)     mov     A, reg[X+TMP_DR0-1]
10F3: 61 40    MOV   REG[X+0x40],A      (0680)     mov     reg[X+PMA0_WA], A
10F5: 5E C3    MOV   A,REG[X+0xC3]      (0681)     mov     A, reg[X+USBFS_EP1MODE-1]  ; Unlock the mode register
10F7: 18       POP   A                  (0682)     pop     A
                                        (0683) 
10F8: 61 C3    MOV   REG[X+0xC3],A      (0684)     mov     reg[X+USBFS_EP1MODE-1], A  ; Enable the endpoint
10FA: 70 EF    AND   F,0xEF             
                                        (0685)     M8C_SetBank0
10FC: 80 02    JMP   0x10FF             (0686)     jmp         .DoneEnableOut
                                        (0687) ; Jump or flow here for a common exit
                                        (0688) .exit:
10FE: 18       POP   A                  (0689)     pop     A
10FF: 70 3F    AND   F,0x3F             
1101: 71 C0    OR    F,0xC0             
                                        (0690) .DoneEnableOut:
                                        (0691)     RAM_EPILOGUE RAM_USE_CLASS_3
1103: 7F       RET                      (0692)     ret                                ; All done
                                        (0693) .ENDSECTION
                                        (0694) 
                                        (0695) ;-----------------------------------------------------------------------------
                                        (0696) ;  FUNCTION NAME: USBFS_DisableOutEP
                                        (0697) ;
                                        (0698) ;  DESCRIPTION:    This function disables an OUT endpoint.  It should not be
                                        (0699) ;                  called for an IN endpoint.
                                        (0700) ;
                                        (0701) ;-----------------------------------------------------------------------------
                                        (0702) ;
                                        (0703) ;  ARGUMENTS:     A the endpoint number
                                        (0704) ;
                                        (0705) ;  RETURNS:               none
                                        (0706) ;
                                        (0707) ;  SIDE EFFECTS:
                                        (0708) ;    The A and X registers may be modified by this or future implementations
                                        (0709) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0710) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0711) ;    responsibility to perserve their values across calls to fastcall16
                                        (0712) ;    functions.
                                        (0713) ;
                                        (0714) .SECTION
                                        (0715)  USBFS_DisableOutEP:
                                        (0716) _USBFS_DisableOutEP:
1104: 39 00    CMP   A,0x0              (0717)     cmp     A, 0                       ; Can't disable EP0
1106: A0 0F    JZ    0x1116             (0718)     jz      .exit                      ; Bail out
1108: 39 05    CMP   A,0x5              (0719)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
110A: D0 0B    JNC   0x1116             (0720)     jnc     .exit                      ; Bail out
                                        (0721) ; Flow here to disable an endpoint
110C: 5C       MOV   X,A                (0722)     mov     X, A                       ; Endpoint number is the index
110D: 71 10    OR    F,0x10             
                                        (0723)     M8C_SetBank1
110F: 5E C3    MOV   A,REG[X+0xC3]      (0724)     mov     A, reg[X+USBFS_EP1MODE-1]  ; Unlock the mode register
1111: 63 C3 08 MOV   REG[X+0xC3],0x8    (0725)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_NAK_OUT   ; Disable the endpoint
1114: 70 EF    AND   F,0xEF             
                                        (0726)     M8C_SetBank0
                                        (0727) ; Jump or flow here for a common exit
                                        (0728) .exit:
1116: 7F       RET                      (0729)     ret                                ; All done
                                        (0730) .ENDSECTION
                                        (0731) 
                                        (0732) .SECTION
                                        (0733) ;-----------------------------------------------------------------------------
                                        (0734) ;  FUNCTION NAME: USBFS_Force
                                        (0735) ;
                                        (0736) ;  DESCRIPTION:    Force the J/K/SE0 State of D+/D-
                                        (0737) ;
                                        (0738) ;-----------------------------------------------------------------------------
                                        (0739) ;
                                        (0740) ;  ARGUMENTS:     A: USB_FORCE_J
                                        (0741) ;                    USB_FORCE_K
                                        (0742) ;                    USB_FORCE_SE0
                                        (0743) ;                    USB_FORCE_NONE
                                        (0744) ;
                                        (0745) ;  RETURNS:       Nothing
                                        (0746) ;
                                        (0747) ;  SIDE EFFECTS:
                                        (0748) ;    The A and X registers may be modified by this or future implementations
                                        (0749) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0750) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0751) ;    responsibility to perserve their values across calls to fastcall16
                                        (0752) ;    functions.
                                        (0753) ;
                                        (0754)  USBFS_Force:
                                        (0755) _USBFS_Force:
1117: 60 4B    MOV   REG[0x4B],A        (0756)     mov    reg[USBFS_USBIO_CR0], A
1119: 7F       RET                      (0757)     ret                                ; Exit
111A: 70 BF    AND   F,0xBF             
111C: 62 D0 00 MOV   REG[0xD0],0x0      
111F: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) .SECTION
                                        (0761) ;-----------------------------------------------------------------------------
                                        (0762) ;  FUNCTION NAME: USBFS_bReadOutEP
                                        (0763) ;
                                        (0764) ;  DESCRIPTION:    This function reads the data from the USB Out endpoint
                                        (0765) ;                  and loads it into the specified buffer.
                                        (0766) ;
                                        (0767) ;-----------------------------------------------------------------------------
                                        (0768) ;
                                        (0769) ;  ARGUMENTS:
                                        (0770) ;     [SP-7] MSB of Count to read
                                        (0771) ;     [SP-6] LSB of Count to read
                                        (0772) ;     [SP-5] MSB of data array address to put data in
                                        (0773) ;     [SP-4] LSB of data array address to put data in
                                        (0774) ;     [SP-3] Endpoint Number
                                        (0775) ;
                                        (0776) ;  RETURNS:
                                        (0777) ;     none
                                        (0778) ;
                                        (0779) ;  SIDE EFFECTS:
                                        (0780) ;    The A and X registers may be modified by this or future implementations
                                        (0781) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0782) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0783) ;    responsibility to perserve their values across calls to fastcall16
                                        (0784) ;    functions.
                                        (0785) ;
                                        (0786) ;    Currently only the page pointer registers listed below are modified:
                                        (0787) ;          CUR_PP
                                        (0788) ;          IDX_PP
                                        (0789) ;
                                        (0790) EP_NUMR:     equ -3                       ; Endpoint Number
                                        (0791) DATA_LSBR:   equ -4           ; MSB pointer of data
                                        (0792) DATA_MSBR:   equ -5           ; LSB pointer of data
                                        (0793) CNTLEN_LSBR: equ -6           ; Length of data to send
                                        (0794) CNTLEN_MSBR: equ -7
                                        (0795) 
                                        (0796)  USBFS_bReadOutEP:
                                        (0797) _USBFS_bReadOutEP:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0800)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0801)     RAM_SETPAGE_IDX2STK
1122: 4F       MOV   X,SP               (0802)     mov     X, SP
1123: 52 FD    MOV   A,[X-3]            (0803)     mov     A, [X+EP_NUMR]
1125: 39 05    CMP   A,0x5              (0804)     cmp     A, USB_MAX_EP_NUMBER+1     ; Range check
1127: D0 88    JNC   0x11B0             (0805)     jnc     .exit                      ; Bail out
                                        (0806) 
                                        (0807)     ;Get the count value passed
1129: 52 F9    MOV   A,[X-7]            (0808)     mov     A, [X+CNTLEN_MSBR]         ; Get the MSB of the Count
112B: 21 01    AND   A,0x1              (0809)     and     A, 0x01                    ; Mask off the count bit
112D: 53 79    MOV   [0x79],A           (0810)     mov     [USBFS_APITemp], A         ; Save the count
112F: 52 FA    MOV   A,[X-6]            (0811)     mov     A, [X+CNTLEN_LSBR]         ; Get the LSB of the Count
1131: 53 7A    MOV   [0x7A],A           (0812)     mov     [USBFS_APITemp+1], A       ; Save the count
                                        (0813) 
                                        (0814)     ;Determine which is smaller the requested data or the available data
1133: 52 FD    MOV   A,[X-3]            (0815)     mov     A, [X+EP_NUMR]              ; Get the Endpoint number
1135: 64       ASL   A                  (0816)     asl     A                           ; Double the ep number for proper cnt access
1136: 5C       MOV   X,A                (0817)     mov     X, A                        ; Make it into an index
1137: 5E 4C    MOV   A,REG[X+0x4C]      (0818)     mov     A, reg[X+USBFS_EP1CNT1 - 2]     ; Get the Real count MSB
1139: 21 01    AND   A,0x1              (0819)     and     A, 0x01                     ; Mask off the LSB
113B: 3A 79    CMP   A,[0x79]           (0820)     cmp     A, [USBFS_APITemp]          ; Are they equal
113D: A0 0B    JZ    0x1149             (0821)     jz      .MSBEqual                   ; If they are check if they are 1
113F: C0 1C    JC    0x115C             (0822)     jc      .CountDetermined            ;If the requested count is smaller use it
1141: 53 79    MOV   [0x79],A           (0823)     mov     [USBFS_APITemp], A          ; Else use the actual
1143: 5E 4D    MOV   A,REG[X+0x4D]      (0824)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
1145: 53 7A    MOV   [0x7A],A           (0825)     mov     [USBFS_APITemp + 1], A      ; Else use the actual
1147: 80 14    JMP   0x115C             (0826)     jmp     .CountDetermined
                                        (0827) .MSBEqual:
1149: 51 79    MOV   A,[0x79]           (0828)     mov     A, [USBFS_APITemp]
114B: A0 06    JZ    0x1152             (0829)     jz      .CheckLSB
114D: 55 7A 00 MOV   [0x7A],0x0         (0830)     mov     [USBFS_APITemp + 1], 0
1150: 80 0B    JMP   0x115C             (0831)     jmp         .CountDetermined
                                        (0832) .CheckLSB:
1152: 5E 4D    MOV   A,REG[X+0x4D]      (0833)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
1154: 3A 7A    CMP   A,[0x7A]           (0834)     cmp     A, [USBFS_APITemp+1]        ; Are they equal
1156: A0 05    JZ    0x115C             (0835)     jz      .CountDetermined            ; If they are check if they are 1
1158: D0 03    JNC   0x115C             (0836)     jnc      .CountDetermined           ;If the requested count is smaller use it
115A: 53 7A    MOV   [0x7A],A           (0837)     mov     [USBFS_APITemp+1], A        ; Else use the actual
                                        (0838) .CountDetermined:
                                        (0839) 
                                        (0840) ; First we need to determine where within the PMA the EP Start Address is
115C: 4F       MOV   X,SP               (0841)     mov     X, SP                       ; Get the Stack Pointer
115D: 52 FD    MOV   A,[X-3]            (0842)     mov     A, [X+EP_NUMR]              ; Get the Endpoint number
115F: 5C       MOV   X,A                (0843)     mov     X, A                        ; Use the EP number as an index
1160: 5E 6B    MOV   A,REG[X+0x6B]      (0844)     mov     A, reg[X+TMP_DR0-1]         ; Get the address of ep from tmp register
1162: 71 10    OR    F,0x10             
                                        (0845) 
                                        (0846)    M8C_SetBank1
1164: 49 F7 01 TST   REG[0xF7],0x1      (0847)    tst   reg[CPU_F], 0x01
1167: A0 09    JZ    0x1171             (0848)    jz    .DontTouchGIE3
1169: 70 FE    AND   F,0xFE             
                                        (0849)    M8C_DisableGInt
116B: 60 50    MOV   REG[0x50],A        (0850)    mov   reg[PMA0_RA], A                ; Set the Read pointer of our pma to ep space
116D: 71 01    OR    F,0x1              
                                        (0851)    M8C_EnableGInt
116F: 80 03    JMP   0x1173             (0852)    jmp   .Continue3
                                        (0853) .DontTouchGIE3:
1171: 60 50    MOV   REG[0x50],A        (0854)    mov   reg[PMA0_RA], A                ; Set the Read pointer of our pma to ep space
1173: 70 EF    AND   F,0xEF             
                                        (0855) .Continue3:
                                        (0856) 	M8C_SetBank0
                                        (0857) 
                                        (0858) ; Now we are ready to start moving data
1175: 26 79 01 AND   [0x79],0x1         (0859)     and     [USBFS_APITemp], 0x01       ; Mask off the MSB bit
1178: B0 05    JNZ   0x117E             (0860)     jnz     .start_send                 ; If it is high then we have 256 bytes
117A: 51 7A    MOV   A,[0x7A]           (0861)     mov     A, [USBFS_APITemp+1]        ; Check the LSB register
117C: A0 33    JZ    0x11B0             (0862)     jz      .done                       ; If it is 0 then we have a 0 length packet
                                        (0863) 
                                        (0864) .start_send:
117E: 4F       MOV   X,SP               (0865)     mov     X, SP
117F: 52 FC    MOV   A,[X-4]            (0866)     mov     A, [X+DATA_LSBR]            ; Get the LSB of the pointer
1181: 08       PUSH  A                  (0867)     push    A                           ; save on stack
                                        (0868) IF SYSTEM_LARGE_MEMORY_MODEL
1182: 52 FB    MOV   A,[X-5]            (0869)     mov     A, [X+DATA_MSBR]            ; Get the MSB of the pointer
1184: 60 D3    MOV   REG[0xD3],A        (0870)     mov     reg[IDX_PP], A              ; Use as value for IDX_PP
                                        (0871) ENDIF
1186: 20       POP   X                  (0872)     pop     X                           ; Get the LSB again
1187: 71 10    OR    F,0x10             
                                        (0873) 
                                        (0874)         ;;
                                        (0875)         ;; 24Mhz read PMA workaround (kvn)
                                        (0876)         ;;
                                        (0877)     M8C_SetBank1
1189: 5D E0    MOV   A,REG[0xE0]        (0878)     mov     A, reg[OSC_CR0]
118B: 08       PUSH  A                  (0879)     push    A
118C: 21 F8    AND   A,0xF8             (0880)     and     A, 0xf8 ;clear the clock bits (briefly chg the cpu_clk to 3Mhz)
118E: 29 02    OR    A,0x2              (0881)     or      A, 0x02 ;will set clk to 12Mhz
1190: 60 E0    MOV   REG[0xE0],A        (0882)     mov     reg[OSC_CR0], A ;clk is now set at 12Mhz
1192: 70 EF    AND   F,0xEF             
                                        (0883)     M8C_SetBank0
                                        (0884) 
                                        (0885) .loop:
1194: 5D 40    MOV   A,REG[0x40]        (0886)     mov     A, reg[PMA0_DR]             ; Get the data from the PMA space
1196: 54 00    MOV   [X+0],A            (0887)     mov    [X], A                       ; save it in data array
1198: 75       INC   X                  (0888)     inc     X                           ; increment the pointer
1199: 7A 7A    DEC   [0x7A]             (0889)     dec     [USBFS_APITemp+1]           ; decrement the counter
119B: BF F8    JNZ   0x1194             (0890)     jnz     .loop                       ; wait for count to zero out
                                        (0891) 
                                        (0892)         ;;
                                        (0893)         ;; 24Mhz read PMA workaround (back to previous clock speed (kvn)
                                        (0894)         ;;
119D: 18       POP   A                  (0895)     pop     A ;recover previous reg[OSC_CR0] value
119E: 71 10    OR    F,0x10             
                                        (0896)     M8C_SetBank1
11A0: 60 E0    MOV   REG[0xE0],A        (0897)     mov     reg[OSC_CR0], A ;clk is now set at previous value (probably 24Mhz)
11A2: 70 EF    AND   F,0xEF             
11A4: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0898)     M8C_SetBank0
                                        (0899)         ;;
                                        (0900)         ;; end 24Mhz read PMA workaround (kvn)
                                        (0901)         ;;
                                        (0902) 
                                        (0903)     RAM_SETPAGE_IDX2STK
11A7: 4F       MOV   X,SP               (0904)     mov     X, SP
11A8: 52 FD    MOV   A,[X-3]            (0905)     mov     A, [X+EP_NUMR]
11AA: 64       ASL   A                  (0906)     asl     A
11AB: 5C       MOV   X,A                (0907)     mov     X, A
11AC: 5E 4D    MOV   A,REG[X+0x4D]      (0908)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
11AE: 11 02    SUB   A,0x2              (0909)     sub     A, 2
11B0: 70 3F    AND   F,0x3F             
11B2: 71 C0    OR    F,0xC0             
                                        (0910) .done:
                                        (0911) .exit:
                                        (0912)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0913)     RAM_EPILOGUE RAM_USE_CLASS_4
11B4: 7F       RET                      (0914)     ret
                                        (0915) .ENDSECTION
                                        (0916) 
                                        (0917) .SECTION
                                        (0918) ;-----------------------------------------------------------------------------
                                        (0919) ;  FUNCTION NAME: USBFS_bGetEPAckState
                                        (0920) ;
                                        (0921) ;  DESCRIPTION:   Returns whether the ACK bit of EP has been set for
                                        (0922) ;                 an endpoint
                                        (0923) ;
                                        (0924) ;-----------------------------------------------------------------------------
                                        (0925) ;
                                        (0926) ;  ARGUMENTS:     A is the Endpoint Number
                                        (0927) ;
                                        (0928) ;  RETURNS:       A is 0 if ACK bit is not set and non-zero if it is
                                        (0929) ;
                                        (0930) ;  SIDE EFFECTS:
                                        (0931) ;    The A and X registers may be modified by this or future implementations
                                        (0932) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0933) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0934) ;    responsibility to perserve their values across calls to fastcall16
                                        (0935) ;    functions.
                                        (0936) ;
                                        (0937)  USBFS_bGetEPAckState:
                                        (0938) _USBFS_bGetEPAckState:
11B5: 5C       MOV   X,A                (0939)     mov    X, A
11B6: 71 10    OR    F,0x10             
                                        (0940)     M8C_SetBank1
11B8: 5E C3    MOV   A,REG[X+0xC3]      (0941)     mov    A, reg[X + USBFS_EP1MODE-1]
11BA: 70 EF    AND   F,0xEF             
                                        (0942)     M8C_SetBank0
11BC: 21 10    AND   A,0x10             (0943)     and    A, 0x10
11BE: 7F       RET                      (0944)     ret                                ; Exit
11BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0945) .ENDSECTION
                                        (0946) 
                                        (0947) .SECTION
                                        (0948) ;-----------------------------------------------------------------------------
                                        (0949) ;  FUNCTION NAME: USBFS_SetPowerStatus
                                        (0950) ;
                                        (0951) ;  DESCRIPTION:    Set The Current Power status.
                                        (0952) ;
                                        (0953) ;-----------------------------------------------------------------------------
                                        (0954) ;
                                        (0955) ;  ARGUMENTS:      A contains the power status
                                        (0956) ;
                                        (0957) ;  RETURNS:        None
                                        (0958) ;
                                        (0959) ;  SIDE EFFECTS:
                                        (0960) ;    The A and X registers may be modified by this or future implementations
                                        (0961) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0962) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0963) ;    responsibility to perserve their values across calls to fastcall16
                                        (0964) ;    functions.
                                        (0965) ;
                                        (0966)  USBFS_SetPowerStatus:
                                        (0967) _USBFS_SetPowerStatus:
                                        (0968)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0969)     RAM_SETPAGE_CUR >USBFS_DeviceStatus
11C2: 39 00    CMP   A,0x0              (0970)     cmp     A, 0
11C4: A0 06    JZ    0x11CB             (0971)     jz      .bus_powered
11C6: 2E 02 01 OR    [0x2],0x1          (0972)     or      [USBFS_DeviceStatus], USB_DEVICE_STATUS_SELF_POWERED
11C9: 80 04    JMP   0x11CE             (0973)     jmp     .done
                                        (0974) .bus_powered:
11CB: 26 02 FE AND   [0x2],0xFE         (0975)     and     [USBFS_DeviceStatus], ~USB_DEVICE_STATUS_SELF_POWERED
                                        (0976) .done:
                                        (0977)     RAM_EPILOGUE RAM_USE_CLASS_4
11CE: 7F       RET                      (0978)     ret                                ; All done
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _uartRxISR
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
11CF: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _uartRxISR
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
11D0: 08       PUSH  A                  (0180)    push A
11D1: 10       PUSH  X                  (0181)    push X
11D2: 5D D3    MOV   A,REG[0xD3]        
11D4: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
11D5: 58 7F    MOV   X,[0x7F]           (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
11D7: 5D 2F    MOV   A,REG[0x2F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
11D9: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
11DA: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
11DC: B0 04    JNZ   0x11E1             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
11DE: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
11DF: 80 5A    JMP   0x123A             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
11E1: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
11E2: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
11E4: A0 12    JZ    0x11F7             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
11E6: 2C 7E    OR    [0x7E],A           (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
11E8: 49 2E 00 TST   REG[0x2E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
11EB: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
11ED: A0 4C    JZ    0x123A             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
11EF: 41 2F FE AND   REG[0x2F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
11F2: 43 2F 01 OR    REG[0x2F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
11F5: 80 44    JMP   0x123A             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
11F7: 5D 2E    MOV   A,REG[0x2E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
11F9: 47 7E 01 TST   [0x7E],0x1         (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
11FC: B0 3D    JNZ   0x123A             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
11FE: 39 5D    CMP   A,0x5D             (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
1200: B0 14    JNZ   0x1215             (0223)    jnz  .UARTRX_CHK_BACKSPACE
1202: 2E 7E 01 OR    [0x7E],0x1         (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
1205: 62 D3 01 MOV   REG[0xD3],0x1      
1208: 70 3F    AND   F,0x3F             
120A: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
120C: 56 00 00 MOV   [X+0],0x0          (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
120F: 70 3F    AND   F,0x3F             
1211: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
1213: 80 26    JMP   0x123A             (0232)    jmp  .RESTORE_IDX_PP
1215: 62 D3 01 MOV   REG[0xD3],0x1      
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
1218: 3C 7F 7E CMP   [0x7F],0x7E        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
121B: C0 11    JC    0x122D             (0254)    jc   .UARTRX_ISR_GETDATA
121D: 70 3F    AND   F,0x3F             
121F: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
1221: 56 00 00 MOV   [X+0],0x0          (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
1224: 70 3F    AND   F,0x3F             
1226: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
1228: 2E 7E 10 OR    [0x7E],0x10        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
122B: 80 0E    JMP   0x123A             (0259)    jmp  .RESTORE_IDX_PP
122D: 70 3F    AND   F,0x3F             
122F: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
1231: 54 00    MOV   [X+0],A            (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
1233: 70 3F    AND   F,0x3F             
1235: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
1237: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
1238: 5A 7F    MOV   [0x7F],X           (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
123A: 18       POP   A                  
123B: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
123D: 20       POP   X                  (0275)    pop  X
123E: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
123F: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
1240: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
1243: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
1246: 7F       RET                      (0182)    ret
1247: 41 E1 FB AND   REG[0xE1],0xFB     
124A: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
124D: 7F       RET                      (0214)    ret
124E: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
1250: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
1252: A0 07    JZ    0x125A             (0249)    jz    .SetModeRegEmpty
1254: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
1257: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
1259: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
125A: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
125D: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
125F: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
1260: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
1262: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
1264: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
1266: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
1268: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
1269: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
126C: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
126F: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
1270: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
1272: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
1273: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
1275: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
1276: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
1278: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
1279: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
127B: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
127C: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
127E: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
1280: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
1282: A0 06    JZ    0x1289             (0492)    jz   .SetTxCmpMode
                                        (0493) 
1284: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
1287: 80 04    JMP   0x128C             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
1289: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
128C: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
128E: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
128F: 08       PUSH  A                  (0536)    push A
1290: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
1292: A0 06    JZ    0x1299             (0538)    jz   .DisRxInt
1294: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
1297: 80 04    JMP   0x129C             (0541)    jmp  .CheckTxInt
1299: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
129C: 18       POP   A                  (0547)    pop  A
129D: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
129F: A0 06    JZ    0x12A6             (0549)    jz   .DisTxInt
12A1: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
12A4: 80 04    JMP   0x12A9             (0552)    jmp  .End_IntCntl
12A6: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
12A9: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
12BA: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
12BB: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
12BC: 67       ASR   A                  (0603)    asr   A
12BD: 67       ASR   A                  (0604)    asr   A
12BE: 67       ASR   A                  (0605)    asr   A
12BF: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
12C1: FF E7    INDEX 0x12AA             (0607)    index UART_HEX_STR                  ; Get Hex value
12C3: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
12C5: 18       POP   A                  (0609)    pop   A                             ; Restore value
12C6: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
12C8: FF E0    INDEX 0x12AA             (0611)    index UART_HEX_STR                  ; Get Hex value
12CA: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
12CC: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
12CD: 4B       SWAP  A,X                (0645)    swap  A,X
12CE: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
12D0: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
12D1: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
12D3: 7F       RET                      (0650)    ret
12D4: 49 2B 10 TST   REG[0x2B],0x10     
12D7: AF FC    JZ    _UART_PutChar      
12D9: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
12DB: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
12DC: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
12DF: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
12E1: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
12E3: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
12E4: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
12E6: 08       PUSH  A                  (0756)    push A
12E7: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
12E9: B0 04    JNZ   0x12EE             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
12EB: 18       POP   A                  (0759)    pop  A
12EC: 80 0B    JMP   0x12F8             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
12EE: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
12F0: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
12F1: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
12F2: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
12F4: B0 03    JNZ   0x12F8             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
12F6: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
12F7: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
12F8: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
12FA: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
12FB: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
12FD: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
12FF: 08       PUSH  A                  (0819)    push A
1300: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
1302: B0 07    JNZ   0x130A             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
1304: 18       POP   A                  (0822)    pop  A
1305: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
1307: 4B       SWAP  A,X                (0824)    swap A,X
1308: 80 07    JMP   0x1310             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
130A: 18       POP   A                  (0828)    pop  A
130B: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
130D: 4B       SWAP  A,X                (0830)    swap A,X
130E: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
1310: 7F       RET                      (0836)    ret
1311: 70 BF    AND   F,0xBF             
1313: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
1315: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
1317: A0 06    JZ    0x131E             (0872)    jz    End_PutString                           ; Check for end of string
1319: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
131B: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
131C: 8F F8    JMP   0x1315             (0875)    jmp   .PutStringLoop                          ; Get next character
131E: 70 3F    AND   F,0x3F             
1320: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
1322: 7F       RET                      (0879)    ret
1323: 70 BF    AND   F,0xBF             
1325: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
1328: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
1329: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
132B: A0 1A    JZ    0x1346             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
132D: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
132F: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
1331: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
1333: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
1335: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
1337: 49 2B 10 TST   REG[0x2B],0x10     
133A: AF FC    JZ    0x1337             
133C: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
133E: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
133F: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
1342: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
1344: 8F E4    JMP   0x1329             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
1346: 70 3F    AND   F,0x3F             
1348: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
134A: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
134B: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
134C: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
134F: B0 06    JNZ   0x1356             (0980)    jnz   .CW_WRITEIT
1351: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
1354: A0 1D    JZ    0x1372             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
1356: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
1357: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
1359: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
135B: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
135C: 49 2B 10 TST   REG[0x2B],0x10     
135F: AF FC    JZ    0x135C             
1361: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
1363: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
1364: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
1367: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
136A: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
136D: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
1370: 8F DB    JMP   0x134C             (0995)    jmp   .CW_Loop
1372: 70 3F    AND   F,0x3F             
1374: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
1376: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
1377: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
1378: 10       PUSH  X                  (1030)    push  X
1379: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
137A: A0 0B    JZ    0x1386             (1032)    jz    .End_CPutString
137C: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
137E: 20       POP   X                  (1034)    pop   X
137F: 18       POP   A                  (1035)    pop   A
1380: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
1381: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
1383: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
1384: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
1386: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
1388: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
1389: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
138B: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
138D: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
138F: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
1391: 7F       RET                      (1078)    ret
1392: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
1395: 55 00 00 MOV   [commandReady+65],0x0(1122)    mov [UART_aRxBuffer], 0x00
1398: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
139B: 55 7F 00 MOV   [0x7F],0x0         (1124)    mov [UART_bRxCnt], 0x00
139E: 26 7E 00 AND   [0x7E],0x0         (1125)    and [UART_fStatus], 0x00
13A1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
13A4: 55 BE 00 MOV   [bCtr+1],0x0       (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
13A7: 7F       RET                      (1129)    ret
13A8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
13AB: 51 7E    MOV   A,[0x7E]           (1165)    mov A,  [UART_fStatus]
13AD: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
13AF: 7F       RET                      (1168)    ret
13B0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
13B3: 51 7E    MOV   A,[0x7E]           (1209)    mov A,  [UART_fStatus]
13B5: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
13B7: 26 7E 0F AND   [0x7E],0xF         (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
13BA: 7F       RET                      (1213)    ret
13BB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
13BE: 51 7F    MOV   A,[0x7F]           (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
13C0: 7F       RET                      (1246)    ret
13C1: 70 BF    AND   F,0xBF             
13C3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
13C6: 50 00    MOV   A,0x0              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
13C8: 02 BE    ADD   A,[bCtr+1]         (1305)    add   A, [ptrParam]                      ; Add string offset
13CA: 5C       MOV   X,A                (1306)    mov   X, A
13CB: 62 D3 01 MOV   REG[0xD3],0x1      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
13CE: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
13D0: B0 04    JNZ   0x13D5             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
13D2: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
13D3: 80 33    JMP   0x1407             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
13D5: 39 7C    CMP   A,0x7C             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
13D7: B0 11    JNZ   0x13E9             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
13D9: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
13DA: 76 BE    INC   [bCtr+1]           (1318)    inc   [ptrParam]                         ;          the stored pointer.
13DC: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
13DE: 3C BE 7E CMP   [bCtr+1],0x7E      (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
13E1: BF F3    JNZ   0x13D5             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
13E3: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
13E4: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
13E7: 80 1F    JMP   0x1407             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
13E9: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
13EA: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
13EB: 76 BE    INC   [bCtr+1]           (1334)    inc   [ptrParam]
13ED: 3C BE 7E CMP   [bCtr+1],0x7E      (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
13F0: AF F3    JZ    0x13E4             (1336)    jz    .TerminateString
13F2: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
13F4: A0 12    JZ    0x1407             (1338)    jz    .End_GetNextParam
13F6: 39 7C    CMP   A,0x7C             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
13F8: BF F1    JNZ   0x13EA             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
13FA: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
13FD: 76 BE    INC   [bCtr+1]           (1342)    inc   [ptrParam]
13FF: 3C BE 7E CMP   [bCtr+1],0x7E      (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
1402: B0 04    JNZ   0x1407             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
1404: 55 BE 7E MOV   [bCtr+1],0x7E      (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
1407: 20       POP   X                  (1348)    pop   X
1408: 10       PUSH  X                  (1349)    push  X
1409: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
140C: B0 0A    JNZ   0x1417             (1351)    jnz   .NotNullString
140E: 20       POP   X                  (1352)    pop   X
140F: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
1411: 5B       MOV   A,X                (1354)    mov   A, X
1412: 70 3F    AND   F,0x3F             
1414: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
1416: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
1417: 20       POP   X                  (1360)    pop  X
1418: 50 01    MOV   A,0x1              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
141A: 70 3F    AND   F,0x3F             
141C: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
141E: 7F       RET                      (1364)    ret
141F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
1422: 50 00    MOV   A,0x0              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
1424: 02 BE    ADD   A,[bCtr+1]         (1397)    add  A, [ptrParam]                       ; Add string offset
1426: 5C       MOV   X,A                (1398)    mov  X,A
1427: 50 01    MOV   A,0x1              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
1429: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: D:\work\PocketHID\AllInOneControllerPSoC1\AllInOneControllerPSoC1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdlib.h>
(0008) #include <string.h>
(0009) #include <stdio.h>
(0010) 
(0011) int commandId = 0;
(0012) int commandGuid = 0;
(0013) BOOL commandReady = FALSE;
(0014) BYTE sh;
(0015) BOOL bDeviceEnumerated;
(0016) unsigned char bCtr;
(0017) //int dataIndex = -1;
(0018) 
(0019) /* Array of Keycode information to send to PC */ 
(0020) static BYTE Keyboard_Data[8] = {0, 0, 0, 0, 0, 0, 0, 0};  
(0021) 
(0022) /*Mouse Data to send to PC */
(0023) static BYTE Mouse_Data[3] = {0, 0, 0}; /* [0] = Buttons, [1] = X-Axis, [2] = Y-Axis */
(0024) 
(0025) /*Gamepad Data to send to PC */
(0026) static BYTE Gamepad_Data[3] = {0, 0, 0}; /*[0] = X-Axis, [1] = Y-Axis, [2] = Buttons */
(0027) 
(0028) #define GAMEPAD_DATA_LENGTH     3
(0029) #define MOUSE_DATA_LENGTH       3
(0030) #define KEYBOARD_DATA_LENGTH    8
(0031) 
(0032) //#define DEBUG
(0033) //#define DEBUG_INFO
(0034) 
(0035) //void ProcessByte(BYTE b);
(0036) void EnumerateDevice(void);
(0037) void CheckCommand(void);
(0038) void CheckKeyboardCommand(void);
(0039) void CheckMouseCommand(void);
(0040) void CheckGamepadCommand(void);
(0041) void CheckRenameCommand(void);
(0042) void WriteCommandResponse(void);
(0043) int hex2data(char *data, char *hexstring);
(0044) 
(0045) #ifdef DEBUG	
(0046) 
(0047) void DebugWriteKeyboard(void);
(0048) void DebugWriteMouse(void);
(0049) void DebugWriteGamepad(void);
(0050) void DebugWriteUNKNOWN(void);
(0051) void DebugWriteRx(BYTE b);
(0052) void DebugWriteParam(char* s);
(0053) 
(0054) #endif 
(0055) 
(0056) void main(void)
(0057) {
(0058) 	UART_Start(UART_PARITY_NONE);
__UserModules_end|_main|__text_start|_main:
    142A: 10       PUSH  X
    142B: 50 00    MOV   A,0x0
    142D: 7C 12 60 LCALL _UART_Start
(0059)     UART_EnableInt();
    1430: 7C 12 40 LCALL _UART_EnableInt
(0060) 	UART_IntCntl(UART_ENABLE_RX_INT);
    1433: 50 01    MOV   A,0x1
    1435: 7C 12 8F LCALL _UART_IntCntl
    1438: 20       POP   X
(0061) 
(0062) 	M8C_EnableGInt ;
    1439: 71 01    OR    F,0x1
(0063) 	INT_MSK2 |= 0x02;				//Enable SOF interrupts and Sleep interrupts
    143B: 43 DF 02 OR    REG[0xDF],0x2
(0064) 	INT_MSK0 |= 0x40;	
    143E: 43 E0 40 OR    REG[0xE0],0x40
(0065) 
(0066)     USBFS_Start(0, USB_5V_OPERATION);
    1441: 10       PUSH  X
    1442: 57 03    MOV   X,0x3
    1444: 50 00    MOV   A,0x0
    1446: 7C 0F 52 LCALL _USBFS_Start
    1449: 20       POP   X
(0067) 	bDeviceEnumerated = FALSE;
    144A: 62 D0 00 MOV   REG[0xD0],0x0
    144D: 55 BC 00 MOV   [bDeviceEnumerated],0x0
(0068) 	EnumerateDevice();
    1450: 91 55    CALL  _EnumerateDevice
(0069) 
(0070) 	UART_CmdReset();
    1452: 10       PUSH  X
    1453: 7C 13 92 LCALL _UART_CmdReset
(0071) 	
(0072) 	//Set device name on start
(0073) 	UART_CPutString("AT+NAMEMyTeletouch\r\n");
    1456: 50 01    MOV   A,0x1
    1458: 08       PUSH  A
    1459: 50 B1    MOV   A,0xB1
    145B: 5C       MOV   X,A
    145C: 18       POP   A
    145D: 7C 13 77 LCALL _UART_CPutString
(0074) 	
(0075) 	UART_CmdReset();
    1460: 7C 13 92 LCALL _UART_CmdReset
    1463: 20       POP   X
    1464: 81 11    JMP   0x1576
(0076) 	
(0077) 	while (1)
(0078) 	{
(0079) 		EnumerateDevice();
    1466: 91 3F    CALL  _EnumerateDevice
(0080) 		
(0081) 		//ProcessByte(UART_cReadChar());
(0082) 		CheckCommand();
    1468: 92 0B    CALL  _CheckCommand
(0083) 		
(0084) 		if (commandReady)
    146A: 62 D0 00 MOV   REG[0xD0],0x0
    146D: 3C BF 00 CMP   [commandReady],0x0
    1470: A1 05    JZ    0x1576
(0085) 		{
(0086) 			commandReady = FALSE;
    1472: 55 BF 00 MOV   [commandReady],0x0
(0087) 			
(0088) 			switch (commandId)
    1475: 62 D0 00 MOV   REG[0xD0],0x0
    1478: 3C B5 00 CMP   [commandId],0x0
    147B: B0 06    JNZ   0x1482
    147D: 3C B6 01 CMP   [commandId+1],0x1
    1480: A0 39    JZ    0x14BA
    1482: 62 D0 00 MOV   REG[0xD0],0x0
    1485: 3C B5 00 CMP   [commandId],0x0
    1488: B0 06    JNZ   0x148F
    148A: 3C B6 02 CMP   [commandId+1],0x2
    148D: A0 60    JZ    0x14EE
    148F: 62 D0 00 MOV   REG[0xD0],0x0
    1492: 3C B5 00 CMP   [commandId],0x0
    1495: B0 06    JNZ   0x149C
    1497: 3C B6 03 CMP   [commandId+1],0x3
    149A: A0 87    JZ    0x1522
    149C: 62 D0 00 MOV   REG[0xD0],0x0
    149F: 51 B6    MOV   A,[commandId+1]
    14A1: 11 01    SUB   A,0x1
    14A3: 51 B5    MOV   A,[commandId]
    14A5: 31 80    XOR   A,0x80
    14A7: 19 80    SBB   A,0x80
    14A9: C0 C3    JC    0x156D
    14AB: 62 D0 00 MOV   REG[0xD0],0x0
    14AE: 3C B5 00 CMP   [commandId],0x0
    14B1: B0 06    JNZ   0x14B8
    14B3: 3C B6 0D CMP   [commandId+1],0xD
    14B6: A0 9F    JZ    0x1556
    14B8: 80 B4    JMP   0x156D
(0089) 			{
(0090) 				case 1://Keyboard
(0091) #ifdef DEBUG	
(0092) 					DebugWriteKeyboard();
(0093) #endif 
(0094) 					commandId = 0;
    14BA: 62 D0 00 MOV   REG[0xD0],0x0
    14BD: 55 B6 00 MOV   [commandId+1],0x0
    14C0: 55 B5 00 MOV   [commandId],0x0
(0095) 
(0096) 					//while(!USBFS_bGetEPAckState(1)); /* Wait for ACK before loading data */
(0097) 					while(USBFS_bGetEPState(1) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    14C3: 10       PUSH  X
    14C4: 50 01    MOV   A,0x1
    14C6: 7C 0F C9 LCALL _USBFS_bGetEPState
    14C9: 20       POP   X
    14CA: 62 D0 00 MOV   REG[0xD0],0x0
    14CD: 39 01    CMP   A,0x1
    14CF: BF F3    JNZ   0x14C3
(0098) 		            USBFS_LoadInEP(1, Keyboard_Data, KEYBOARD_DATA_LENGTH, USB_TOGGLE);     
    14D1: 10       PUSH  X
    14D2: 50 01    MOV   A,0x1
    14D4: 08       PUSH  A
    14D5: 50 00    MOV   A,0x0
    14D7: 08       PUSH  A
    14D8: 50 08    MOV   A,0x8
    14DA: 08       PUSH  A
    14DB: 50 00    MOV   A,0x0
    14DD: 08       PUSH  A
    14DE: 50 A5    MOV   A,0xA5
    14E0: 08       PUSH  A
    14E1: 50 01    MOV   A,0x1
    14E3: 08       PUSH  A
    14E4: 7C 10 09 LCALL _USBFS_LoadInEP
    14E7: 38 FA    ADD   SP,0xFA
    14E9: 20       POP   X
(0099) 
(0100) 					WriteCommandResponse();					
    14EA: 91 48    CALL  _WriteCommandResponse
(0101) 					break;
    14EC: 80 89    JMP   0x1576
(0102) 				case 2://Mouse
(0103) #ifdef DEBUG	
(0104) 					DebugWriteMouse();
(0105) #endif
(0106) 					commandId = 0;
    14EE: 62 D0 00 MOV   REG[0xD0],0x0
    14F1: 55 B6 00 MOV   [commandId+1],0x0
    14F4: 55 B5 00 MOV   [commandId],0x0
(0107) 		
(0108) 					//while(!USBFS_bGetEPAckState(2)); /* Wait for ACK before loading data */
(0109) 					while(USBFS_bGetEPState(2) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    14F7: 10       PUSH  X
    14F8: 50 02    MOV   A,0x2
    14FA: 7C 0F C9 LCALL _USBFS_bGetEPState
    14FD: 20       POP   X
    14FE: 62 D0 00 MOV   REG[0xD0],0x0
    1501: 39 01    CMP   A,0x1
    1503: BF F3    JNZ   0x14F7
(0110) 		            USBFS_LoadInEP(2, Mouse_Data, MOUSE_DATA_LENGTH, USB_TOGGLE); 
    1505: 10       PUSH  X
    1506: 50 01    MOV   A,0x1
    1508: 08       PUSH  A
    1509: 50 00    MOV   A,0x0
    150B: 08       PUSH  A
    150C: 50 03    MOV   A,0x3
    150E: 08       PUSH  A
    150F: 50 00    MOV   A,0x0
    1511: 08       PUSH  A
    1512: 50 AD    MOV   A,0xAD
    1514: 08       PUSH  A
    1515: 50 02    MOV   A,0x2
    1517: 08       PUSH  A
    1518: 7C 10 09 LCALL _USBFS_LoadInEP
    151B: 38 FA    ADD   SP,0xFA
    151D: 20       POP   X
(0111) 
(0112) 					WriteCommandResponse();					
    151E: 91 14    CALL  _WriteCommandResponse
(0113) 					break;
    1520: 80 55    JMP   0x1576
(0114) 
(0115) 				case 3://Gamepad
(0116) #ifdef DEBUG	
(0117) 					DebugWriteGamepad();
(0118) #endif
(0119) 					commandId = 0;
    1522: 62 D0 00 MOV   REG[0xD0],0x0
    1525: 55 B6 00 MOV   [commandId+1],0x0
    1528: 55 B5 00 MOV   [commandId],0x0
(0120) 		
(0121) 					//while(!USBFS_bGetEPAckState(3)); /* Wait for ACK before loading data */
(0122) 					while(USBFS_bGetEPState(3) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    152B: 10       PUSH  X
    152C: 50 03    MOV   A,0x3
    152E: 7C 0F C9 LCALL _USBFS_bGetEPState
    1531: 20       POP   X
    1532: 62 D0 00 MOV   REG[0xD0],0x0
    1535: 39 01    CMP   A,0x1
    1537: BF F3    JNZ   0x152B
(0123) 		            USBFS_LoadInEP(3, Gamepad_Data, GAMEPAD_DATA_LENGTH, USB_TOGGLE);     
    1539: 10       PUSH  X
    153A: 50 01    MOV   A,0x1
    153C: 08       PUSH  A
    153D: 50 00    MOV   A,0x0
    153F: 08       PUSH  A
    1540: 50 03    MOV   A,0x3
    1542: 08       PUSH  A
    1543: 50 00    MOV   A,0x0
    1545: 08       PUSH  A
    1546: 50 B0    MOV   A,0xB0
    1548: 08       PUSH  A
    1549: 50 03    MOV   A,0x3
    154B: 08       PUSH  A
    154C: 7C 10 09 LCALL _USBFS_LoadInEP
    154F: 38 FA    ADD   SP,0xFA
    1551: 20       POP   X
(0124) 
(0125) 					WriteCommandResponse();					
    1552: 90 E0    CALL  _WriteCommandResponse
(0126) 					break;
    1554: 80 21    JMP   0x1576
(0127) 				case 13://Rename
(0128) 					commandId = 0;
    1556: 62 D0 00 MOV   REG[0xD0],0x0
    1559: 55 B6 00 MOV   [commandId+1],0x0
    155C: 55 B5 00 MOV   [commandId],0x0
(0129) 					UART_CPutString("AT+NAMEMyTeletouch\r\n");
    155F: 10       PUSH  X
    1560: 50 01    MOV   A,0x1
    1562: 08       PUSH  A
    1563: 50 B1    MOV   A,0xB1
    1565: 5C       MOV   X,A
    1566: 18       POP   A
    1567: 7C 13 77 LCALL _UART_CPutString
    156A: 20       POP   X
(0130) 					break;
    156B: 80 0A    JMP   0x1576
(0131) 				default:
(0132) 					commandId = 0;
    156D: 62 D0 00 MOV   REG[0xD0],0x0
    1570: 55 B6 00 MOV   [commandId+1],0x0
    1573: 55 B5 00 MOV   [commandId],0x0
(0133) #ifdef DEBUG	
(0134) 					DebugWriteUNKNOWN();
(0135) #endif
(0136) 					break;
(0137) 			}
(0138) 		}
(0139) 	}
    1576: 8E EF    JMP   0x1466
    1578: 8F FF    JMP   0x1578
(0140) }
(0141) 
(0142) #pragma interrupt_handler Interrupt
(0143) void Interrupt(void)
(0144) {
_Interrupt:
    157A: 71 C0    OR    F,0xC0
    157C: 08       PUSH  A
    157D: 5D D0    MOV   A,REG[0xD0]
    157F: 08       PUSH  A
(0145) 	bCtr++;
    1580: 62 D0 00 MOV   REG[0xD0],0x0
    1583: 76 BD    INC   [bCtr]
(0146) 	
(0147) 	if(bCtr >2)
    1585: 50 02    MOV   A,0x2
    1587: 3A BD    CMP   A,[bCtr]
    1589: D0 07    JNC   0x1591
(0148) 	{
(0149) 		bDeviceEnumerated = FALSE;
    158B: 62 D0 00 MOV   REG[0xD0],0x0
    158E: 55 BC 00 MOV   [bDeviceEnumerated],0x0
(0150) 	}
    1591: 18       POP   A
    1592: 60 D0    MOV   REG[0xD0],A
    1594: 18       POP   A
    1595: 7E       RETI  
(0151) }
(0152) 
(0153) #pragma interrupt_handler SOF_ISR
(0154) void SOF_ISR(void)
(0155) {
_SOF_ISR:
    1596: 71 C0    OR    F,0xC0
    1598: 08       PUSH  A
    1599: 5D D0    MOV   A,REG[0xD0]
    159B: 08       PUSH  A
(0156) 	bCtr = 0; //clear the monitoring counter on every SOF packet
    159C: 62 D0 00 MOV   REG[0xD0],0x0
    159F: 55 BD 00 MOV   [bCtr],0x0
    15A2: 18       POP   A
    15A3: 60 D0    MOV   REG[0xD0],A
    15A5: 18       POP   A
    15A6: 7E       RETI  
(0157) 
(0158) }
(0159) 
(0160) void EnumerateDevice(void)
(0161) {
(0162) 	if (!bDeviceEnumerated)
_EnumerateDevice:
    15A7: 62 D0 00 MOV   REG[0xD0],0x0
    15AA: 3C BC 00 CMP   [bDeviceEnumerated],0x0
    15AD: B0 85    JNZ   0x1633
(0163) 	{
(0164) 		bDeviceEnumerated = TRUE;
    15AF: 55 BC 01 MOV   [bDeviceEnumerated],0x1
(0165) 
(0166) 		while(!USBFS_bGetConfiguration());
    15B2: 10       PUSH  X
    15B3: 7C 0F C3 LCALL _USBFS_bGetConfiguration
    15B6: 20       POP   X
    15B7: 62 D0 00 MOV   REG[0xD0],0x0
    15BA: 39 00    CMP   A,0x0
    15BC: AF F5    JZ    0x15B2
(0167) 
(0168) 		while(USBFS_bGetEPState(1) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    15BE: 10       PUSH  X
    15BF: 50 01    MOV   A,0x1
    15C1: 7C 0F C9 LCALL _USBFS_bGetEPState
    15C4: 20       POP   X
    15C5: 62 D0 00 MOV   REG[0xD0],0x0
    15C8: 39 01    CMP   A,0x1
    15CA: BF F3    JNZ   0x15BE
(0169) 	    /*Begins Keyboard USB Traffic*/ 
(0170) 	    USBFS_LoadInEP(1, Keyboard_Data, KEYBOARD_DATA_LENGTH, USB_NO_TOGGLE);     
    15CC: 10       PUSH  X
    15CD: 50 00    MOV   A,0x0
    15CF: 08       PUSH  A
    15D0: 08       PUSH  A
    15D1: 50 08    MOV   A,0x8
    15D3: 08       PUSH  A
    15D4: 50 00    MOV   A,0x0
    15D6: 08       PUSH  A
    15D7: 50 A5    MOV   A,0xA5
    15D9: 08       PUSH  A
    15DA: 50 01    MOV   A,0x1
    15DC: 08       PUSH  A
    15DD: 7C 10 09 LCALL _USBFS_LoadInEP
    15E0: 38 FA    ADD   SP,0xFA
    15E2: 20       POP   X
(0171) 
(0172) 		while(USBFS_bGetEPState(2) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    15E3: 10       PUSH  X
    15E4: 50 02    MOV   A,0x2
    15E6: 7C 0F C9 LCALL _USBFS_bGetEPState
    15E9: 20       POP   X
    15EA: 62 D0 00 MOV   REG[0xD0],0x0
    15ED: 39 01    CMP   A,0x1
    15EF: BF F3    JNZ   0x15E3
(0173) 	    /*Begins Mouse USB Traffic*/ 
(0174) 	    USBFS_LoadInEP(2, Mouse_Data, MOUSE_DATA_LENGTH, USB_NO_TOGGLE); 
    15F1: 10       PUSH  X
    15F2: 50 00    MOV   A,0x0
    15F4: 08       PUSH  A
    15F5: 08       PUSH  A
    15F6: 50 03    MOV   A,0x3
    15F8: 08       PUSH  A
    15F9: 50 00    MOV   A,0x0
    15FB: 08       PUSH  A
    15FC: 50 AD    MOV   A,0xAD
    15FE: 08       PUSH  A
    15FF: 50 02    MOV   A,0x2
    1601: 08       PUSH  A
    1602: 7C 10 09 LCALL _USBFS_LoadInEP
    1605: 38 FA    ADD   SP,0xFA
    1607: 20       POP   X
(0175) 	    
(0176) 		while(USBFS_bGetEPState(3) != IN_BUFFER_EMPTY); /* Wait for ACK before loading data */
    1608: 10       PUSH  X
    1609: 50 03    MOV   A,0x3
    160B: 7C 0F C9 LCALL _USBFS_bGetEPState
    160E: 20       POP   X
    160F: 62 D0 00 MOV   REG[0xD0],0x0
    1612: 39 01    CMP   A,0x1
    1614: BF F3    JNZ   0x1608
(0177) 	    /*Begins Gamepad USB Traffic*/ 
(0178) 	    USBFS_LoadInEP(3, Gamepad_Data, GAMEPAD_DATA_LENGTH, USB_NO_TOGGLE);
    1616: 10       PUSH  X
    1617: 50 00    MOV   A,0x0
    1619: 08       PUSH  A
    161A: 08       PUSH  A
    161B: 50 03    MOV   A,0x3
    161D: 08       PUSH  A
    161E: 50 00    MOV   A,0x0
    1620: 08       PUSH  A
    1621: 50 B0    MOV   A,0xB0
    1623: 08       PUSH  A
    1624: 50 03    MOV   A,0x3
    1626: 08       PUSH  A
    1627: 7C 10 09 LCALL _USBFS_LoadInEP
    162A: 38 FA    ADD   SP,0xFA
    162C: 20       POP   X
(0179) 		
(0180) 		bDeviceEnumerated = TRUE;
    162D: 62 D0 00 MOV   REG[0xD0],0x0
    1630: 55 BC 01 MOV   [bDeviceEnumerated],0x1
(0181) 	}
    1633: 7F       RET   
(0182) }
(0183) 
(0184) void WriteCommandResponse(void)
(0185) {
_WriteCommandResponse:
  len                  --> X+16
  str                  --> X+0
    1634: 10       PUSH  X
    1635: 4F       MOV   X,SP
    1636: 38 12    ADD   SP,0x12
(0186) 	char str[16];
(0187) 	int len = csprintf(str, "4|%d|1]", commandGuid);
    1638: 62 D0 00 MOV   REG[0xD0],0x0
    163B: 51 B3    MOV   A,[commandGuid]
    163D: 08       PUSH  A
    163E: 51 B4    MOV   A,[commandGuid+1]
    1640: 08       PUSH  A
    1641: 50 01    MOV   A,0x1
    1643: 08       PUSH  A
    1644: 50 A9    MOV   A,0xA9
    1646: 08       PUSH  A
    1647: 62 D0 00 MOV   REG[0xD0],0x0
    164A: 50 03    MOV   A,0x3
    164C: 08       PUSH  A
    164D: 10       PUSH  X
    164E: 7C 28 3A LCALL _csprintf
    1651: 38 FA    ADD   SP,0xFA
    1653: 62 D0 00 MOV   REG[0xD0],0x0
    1656: 51 A3    MOV   A,[__r1]
    1658: 54 11    MOV   [X+17],A
    165A: 51 A4    MOV   A,[__r0]
    165C: 54 10    MOV   [X+16],A
(0188) 	UART_PutChar(len);
    165E: 52 11    MOV   A,[X+17]
    1660: 10       PUSH  X
    1661: 7C 12 D4 LCALL _UART_PutChar
    1664: 20       POP   X
(0189) 	UART_PutString(str);
    1665: 62 D0 00 MOV   REG[0xD0],0x0
    1668: 10       PUSH  X
    1669: 50 03    MOV   A,0x3
    166B: 08       PUSH  A
    166C: 18       POP   A
    166D: 7C 13 11 LCALL _UART_PutString
    1670: 20       POP   X
    1671: 38 EE    ADD   SP,0xEE
    1673: 20       POP   X
    1674: 7F       RET   
(0190) }
(0191) 
(0192) void CheckCommand(void)
(0193) {
_CheckCommand:
  pCmd                 --> X+0
    1675: 10       PUSH  X
    1676: 4F       MOV   X,SP
    1677: 38 02    ADD   SP,0x2
(0194) 	char *pCmd;
(0195) 	
(0196) 	if (UART_bCmdCheck() != 0)
    1679: 10       PUSH  X
    167A: 7C 13 A8 LCALL _UART_bCmdCheck
    167D: 20       POP   X
    167E: 62 D0 00 MOV   REG[0xD0],0x0
    1681: 39 00    CMP   A,0x0
    1683: A0 A9    JZ    0x172D
(0197) 	{	
(0198) 		pCmd = UART_szGetParam();
    1685: 10       PUSH  X
    1686: 7C 13 C1 LCALL _UART_szGetParam
    1689: 62 D0 00 MOV   REG[0xD0],0x0
    168C: 53 A4    MOV   [__r0],A
    168E: 5A A3    MOV   [__r1],X
    1690: 20       POP   X
    1691: 51 A3    MOV   A,[__r1]
    1693: 54 01    MOV   [X+1],A
    1695: 51 A4    MOV   A,[__r0]
    1697: 54 00    MOV   [X+0],A
(0199) 		commandId = 0;
    1699: 62 D0 00 MOV   REG[0xD0],0x0
    169C: 55 B6 00 MOV   [commandId+1],0x0
    169F: 55 B5 00 MOV   [commandId],0x0
(0200) 
(0201) #ifdef DEBUG_INFO
(0202) 		DebugWriteParam(pCmd);
(0203) #endif
(0204) 		
(0205) 		if (cstrcmp("1", pCmd) == 0)
    16A2: 52 00    MOV   A,[X+0]
    16A4: 08       PUSH  A
    16A5: 52 01    MOV   A,[X+1]
    16A7: 08       PUSH  A
    16A8: 50 01    MOV   A,0x1
    16AA: 08       PUSH  A
    16AB: 50 A7    MOV   A,0xA7
    16AD: 08       PUSH  A
    16AE: 7C 1E 21 LCALL _cstrcmpLMM
    16B1: 38 FC    ADD   SP,0xFC
    16B3: 62 D0 00 MOV   REG[0xD0],0x0
    16B6: 3C A4 00 CMP   [__r0],0x0
    16B9: B0 0A    JNZ   0x16C4
    16BB: 3C A3 00 CMP   [__r1],0x0
    16BE: B0 05    JNZ   0x16C4
(0206) 		{
(0207) 			CheckKeyboardCommand();
    16C0: 91 3F    CALL  _CheckKeyboardCommand
(0208) 		}
    16C2: 80 65    JMP   0x1728
(0209) 		else if (cstrcmp("2", pCmd) == 0)
    16C4: 52 00    MOV   A,[X+0]
    16C6: 08       PUSH  A
    16C7: 52 01    MOV   A,[X+1]
    16C9: 08       PUSH  A
    16CA: 50 01    MOV   A,0x1
    16CC: 08       PUSH  A
    16CD: 50 A5    MOV   A,0xA5
    16CF: 08       PUSH  A
    16D0: 7C 1E 21 LCALL _cstrcmpLMM
    16D3: 38 FC    ADD   SP,0xFC
    16D5: 62 D0 00 MOV   REG[0xD0],0x0
    16D8: 3C A4 00 CMP   [__r0],0x0
    16DB: B0 0A    JNZ   0x16E6
    16DD: 3C A3 00 CMP   [__r1],0x0
    16E0: B0 05    JNZ   0x16E6
(0210) 		{
(0211) 			CheckMouseCommand();
    16E2: 92 99    CALL  _CheckMouseCommand
(0212) 		}
    16E4: 80 43    JMP   0x1728
(0213) 		else if (cstrcmp("3", pCmd) == 0)
    16E6: 52 00    MOV   A,[X+0]
    16E8: 08       PUSH  A
    16E9: 52 01    MOV   A,[X+1]
    16EB: 08       PUSH  A
    16EC: 50 01    MOV   A,0x1
    16EE: 08       PUSH  A
    16EF: 50 A3    MOV   A,0xA3
    16F1: 08       PUSH  A
    16F2: 7C 1E 21 LCALL _cstrcmpLMM
    16F5: 38 FC    ADD   SP,0xFC
    16F7: 62 D0 00 MOV   REG[0xD0],0x0
    16FA: 3C A4 00 CMP   [__r0],0x0
    16FD: B0 0A    JNZ   0x1708
    16FF: 3C A3 00 CMP   [__r1],0x0
    1702: B0 05    JNZ   0x1708
(0214) 		{	
(0215) 			CheckGamepadCommand();
    1704: 93 AB    CALL  _CheckGamepadCommand
(0216) 		}
    1706: 80 21    JMP   0x1728
(0217) 		else if (cstrcmp("13", pCmd) == 0)
    1708: 52 00    MOV   A,[X+0]
    170A: 08       PUSH  A
    170B: 52 01    MOV   A,[X+1]
    170D: 08       PUSH  A
    170E: 50 01    MOV   A,0x1
    1710: 08       PUSH  A
    1711: 50 A0    MOV   A,0xA0
    1713: 08       PUSH  A
    1714: 7C 1E 21 LCALL _cstrcmpLMM
    1717: 38 FC    ADD   SP,0xFC
    1719: 62 D0 00 MOV   REG[0xD0],0x0
    171C: 3C A4 00 CMP   [__r0],0x0
    171F: B0 08    JNZ   0x1728
    1721: 3C A3 00 CMP   [__r1],0x0
    1724: B0 03    JNZ   0x1728
(0218) 		{	
(0219) 			CheckRenameCommand();
    1726: 90 09    CALL  _CheckRenameCommand
(0220) 		}
(0221) 		
(0222) 		UART_CmdReset();
    1728: 10       PUSH  X
    1729: 7C 13 92 LCALL _UART_CmdReset
    172C: 20       POP   X
(0223) 	}
    172D: 38 FE    ADD   SP,0xFE
    172F: 20       POP   X
    1730: 7F       RET   
(0224) }
(0225) 
(0226) void CheckRenameCommand(void)
(0227) {
_CheckRenameCommand:
  i                    --> X+4
  endCommandGuid       --> X+2
  pArg                 --> X+0
    1731: 10       PUSH  X
    1732: 4F       MOV   X,SP
    1733: 38 08    ADD   SP,0x8
(0228) 	char *pArg;
(0229) 	int i = 0;
    1735: 56 05 00 MOV   [X+5],0x0
    1738: 56 04 00 MOV   [X+4],0x0
(0230) 	int endCommandGuid = 0;
    173B: 56 03 00 MOV   [X+3],0x0
    173E: 56 02 00 MOV   [X+2],0x0
(0231) 
(0232) 	commandId = 13;
    1741: 62 D0 00 MOV   REG[0xD0],0x0
    1744: 55 B6 0D MOV   [commandId+1],0xD
    1747: 55 B5 00 MOV   [commandId],0x0
(0233) 	
(0234) 	pArg = UART_szGetParam();
    174A: 10       PUSH  X
    174B: 7C 13 C1 LCALL _UART_szGetParam
    174E: 62 D0 00 MOV   REG[0xD0],0x0
    1751: 53 A4    MOV   [__r0],A
    1753: 5A A3    MOV   [__r1],X
    1755: 20       POP   X
    1756: 51 A3    MOV   A,[__r1]
    1758: 54 01    MOV   [X+1],A
    175A: 51 A4    MOV   A,[__r0]
    175C: 54 00    MOV   [X+0],A
(0235) #ifdef DEBUG_INFO
(0236) 	DebugWriteParam(pArg);
(0237) #endif
(0238) 	if (pArg != NULL)
    175E: 3D 00 00 CMP   [X+0],0x0
    1761: B0 06    JNZ   0x1768
    1763: 3D 01 00 CMP   [X+1],0x0
    1766: A0 1E    JZ    0x1785
(0239) 	    commandGuid = atoi(pArg);
    1768: 52 00    MOV   A,[X+0]
    176A: 08       PUSH  A
    176B: 52 01    MOV   A,[X+1]
    176D: 08       PUSH  A
    176E: 7C 1E 89 LCALL _atoi
    1771: 38 FE    ADD   SP,0xFE
    1773: 62 D0 00 MOV   REG[0xD0],0x0
    1776: 51 A3    MOV   A,[__r1]
    1778: 08       PUSH  A
    1779: 51 A4    MOV   A,[__r0]
    177B: 62 D0 00 MOV   REG[0xD0],0x0
    177E: 53 B3    MOV   [commandGuid],A
    1780: 18       POP   A
    1781: 53 B4    MOV   [commandGuid+1],A
    1783: 80 0A    JMP   0x178E
(0240) 	else 
(0241) 		commandGuid = -1;
    1785: 62 D0 00 MOV   REG[0xD0],0x0
    1788: 55 B4 FF MOV   [commandGuid+1],0xFF
    178B: 55 B3 FF MOV   [commandGuid],0xFF
(0242) 	
(0243) 	pArg = UART_szGetParam();
    178E: 10       PUSH  X
    178F: 7C 13 C1 LCALL _UART_szGetParam
    1792: 62 D0 00 MOV   REG[0xD0],0x0
    1795: 53 A4    MOV   [__r0],A
    1797: 5A A3    MOV   [__r1],X
    1799: 20       POP   X
    179A: 51 A3    MOV   A,[__r1]
    179C: 54 01    MOV   [X+1],A
    179E: 51 A4    MOV   A,[__r0]
    17A0: 54 00    MOV   [X+0],A
(0244) #ifdef DEBUG_INFO
(0245) 	DebugWriteParam(pArg);
(0246) #endif
(0247) 	if (pArg != NULL)
    17A2: 3D 00 00 CMP   [X+0],0x0
    17A5: B0 06    JNZ   0x17AC
    17A7: 3D 01 00 CMP   [X+1],0x0
    17AA: A0 19    JZ    0x17C4
(0248) 	    endCommandGuid = atoi(pArg);
    17AC: 52 00    MOV   A,[X+0]
    17AE: 08       PUSH  A
    17AF: 52 01    MOV   A,[X+1]
    17B1: 08       PUSH  A
    17B2: 7C 1E 89 LCALL _atoi
    17B5: 38 FE    ADD   SP,0xFE
    17B7: 62 D0 00 MOV   REG[0xD0],0x0
    17BA: 51 A3    MOV   A,[__r1]
    17BC: 54 03    MOV   [X+3],A
    17BE: 51 A4    MOV   A,[__r0]
    17C0: 54 02    MOV   [X+2],A
    17C2: 80 07    JMP   0x17CA
(0249) 	else 
(0250) 		endCommandGuid = -1;
    17C4: 56 03 FF MOV   [X+3],0xFF
    17C7: 56 02 FF MOV   [X+2],0xFF
(0251) 
(0252) 	commandReady = commandGuid == endCommandGuid && commandGuid >= 0;
    17CA: 62 D0 00 MOV   REG[0xD0],0x0
    17CD: 51 B3    MOV   A,[commandGuid]
    17CF: 3B 02    CMP   A,[X+2]
    17D1: B0 1E    JNZ   0x17F0
    17D3: 51 B4    MOV   A,[commandGuid+1]
    17D5: 3B 03    CMP   A,[X+3]
    17D7: B0 18    JNZ   0x17F0
    17D9: 62 D0 00 MOV   REG[0xD0],0x0
    17DC: 51 B4    MOV   A,[commandGuid+1]
    17DE: 11 00    SUB   A,0x0
    17E0: 51 B3    MOV   A,[commandGuid]
    17E2: 31 80    XOR   A,0x80
    17E4: 19 80    SBB   A,0x80
    17E6: C0 09    JC    0x17F0
    17E8: 56 07 01 MOV   [X+7],0x1
    17EB: 56 06 00 MOV   [X+6],0x0
    17EE: 80 07    JMP   0x17F6
    17F0: 56 07 00 MOV   [X+7],0x0
    17F3: 56 06 00 MOV   [X+6],0x0
    17F6: 52 07    MOV   A,[X+7]
    17F8: 62 D0 00 MOV   REG[0xD0],0x0
    17FB: 53 BF    MOV   [commandReady],A
    17FD: 38 F8    ADD   SP,0xF8
    17FF: 20       POP   X
    1800: 7F       RET   
(0253) }
(0254) 
(0255) void CheckKeyboardCommand(void)
(0256) {
_CheckKeyboardCommand:
  isEndCommandSet      --> X+8
  endCommandGuid       --> X+6
  pPrevArg             --> X+4
  i                    --> X+2
  pArg                 --> X+0
    1801: 10       PUSH  X
    1802: 4F       MOV   X,SP
    1803: 38 0B    ADD   SP,0xB
(0257) 	char *pPrevArg;
(0258) 	char *pArg;
(0259) 	int i = 0;
    1805: 56 03 00 MOV   [X+3],0x0
    1808: 56 02 00 MOV   [X+2],0x0
(0260) 	int endCommandGuid = 0;
    180B: 56 07 00 MOV   [X+7],0x0
    180E: 56 06 00 MOV   [X+6],0x0
(0261) 	BOOL isEndCommandSet = FALSE;
    1811: 56 08 00 MOV   [X+8],0x0
(0262) 	
(0263) 	commandId = 1;
    1814: 62 D0 00 MOV   REG[0xD0],0x0
    1817: 55 B6 01 MOV   [commandId+1],0x1
    181A: 55 B5 00 MOV   [commandId],0x0
(0264) 	
(0265) 	pArg = UART_szGetParam();
    181D: 10       PUSH  X
    181E: 7C 13 C1 LCALL _UART_szGetParam
    1821: 62 D0 00 MOV   REG[0xD0],0x0
    1824: 53 A4    MOV   [__r0],A
    1826: 5A A3    MOV   [__r1],X
    1828: 20       POP   X
    1829: 51 A3    MOV   A,[__r1]
    182B: 54 01    MOV   [X+1],A
    182D: 51 A4    MOV   A,[__r0]
    182F: 54 00    MOV   [X+0],A
(0266) #ifdef DEBUG_INFO	
(0267) 	DebugWriteParam(pArg);
(0268) #endif
(0269) 	if (pArg != NULL)
    1831: 3D 00 00 CMP   [X+0],0x0
    1834: B0 06    JNZ   0x183B
    1836: 3D 01 00 CMP   [X+1],0x0
    1839: A0 1E    JZ    0x1858
(0270) 	    commandGuid = atoi(pArg);
    183B: 52 00    MOV   A,[X+0]
    183D: 08       PUSH  A
    183E: 52 01    MOV   A,[X+1]
    1840: 08       PUSH  A
    1841: 7C 1E 89 LCALL _atoi
    1844: 38 FE    ADD   SP,0xFE
    1846: 62 D0 00 MOV   REG[0xD0],0x0
    1849: 51 A3    MOV   A,[__r1]
    184B: 08       PUSH  A
    184C: 51 A4    MOV   A,[__r0]
    184E: 62 D0 00 MOV   REG[0xD0],0x0
    1851: 53 B3    MOV   [commandGuid],A
    1853: 18       POP   A
    1854: 53 B4    MOV   [commandGuid+1],A
    1856: 80 0A    JMP   0x1861
(0271) 	else 
(0272) 		commandGuid = -1;
    1858: 62 D0 00 MOV   REG[0xD0],0x0
    185B: 55 B4 FF MOV   [commandGuid+1],0xFF
    185E: 55 B3 FF MOV   [commandGuid],0xFF
(0273) 	
(0274) 	for (i = 0; i < KEYBOARD_DATA_LENGTH; i++)
    1861: 56 03 00 MOV   [X+3],0x0
    1864: 56 02 00 MOV   [X+2],0x0
(0275) 	{
(0276) 		pArg = UART_szGetParam();
    1867: 10       PUSH  X
    1868: 7C 13 C1 LCALL _UART_szGetParam
    186B: 62 D0 00 MOV   REG[0xD0],0x0
    186E: 53 A4    MOV   [__r0],A
    1870: 5A A3    MOV   [__r1],X
    1872: 20       POP   X
    1873: 51 A3    MOV   A,[__r1]
    1875: 54 01    MOV   [X+1],A
    1877: 51 A4    MOV   A,[__r0]
    1879: 54 00    MOV   [X+0],A
(0277) #ifdef DEBUG_INFO
(0278) 		DebugWriteParam(pArg);
(0279) #endif
(0280) 		sh = 0;
    187B: 62 D0 00 MOV   REG[0xD0],0x0
    187E: 55 BB 00 MOV   [sh],0x0
(0281) 		if (pArg != NULL)
    1881: 3D 00 00 CMP   [X+0],0x0
    1884: B0 06    JNZ   0x188B
    1886: 3D 01 00 CMP   [X+1],0x0
    1889: A0 13    JZ    0x189D
(0282) 		    hex2data(&sh, pArg);
    188B: 52 00    MOV   A,[X+0]
    188D: 08       PUSH  A
    188E: 52 01    MOV   A,[X+1]
    1890: 08       PUSH  A
    1891: 50 00    MOV   A,0x0
    1893: 08       PUSH  A
    1894: 50 BB    MOV   A,0xBB
    1896: 08       PUSH  A
    1897: 93 4C    CALL  _hex2data
    1899: 38 FC    ADD   SP,0xFC
    189B: 80 37    JMP   0x18D3
(0283) 		else if (pPrevArg != NULL)
    189D: 3D 04 00 CMP   [X+4],0x0
    18A0: B0 06    JNZ   0x18A7
    18A2: 3D 05 00 CMP   [X+5],0x0
    18A5: A0 2D    JZ    0x18D3
(0284) 		{
(0285) 			Keyboard_Data[i - 1] = 0;
    18A7: 62 D0 00 MOV   REG[0xD0],0x0
    18AA: 52 03    MOV   A,[X+3]
    18AC: 01 A4    ADD   A,0xA4
    18AE: 53 A3    MOV   [__r1],A
    18B0: 52 02    MOV   A,[X+2]
    18B2: 09 00    ADC   A,0x0
    18B4: 60 D5    MOV   REG[0xD5],A
    18B6: 50 00    MOV   A,0x0
    18B8: 3F A3    MVI   [__r1],A
(0286) 			isEndCommandSet = TRUE;
    18BA: 56 08 01 MOV   [X+8],0x1
(0287) 		    endCommandGuid = atoi(pPrevArg);
    18BD: 52 04    MOV   A,[X+4]
    18BF: 08       PUSH  A
    18C0: 52 05    MOV   A,[X+5]
    18C2: 08       PUSH  A
    18C3: 7C 1E 89 LCALL _atoi
    18C6: 38 FE    ADD   SP,0xFE
    18C8: 62 D0 00 MOV   REG[0xD0],0x0
    18CB: 51 A3    MOV   A,[__r1]
    18CD: 54 07    MOV   [X+7],A
    18CF: 51 A4    MOV   A,[__r0]
    18D1: 54 06    MOV   [X+6],A
(0288) 		}
(0289) 
(0290) 		Keyboard_Data[i] = sh;
    18D3: 62 D0 00 MOV   REG[0xD0],0x0
    18D6: 52 03    MOV   A,[X+3]
    18D8: 01 A5    ADD   A,0xA5
    18DA: 53 A3    MOV   [__r1],A
    18DC: 52 02    MOV   A,[X+2]
    18DE: 09 00    ADC   A,0x0
    18E0: 60 D5    MOV   REG[0xD5],A
    18E2: 62 D0 00 MOV   REG[0xD0],0x0
    18E5: 51 BB    MOV   A,[sh]
    18E7: 62 D0 00 MOV   REG[0xD0],0x0
    18EA: 3F A3    MVI   [__r1],A
(0291) #ifdef DEBUG_INFO
(0292) 		DebugWriteRx(sh);
(0293) #endif
(0294) 		pPrevArg = pArg;
    18EC: 52 01    MOV   A,[X+1]
    18EE: 54 05    MOV   [X+5],A
    18F0: 52 00    MOV   A,[X+0]
    18F2: 54 04    MOV   [X+4],A
(0295) 	}
    18F4: 77 03    INC   [X+3]
    18F6: 0F 02 00 ADC   [X+2],0x0
    18F9: 52 03    MOV   A,[X+3]
    18FB: 11 08    SUB   A,0x8
    18FD: 52 02    MOV   A,[X+2]
    18FF: 31 80    XOR   A,0x80
    1901: 19 80    SBB   A,0x80
    1903: CF 63    JC    0x1867
(0296) 	
(0297) 	if (!isEndCommandSet)
    1905: 3D 08 00 CMP   [X+8],0x0
    1908: B0 3D    JNZ   0x1946
(0298) 	{
(0299) 		pArg = UART_szGetParam();
    190A: 10       PUSH  X
    190B: 7C 13 C1 LCALL _UART_szGetParam
    190E: 62 D0 00 MOV   REG[0xD0],0x0
    1911: 53 A4    MOV   [__r0],A
    1913: 5A A3    MOV   [__r1],X
    1915: 20       POP   X
    1916: 51 A3    MOV   A,[__r1]
    1918: 54 01    MOV   [X+1],A
    191A: 51 A4    MOV   A,[__r0]
    191C: 54 00    MOV   [X+0],A
(0300) #ifdef DEBUG_INFO
(0301) 		DebugWriteParam(pArg);
(0302) #endif
(0303) 		if (pArg != NULL)
    191E: 3D 00 00 CMP   [X+0],0x0
    1921: B0 06    JNZ   0x1928
    1923: 3D 01 00 CMP   [X+1],0x0
    1926: A0 19    JZ    0x1940
(0304) 		    endCommandGuid = atoi(pArg);
    1928: 52 00    MOV   A,[X+0]
    192A: 08       PUSH  A
    192B: 52 01    MOV   A,[X+1]
    192D: 08       PUSH  A
    192E: 7C 1E 89 LCALL _atoi
    1931: 38 FE    ADD   SP,0xFE
    1933: 62 D0 00 MOV   REG[0xD0],0x0
    1936: 51 A3    MOV   A,[__r1]
    1938: 54 07    MOV   [X+7],A
    193A: 51 A4    MOV   A,[__r0]
    193C: 54 06    MOV   [X+6],A
    193E: 80 07    JMP   0x1946
(0305) 		else 
(0306) 			endCommandGuid = -1;
    1940: 56 07 FF MOV   [X+7],0xFF
    1943: 56 06 FF MOV   [X+6],0xFF
(0307) 	}
(0308) 	
(0309) 	commandReady = commandGuid == endCommandGuid && commandGuid >= 0;
    1946: 62 D0 00 MOV   REG[0xD0],0x0
    1949: 51 B3    MOV   A,[commandGuid]
    194B: 3B 06    CMP   A,[X+6]
    194D: B0 1E    JNZ   0x196C
    194F: 51 B4    MOV   A,[commandGuid+1]
    1951: 3B 07    CMP   A,[X+7]
    1953: B0 18    JNZ   0x196C
    1955: 62 D0 00 MOV   REG[0xD0],0x0
    1958: 51 B4    MOV   A,[commandGuid+1]
    195A: 11 00    SUB   A,0x0
    195C: 51 B3    MOV   A,[commandGuid]
    195E: 31 80    XOR   A,0x80
    1960: 19 80    SBB   A,0x80
    1962: C0 09    JC    0x196C
    1964: 56 0A 01 MOV   [X+10],0x1
    1967: 56 09 00 MOV   [X+9],0x0
    196A: 80 07    JMP   0x1972
    196C: 56 0A 00 MOV   [X+10],0x0
    196F: 56 09 00 MOV   [X+9],0x0
    1972: 52 0A    MOV   A,[X+10]
    1974: 62 D0 00 MOV   REG[0xD0],0x0
    1977: 53 BF    MOV   [commandReady],A
    1979: 38 F5    ADD   SP,0xF5
    197B: 20       POP   X
    197C: 7F       RET   
(0310) }
(0311) 
(0312) void CheckMouseCommand(void)
(0313) {
_CheckMouseCommand:
  endCommandGuid       --> X+4
  pArg                 --> X+2
  i                    --> X+0
    197D: 10       PUSH  X
    197E: 4F       MOV   X,SP
    197F: 38 08    ADD   SP,0x8
(0314) 	char *pArg;
(0315) 	int i = 0;
    1981: 56 01 00 MOV   [X+1],0x0
    1984: 56 00 00 MOV   [X+0],0x0
(0316) 	int endCommandGuid = 0;
    1987: 56 05 00 MOV   [X+5],0x0
    198A: 56 04 00 MOV   [X+4],0x0
(0317) 
(0318) 	commandId = 2;
    198D: 62 D0 00 MOV   REG[0xD0],0x0
    1990: 55 B6 02 MOV   [commandId+1],0x2
    1993: 55 B5 00 MOV   [commandId],0x0
(0319) 	
(0320) 	pArg = UART_szGetParam();
    1996: 10       PUSH  X
    1997: 7C 13 C1 LCALL _UART_szGetParam
    199A: 62 D0 00 MOV   REG[0xD0],0x0
    199D: 53 A4    MOV   [__r0],A
    199F: 5A A3    MOV   [__r1],X
    19A1: 20       POP   X
    19A2: 51 A3    MOV   A,[__r1]
    19A4: 54 03    MOV   [X+3],A
    19A6: 51 A4    MOV   A,[__r0]
    19A8: 54 02    MOV   [X+2],A
(0321) #ifdef DEBUG_INFO
(0322) 	DebugWriteParam(pArg);
(0323) #endif
(0324) 	if (pArg != NULL)
    19AA: 3D 02 00 CMP   [X+2],0x0
    19AD: B0 06    JNZ   0x19B4
    19AF: 3D 03 00 CMP   [X+3],0x0
    19B2: A0 1E    JZ    0x19D1
(0325) 	    commandGuid = atoi(pArg);
    19B4: 52 02    MOV   A,[X+2]
    19B6: 08       PUSH  A
    19B7: 52 03    MOV   A,[X+3]
    19B9: 08       PUSH  A
    19BA: 7C 1E 89 LCALL _atoi
    19BD: 38 FE    ADD   SP,0xFE
    19BF: 62 D0 00 MOV   REG[0xD0],0x0
    19C2: 51 A3    MOV   A,[__r1]
    19C4: 08       PUSH  A
    19C5: 51 A4    MOV   A,[__r0]
    19C7: 62 D0 00 MOV   REG[0xD0],0x0
    19CA: 53 B3    MOV   [commandGuid],A
    19CC: 18       POP   A
    19CD: 53 B4    MOV   [commandGuid+1],A
    19CF: 80 0A    JMP   0x19DA
(0326) 	else 
(0327) 		commandGuid = -1;
    19D1: 62 D0 00 MOV   REG[0xD0],0x0
    19D4: 55 B4 FF MOV   [commandGuid+1],0xFF
    19D7: 55 B3 FF MOV   [commandGuid],0xFF
(0328) 	
(0329) 	for (i = 0; i < MOUSE_DATA_LENGTH; i++)
    19DA: 56 01 00 MOV   [X+1],0x0
    19DD: 56 00 00 MOV   [X+0],0x0
(0330) 	{
(0331) 		pArg = UART_szGetParam();
    19E0: 10       PUSH  X
    19E1: 7C 13 C1 LCALL _UART_szGetParam
    19E4: 62 D0 00 MOV   REG[0xD0],0x0
    19E7: 53 A4    MOV   [__r0],A
    19E9: 5A A3    MOV   [__r1],X
    19EB: 20       POP   X
    19EC: 51 A3    MOV   A,[__r1]
    19EE: 54 03    MOV   [X+3],A
    19F0: 51 A4    MOV   A,[__r0]
    19F2: 54 02    MOV   [X+2],A
(0332) #ifdef DEBUG_INFO
(0333) 		DebugWriteParam(pArg);
(0334) #endif
(0335) 		sh = 0;
    19F4: 62 D0 00 MOV   REG[0xD0],0x0
    19F7: 55 BB 00 MOV   [sh],0x0
(0336) 		if (pArg != NULL)
    19FA: 3D 02 00 CMP   [X+2],0x0
    19FD: B0 06    JNZ   0x1A04
    19FF: 3D 03 00 CMP   [X+3],0x0
    1A02: A0 11    JZ    0x1A14
(0337) 		    hex2data(&sh, pArg);
    1A04: 52 02    MOV   A,[X+2]
    1A06: 08       PUSH  A
    1A07: 52 03    MOV   A,[X+3]
    1A09: 08       PUSH  A
    1A0A: 50 00    MOV   A,0x0
    1A0C: 08       PUSH  A
    1A0D: 50 BB    MOV   A,0xBB
    1A0F: 08       PUSH  A
    1A10: 91 D3    CALL  _hex2data
    1A12: 38 FC    ADD   SP,0xFC
(0338) 		Mouse_Data[i] = sh;
    1A14: 62 D0 00 MOV   REG[0xD0],0x0
    1A17: 52 01    MOV   A,[X+1]
    1A19: 01 AD    ADD   A,0xAD
    1A1B: 53 A3    MOV   [__r1],A
    1A1D: 52 00    MOV   A,[X+0]
    1A1F: 09 00    ADC   A,0x0
    1A21: 60 D5    MOV   REG[0xD5],A
    1A23: 62 D0 00 MOV   REG[0xD0],0x0
    1A26: 51 BB    MOV   A,[sh]
    1A28: 62 D0 00 MOV   REG[0xD0],0x0
    1A2B: 3F A3    MVI   [__r1],A
(0339) #ifdef DEBUG_INFO
(0340) 		DebugWriteRx(sh);
(0341) #endif
(0342) 	}
    1A2D: 77 01    INC   [X+1]
    1A2F: 0F 00 00 ADC   [X+0],0x0
    1A32: 52 01    MOV   A,[X+1]
    1A34: 11 03    SUB   A,0x3
    1A36: 52 00    MOV   A,[X+0]
    1A38: 31 80    XOR   A,0x80
    1A3A: 19 80    SBB   A,0x80
    1A3C: CF A3    JC    0x19E0
(0343) 	
(0344) 	pArg = UART_szGetParam();
    1A3E: 10       PUSH  X
    1A3F: 7C 13 C1 LCALL _UART_szGetParam
    1A42: 62 D0 00 MOV   REG[0xD0],0x0
    1A45: 53 A4    MOV   [__r0],A
    1A47: 5A A3    MOV   [__r1],X
    1A49: 20       POP   X
    1A4A: 51 A3    MOV   A,[__r1]
    1A4C: 54 03    MOV   [X+3],A
    1A4E: 51 A4    MOV   A,[__r0]
    1A50: 54 02    MOV   [X+2],A
(0345) #ifdef DEBUG_INFO
(0346) 	DebugWriteParam(pArg);
(0347) #endif
(0348) 	if (pArg != NULL)
    1A52: 3D 02 00 CMP   [X+2],0x0
    1A55: B0 06    JNZ   0x1A5C
    1A57: 3D 03 00 CMP   [X+3],0x0
    1A5A: A0 19    JZ    0x1A74
(0349) 	    endCommandGuid = atoi(pArg);
    1A5C: 52 02    MOV   A,[X+2]
    1A5E: 08       PUSH  A
    1A5F: 52 03    MOV   A,[X+3]
    1A61: 08       PUSH  A
    1A62: 7C 1E 89 LCALL _atoi
    1A65: 38 FE    ADD   SP,0xFE
    1A67: 62 D0 00 MOV   REG[0xD0],0x0
    1A6A: 51 A3    MOV   A,[__r1]
    1A6C: 54 05    MOV   [X+5],A
    1A6E: 51 A4    MOV   A,[__r0]
    1A70: 54 04    MOV   [X+4],A
    1A72: 80 07    JMP   0x1A7A
(0350) 	else 
(0351) 		endCommandGuid = -1;
    1A74: 56 05 FF MOV   [X+5],0xFF
    1A77: 56 04 FF MOV   [X+4],0xFF
(0352) 
(0353) 	commandReady = commandGuid == endCommandGuid && commandGuid >= 0;
    1A7A: 62 D0 00 MOV   REG[0xD0],0x0
    1A7D: 51 B3    MOV   A,[commandGuid]
    1A7F: 3B 04    CMP   A,[X+4]
    1A81: B0 1E    JNZ   0x1AA0
    1A83: 51 B4    MOV   A,[commandGuid+1]
    1A85: 3B 05    CMP   A,[X+5]
    1A87: B0 18    JNZ   0x1AA0
    1A89: 62 D0 00 MOV   REG[0xD0],0x0
    1A8C: 51 B4    MOV   A,[commandGuid+1]
    1A8E: 11 00    SUB   A,0x0
    1A90: 51 B3    MOV   A,[commandGuid]
    1A92: 31 80    XOR   A,0x80
    1A94: 19 80    SBB   A,0x80
    1A96: C0 09    JC    0x1AA0
    1A98: 56 07 01 MOV   [X+7],0x1
    1A9B: 56 06 00 MOV   [X+6],0x0
    1A9E: 80 07    JMP   0x1AA6
    1AA0: 56 07 00 MOV   [X+7],0x0
    1AA3: 56 06 00 MOV   [X+6],0x0
    1AA6: 52 07    MOV   A,[X+7]
    1AA8: 62 D0 00 MOV   REG[0xD0],0x0
    1AAB: 53 BF    MOV   [commandReady],A
    1AAD: 38 F8    ADD   SP,0xF8
    1AAF: 20       POP   X
    1AB0: 7F       RET   
(0354) }
(0355) 
(0356) void CheckGamepadCommand(void)
(0357) {
_CheckGamepadCommand:
  endCommandGuid       --> X+4
  pArg                 --> X+2
  i                    --> X+0
    1AB1: 10       PUSH  X
    1AB2: 4F       MOV   X,SP
    1AB3: 38 08    ADD   SP,0x8
(0358) 	char *pArg;
(0359) 	int i = 0;
    1AB5: 56 01 00 MOV   [X+1],0x0
    1AB8: 56 00 00 MOV   [X+0],0x0
(0360) 	int endCommandGuid = 0;
    1ABB: 56 05 00 MOV   [X+5],0x0
    1ABE: 56 04 00 MOV   [X+4],0x0
(0361) 
(0362) 	commandId = 3;
    1AC1: 62 D0 00 MOV   REG[0xD0],0x0
    1AC4: 55 B6 03 MOV   [commandId+1],0x3
    1AC7: 55 B5 00 MOV   [commandId],0x0
(0363) 	
(0364) 	pArg = UART_szGetParam();
    1ACA: 10       PUSH  X
    1ACB: 7C 13 C1 LCALL _UART_szGetParam
    1ACE: 62 D0 00 MOV   REG[0xD0],0x0
    1AD1: 53 A4    MOV   [__r0],A
    1AD3: 5A A3    MOV   [__r1],X
    1AD5: 20       POP   X
    1AD6: 51 A3    MOV   A,[__r1]
    1AD8: 54 03    MOV   [X+3],A
    1ADA: 51 A4    MOV   A,[__r0]
    1ADC: 54 02    MOV   [X+2],A
(0365) #ifdef DEBUG_INFO
(0366) 	DebugWriteParam(pArg);
(0367) #endif
(0368) 	if (pArg != NULL)
    1ADE: 3D 02 00 CMP   [X+2],0x0
    1AE1: B0 06    JNZ   0x1AE8
    1AE3: 3D 03 00 CMP   [X+3],0x0
    1AE6: A0 1E    JZ    0x1B05
(0369) 	    commandGuid = atoi(pArg);
    1AE8: 52 02    MOV   A,[X+2]
    1AEA: 08       PUSH  A
    1AEB: 52 03    MOV   A,[X+3]
    1AED: 08       PUSH  A
    1AEE: 7C 1E 89 LCALL _atoi
    1AF1: 38 FE    ADD   SP,0xFE
    1AF3: 62 D0 00 MOV   REG[0xD0],0x0
    1AF6: 51 A3    MOV   A,[__r1]
    1AF8: 08       PUSH  A
    1AF9: 51 A4    MOV   A,[__r0]
    1AFB: 62 D0 00 MOV   REG[0xD0],0x0
    1AFE: 53 B3    MOV   [commandGuid],A
    1B00: 18       POP   A
    1B01: 53 B4    MOV   [commandGuid+1],A
    1B03: 80 0A    JMP   0x1B0E
(0370) 	else 
(0371) 		commandGuid = -1;
    1B05: 62 D0 00 MOV   REG[0xD0],0x0
    1B08: 55 B4 FF MOV   [commandGuid+1],0xFF
    1B0B: 55 B3 FF MOV   [commandGuid],0xFF
(0372) 	
(0373) 	for (i = 0; i < GAMEPAD_DATA_LENGTH; i++)
    1B0E: 56 01 00 MOV   [X+1],0x0
    1B11: 56 00 00 MOV   [X+0],0x0
(0374) 	{
(0375) 		pArg = UART_szGetParam();
    1B14: 10       PUSH  X
    1B15: 7C 13 C1 LCALL _UART_szGetParam
    1B18: 62 D0 00 MOV   REG[0xD0],0x0
    1B1B: 53 A4    MOV   [__r0],A
    1B1D: 5A A3    MOV   [__r1],X
    1B1F: 20       POP   X
    1B20: 51 A3    MOV   A,[__r1]
    1B22: 54 03    MOV   [X+3],A
    1B24: 51 A4    MOV   A,[__r0]
    1B26: 54 02    MOV   [X+2],A
(0376) #ifdef DEBUG_INFO
(0377) 		DebugWriteParam(pArg);
(0378) #endif
(0379) 		sh = 0;
    1B28: 62 D0 00 MOV   REG[0xD0],0x0
    1B2B: 55 BB 00 MOV   [sh],0x0
(0380) 		if (pArg != NULL)
    1B2E: 3D 02 00 CMP   [X+2],0x0
    1B31: B0 06    JNZ   0x1B38
    1B33: 3D 03 00 CMP   [X+3],0x0
    1B36: A0 11    JZ    0x1B48
(0381) 		    hex2data(&sh, pArg);
    1B38: 52 02    MOV   A,[X+2]
    1B3A: 08       PUSH  A
    1B3B: 52 03    MOV   A,[X+3]
    1B3D: 08       PUSH  A
    1B3E: 50 00    MOV   A,0x0
    1B40: 08       PUSH  A
    1B41: 50 BB    MOV   A,0xBB
    1B43: 08       PUSH  A
    1B44: 90 9F    CALL  _hex2data
    1B46: 38 FC    ADD   SP,0xFC
(0382) 		Gamepad_Data[i] = sh;
    1B48: 62 D0 00 MOV   REG[0xD0],0x0
    1B4B: 52 01    MOV   A,[X+1]
    1B4D: 01 B0    ADD   A,0xB0
    1B4F: 53 A3    MOV   [__r1],A
    1B51: 52 00    MOV   A,[X+0]
    1B53: 09 00    ADC   A,0x0
    1B55: 60 D5    MOV   REG[0xD5],A
    1B57: 62 D0 00 MOV   REG[0xD0],0x0
    1B5A: 51 BB    MOV   A,[sh]
    1B5C: 62 D0 00 MOV   REG[0xD0],0x0
    1B5F: 3F A3    MVI   [__r1],A
(0383) #ifdef DEBUG_INFO
(0384) 		DebugWriteRx(sh);
(0385) #endif
(0386) 	}
    1B61: 77 01    INC   [X+1]
    1B63: 0F 00 00 ADC   [X+0],0x0
    1B66: 52 01    MOV   A,[X+1]
    1B68: 11 03    SUB   A,0x3
    1B6A: 52 00    MOV   A,[X+0]
    1B6C: 31 80    XOR   A,0x80
    1B6E: 19 80    SBB   A,0x80
    1B70: CF A3    JC    0x1B14
(0387) 	
(0388) 	pArg = UART_szGetParam();
    1B72: 10       PUSH  X
    1B73: 7C 13 C1 LCALL _UART_szGetParam
    1B76: 62 D0 00 MOV   REG[0xD0],0x0
    1B79: 53 A4    MOV   [__r0],A
    1B7B: 5A A3    MOV   [__r1],X
    1B7D: 20       POP   X
    1B7E: 51 A3    MOV   A,[__r1]
    1B80: 54 03    MOV   [X+3],A
    1B82: 51 A4    MOV   A,[__r0]
    1B84: 54 02    MOV   [X+2],A
(0389) #ifdef DEBUG_INFO
(0390) 	DebugWriteParam(pArg);
(0391) #endif
(0392) 	if (pArg != NULL)
    1B86: 3D 02 00 CMP   [X+2],0x0
    1B89: B0 06    JNZ   0x1B90
    1B8B: 3D 03 00 CMP   [X+3],0x0
    1B8E: A0 19    JZ    0x1BA8
(0393) 	    endCommandGuid = atoi(pArg);
    1B90: 52 02    MOV   A,[X+2]
    1B92: 08       PUSH  A
    1B93: 52 03    MOV   A,[X+3]
    1B95: 08       PUSH  A
    1B96: 7C 1E 89 LCALL _atoi
    1B99: 38 FE    ADD   SP,0xFE
    1B9B: 62 D0 00 MOV   REG[0xD0],0x0
    1B9E: 51 A3    MOV   A,[__r1]
    1BA0: 54 05    MOV   [X+5],A
    1BA2: 51 A4    MOV   A,[__r0]
    1BA4: 54 04    MOV   [X+4],A
    1BA6: 80 07    JMP   0x1BAE
(0394) 	else 
(0395) 		endCommandGuid = -1;
    1BA8: 56 05 FF MOV   [X+5],0xFF
    1BAB: 56 04 FF MOV   [X+4],0xFF
(0396) 
(0397) 	commandReady = commandGuid == endCommandGuid && commandGuid >= 0;
    1BAE: 62 D0 00 MOV   REG[0xD0],0x0
    1BB1: 51 B3    MOV   A,[commandGuid]
    1BB3: 3B 04    CMP   A,[X+4]
    1BB5: B0 1E    JNZ   0x1BD4
    1BB7: 51 B4    MOV   A,[commandGuid+1]
    1BB9: 3B 05    CMP   A,[X+5]
    1BBB: B0 18    JNZ   0x1BD4
    1BBD: 62 D0 00 MOV   REG[0xD0],0x0
    1BC0: 51 B4    MOV   A,[commandGuid+1]
    1BC2: 11 00    SUB   A,0x0
    1BC4: 51 B3    MOV   A,[commandGuid]
    1BC6: 31 80    XOR   A,0x80
    1BC8: 19 80    SBB   A,0x80
    1BCA: C0 09    JC    0x1BD4
    1BCC: 56 07 01 MOV   [X+7],0x1
    1BCF: 56 06 00 MOV   [X+6],0x0
    1BD2: 80 07    JMP   0x1BDA
    1BD4: 56 07 00 MOV   [X+7],0x0
    1BD7: 56 06 00 MOV   [X+6],0x0
    1BDA: 52 07    MOV   A,[X+7]
    1BDC: 62 D0 00 MOV   REG[0xD0],0x0
    1BDF: 53 BF    MOV   [commandReady],A
    1BE1: 38 F8    ADD   SP,0xF8
    1BE3: 20       POP   X
    1BE4: 7F       RET   
(0398) }
(0399) 
(0400) //convert hexstring to len bytes of data
(0401) //returns 0 on success, -1 on error
(0402) //data is a buffer of two bytes
(0403) //hexstring is upper or lower case hexadecimal, NOT prepended with "0x"
(0404) int hex2data(char *data, char *hexstring)
(0405) {
_hex2data:
  endptr               --> X+5
  buf                  --> X+0
  hexstring            --> X-7
  data                 --> X-5
    1BE5: 10       PUSH  X
    1BE6: 4F       MOV   X,SP
    1BE7: 38 07    ADD   SP,0x7
(0406)     char *endptr;
(0407) 	char buf[5];
(0408) 
(0409)     if ((hexstring[0] == '\0') || (strlen(hexstring) % 2)) {
    1BE9: 62 D0 00 MOV   REG[0xD0],0x0
    1BEC: 52 FA    MOV   A,[X-6]
    1BEE: 53 A3    MOV   [__r1],A
    1BF0: 52 F9    MOV   A,[X-7]
    1BF2: 60 D4    MOV   REG[0xD4],A
    1BF4: 3E A3    MVI   A,[__r1]
    1BF6: 39 00    CMP   A,0x0
    1BF8: A0 1C    JZ    0x1C15
    1BFA: 52 F9    MOV   A,[X-7]
    1BFC: 08       PUSH  A
    1BFD: 52 FA    MOV   A,[X-6]
    1BFF: 08       PUSH  A
    1C00: 7C 1E 57 LCALL _strlenLMM
    1C03: 38 FE    ADD   SP,0xFE
    1C05: 62 D0 00 MOV   REG[0xD0],0x0
    1C08: 26 A3 01 AND   [__r1],0x1
    1C0B: 26 A4 00 AND   [__r0],0x0
    1C0E: B0 06    JNZ   0x1C15
    1C10: 3C A3 00 CMP   [__r1],0x0
    1C13: A0 0C    JZ    0x1C20
(0410)         //hexstring contains no data
(0411)         //or hexstring has an odd length
(0412)         return -1;
    1C15: 62 D0 00 MOV   REG[0xD0],0x0
    1C18: 55 A3 FF MOV   [__r1],0xFF
    1C1B: 55 A4 FF MOV   [__r0],0xFF
    1C1E: 80 AA    JMP   0x1CC9
(0413)     }
(0414) 
(0415)     if ((hexstring[0] == '0') && (hexstring[1] == '0')) {
    1C20: 62 D0 00 MOV   REG[0xD0],0x0
    1C23: 52 FA    MOV   A,[X-6]
    1C25: 53 A3    MOV   [__r1],A
    1C27: 52 F9    MOV   A,[X-7]
    1C29: 60 D4    MOV   REG[0xD4],A
    1C2B: 3E A3    MVI   A,[__r1]
    1C2D: 39 30    CMP   A,0x30
    1C2F: B0 27    JNZ   0x1C57
    1C31: 52 FA    MOV   A,[X-6]
    1C33: 01 01    ADD   A,0x1
    1C35: 53 A3    MOV   [__r1],A
    1C37: 52 F9    MOV   A,[X-7]
    1C39: 09 00    ADC   A,0x0
    1C3B: 60 D4    MOV   REG[0xD4],A
    1C3D: 3E A3    MVI   A,[__r1]
    1C3F: 39 30    CMP   A,0x30
    1C41: B0 15    JNZ   0x1C57
(0416) 		*data = '0';
    1C43: 52 FC    MOV   A,[X-4]
    1C45: 53 A3    MOV   [__r1],A
    1C47: 52 FB    MOV   A,[X-5]
    1C49: 60 D5    MOV   REG[0xD5],A
    1C4B: 50 30    MOV   A,0x30
    1C4D: 3F A3    MVI   [__r1],A
(0417) 	    return 0;
    1C4F: 55 A3 00 MOV   [__r1],0x0
    1C52: 55 A4 00 MOV   [__r0],0x0
    1C55: 80 73    JMP   0x1CC9
(0418) 	}
(0419) 	
(0420)     buf[0] = '0';
    1C57: 56 00 30 MOV   [X+0],0x30
(0421) 	buf[1] = 'x';
    1C5A: 56 01 78 MOV   [X+1],0x78
(0422) 	buf[2] = hexstring[0];
    1C5D: 62 D0 00 MOV   REG[0xD0],0x0
    1C60: 52 FA    MOV   A,[X-6]
    1C62: 53 A3    MOV   [__r1],A
    1C64: 52 F9    MOV   A,[X-7]
    1C66: 60 D4    MOV   REG[0xD4],A
    1C68: 3E A3    MVI   A,[__r1]
    1C6A: 54 02    MOV   [X+2],A
(0423) 	buf[3] = hexstring[1];
    1C6C: 52 FA    MOV   A,[X-6]
    1C6E: 01 01    ADD   A,0x1
    1C70: 53 A3    MOV   [__r1],A
    1C72: 52 F9    MOV   A,[X-7]
    1C74: 09 00    ADC   A,0x0
    1C76: 60 D4    MOV   REG[0xD4],A
    1C78: 3E A3    MVI   A,[__r1]
    1C7A: 54 03    MOV   [X+3],A
(0424) 	buf[4] = 0;
    1C7C: 56 04 00 MOV   [X+4],0x0
(0425)     data[0] = strtol(buf, &endptr, 0);
    1C7F: 50 00    MOV   A,0x0
    1C81: 08       PUSH  A
    1C82: 08       PUSH  A
    1C83: 5A A3    MOV   [__r1],X
    1C85: 06 A3 05 ADD   [__r1],0x5
    1C88: 50 03    MOV   A,0x3
    1C8A: 08       PUSH  A
    1C8B: 51 A3    MOV   A,[__r1]
    1C8D: 08       PUSH  A
    1C8E: 50 03    MOV   A,0x3
    1C90: 08       PUSH  A
    1C91: 10       PUSH  X
    1C92: 7C 21 A3 LCALL _strtol
    1C95: 38 FA    ADD   SP,0xFA
    1C97: 62 D0 00 MOV   REG[0xD0],0x0
    1C9A: 51 A1    MOV   A,[__r3]
    1C9C: 53 A4    MOV   [__r0],A
    1C9E: 52 FC    MOV   A,[X-4]
    1CA0: 53 A1    MOV   [__r3],A
    1CA2: 52 FB    MOV   A,[X-5]
    1CA4: 60 D5    MOV   REG[0xD5],A
    1CA6: 51 A4    MOV   A,[__r0]
    1CA8: 3F A1    MVI   [__r3],A
(0426) 
(0427)     if (endptr[0] != '\0') {
    1CAA: 52 06    MOV   A,[X+6]
    1CAC: 53 A3    MOV   [__r1],A
    1CAE: 52 05    MOV   A,[X+5]
    1CB0: 60 D4    MOV   REG[0xD4],A
    1CB2: 3E A3    MVI   A,[__r1]
    1CB4: 39 00    CMP   A,0x0
    1CB6: A0 09    JZ    0x1CC0
(0428)         //non-hexadecimal character encountered
(0429)         return -1;
    1CB8: 55 A3 FF MOV   [__r1],0xFF
    1CBB: 55 A4 FF MOV   [__r0],0xFF
    1CBE: 80 0A    JMP   0x1CC9
(0430)     }
(0431) 
(0432)     return 0;
    1CC0: 62 D0 00 MOV   REG[0xD0],0x0
(0433) }
(0434) 
(0435) //void uartRxISR(void)
(0436) //{
(0437) //    while (UART_bReadRxStatus() & UART_RX_REG_FULL)
(0438) //		ProcessByte(UART_bReadRxData());
(0439) //}
(0440) 
(0441) //void ProcessByte(BYTE b)
(0442) //{
(0443) //
(0444) //#ifdef DEBUG	
(0445) //	//DebugWriteRx(b);
(0446) //#endif
(0447) //
(0448) //	if (dataIndex < 0)
(0449) //	{
(0450) //		switch ((int)b)
(0451) //		{
(0452) //			case  1:
(0453) //				commandId = 1;
(0454) //				dataIndex = 0;
(0455) //				break;
(0456) //			case  2:
(0457) //				commandId = 2;
(0458) //				dataIndex = 0;
(0459) //				break;
(0460) //			case  3:
(0461) //				commandId = 3;
(0462) //				dataIndex = 0;
(0463) //				break;
(0464) //		}
(0465) //	}
(0466) //	else 
(0467) //	{
(0468) //		switch (commandId)
(0469) //		{
(0470) //			case  1:
(0471) //				Keyboard_Data[dataIndex] = b;
(0472) //				dataIndex ++;
(0473) //				if (dataIndex >= KEYBOARD_DATA_LENGTH)
(0474) //				{
(0475) //					commandReady = TRUE;
(0476) //					dataIndex = -1;
(0477) //				}
(0478) //				break;
(0479) //			case  2:
(0480) //				Mouse_Data[dataIndex] = b;
(0481) //				dataIndex ++;
(0482) //				if (dataIndex >= MOUSE_DATA_LENGTH)
(0483) //				{
(0484) //					commandReady = TRUE;
(0485) //					dataIndex = -1;
(0486) //				}
(0487) //				break;
(0488) //			case  3:
(0489) //				Gamepad_Data[dataIndex] = b;
(0490) //				dataIndex ++;
(0491) //				if (dataIndex >= GAMEPAD_DATA_LENGTH)
(0492) //				{
(0493) //					commandReady = TRUE;
(0494) //					dataIndex = -1;
(0495) //				}
(0496) //				break;
(0497) //		}
(0498) //	}
(0499) //}
(0500) 
(0501) #ifdef DEBUG	
(0502) 
(0503) void DebugWriteKeyboard(void)
(0504) {
(0505) 	char str[64];
(0506) 	int len = csprintf(str, "K|%x|%x|%x|%x|%x|%x|%x|%x", 
(0507) 	Keyboard_Data[0],
(0508) 	Keyboard_Data[1],
(0509) 	Keyboard_Data[2],
(0510) 	Keyboard_Data[3],
(0511) 	Keyboard_Data[4],
(0512) 	Keyboard_Data[5],
(0513) 	Keyboard_Data[6],
(0514) 	Keyboard_Data[7]);
(0515) 	UART_PutChar(len);
(0516) 	UART_PutString(str);
(0517) }
(0518) 
(0519) void DebugWriteMouse(void)
(0520) {
(0521) 	char str[16];
(0522) 	int len = csprintf(str, "M|%x|%x|%x", 
(0523) 	Mouse_Data[0],
(0524) 	Mouse_Data[1],
(0525) 	Mouse_Data[2]);
(0526) 	UART_PutChar(len);
(0527) 	UART_PutString(str);
(0528) }
(0529) 
(0530) void DebugWriteGamepad(void)
(0531) {
(0532) 	char str[16];
(0533) 	int len = csprintf(str, "J|%x|%x|%x", 
(0534) 	Gamepad_Data[0],
(0535) 	Gamepad_Data[1],
(0536) 	Gamepad_Data[2]);
(0537) 	UART_PutChar(len);
(0538) 	UART_PutString(str);
(0539) }
(0540) 
(0541) void DebugWriteUNKNOWN(void)
(0542) {
(0543) 	char str[16] = "UNKNOWN";
(0544) 	UART_PutChar(7);
(0545) 	UART_PutString(str);
(0546) }
(0547) 
(0548) void DebugWriteRx(BYTE b)
(0549) {
(0550) 	char str[16];
(0551) 	int len = csprintf(str, "BC[%x]", b);
(0552) 	UART_PutChar(len);
(0553) 	UART_PutString(str);
(0554) }
(0555) 
(0556) void DebugWriteParam(char* s)
(0557) {
(0558) 	char str[16];
(0559) 	int len = csprintf(str, "[%s]", s);
(0560) 	UART_PutChar(len);
(0561) 	UART_PutString(str);
(0562) }
(0563) 
(0564) #endif
FILE: lib\usbfsint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFSCommon.asm
                                        (0004) ;;  Version: 2.10, Updated on 2015/3/4 at 22:27:56
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "USBFS.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    USBFS_EP1_ISR
                                        (0043) export   _USBFS_EP1_ISR
                                        (0044) export    USBFS_EP2_ISR
                                        (0045) export   _USBFS_EP2_ISR
                                        (0046) export    USBFS_EP3_ISR
                                        (0047) export   _USBFS_EP3_ISR
                                        (0048) export    USBFS_EP4_ISR
                                        (0049) export   _USBFS_EP4_ISR
                                        (0050) export    USBFS_RESET_ISR
                                        (0051) export   _USBFS_RESET_ISR
                                        (0052) export    USBFS_SOF_ISR
                                        (0053) export   _USBFS_SOF_ISR
                                        (0054) export    USBFS_WAKEUP_ISR
                                        (0055) export   _USBFS_WAKEUP_ISR
                                        (0056) 
                                        (0057) 
                                        (0058) AREA InterruptRAM (RAM, REL, CON)
                                        (0059) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0060) ;---------------------------------------------------
                                        (0061) ; Insert your custom declarations below this banner
                                        (0062) ;---------------------------------------------------
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Includes
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;------------------------
                                        (0070) ;  Constant Definitions
                                        (0071) ;------------------------
                                        (0072) 
                                        (0073) 
                                        (0074) ;------------------------
                                        (0075) ; Variable Allocation
                                        (0076) ;------------------------
                                        (0077) 
                                        (0078) 
                                        (0079) ;---------------------------------------------------
                                        (0080) ; Insert your custom declarations above this banner
                                        (0081) ;---------------------------------------------------
                                        (0082) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0083) 
                                        (0084) AREA text (ROM, REL)
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: USBFS_EP1_ISR
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:    Handle the Endpoint 1 event by updating the data toggle
                                        (0090) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0091) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) export  USBFS_EP1_ISR
                                        (0094) export _USBFS_EP1_ISR
                                        (0095)  USBFS_EP1_ISR:
                                        (0096) _USBFS_EP1_ISR:
                                        (0097)    ;@PSoC_UserCode_BODY_EP1@ (Do not change this line.)
                                        (0098)    ;---------------------------------------------------
                                        (0099)    ; Insert your custom code below this banner
                                        (0100)    ;---------------------------------------------------
                                        (0101)    ;   NOTE: interrupt service routines must preserve
                                        (0102)    ;   the values of the A and X CPU registers.
                                        (0103) STD_EP1:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0104)                         ; endpoint handling code
                                        (0105)    ;---------------------------------------------------
                                        (0106)    ; Insert your custom code above this banner
                                        (0107)    ;---------------------------------------------------
                                        (0108)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0109) 
                                        (0110) IF  STD_EP1
1CCD: 08       PUSH  A                  (0111)     push    A
1CCE: 36 1E 02 XOR   [0x1E],0x2         (0112)     xor     [USBFS_EPDataToggle], 2 ; Update EP1 data toggle
1CD1: 71 10    OR    F,0x10             
                                        (0113)     M8C_SetBank1	; _EP1MODE is in Bank 1
1CD3: 5D C4    MOV   A,REG[0xC4]        (0114)     mov     A, reg[USBFS_EP1MODE]      ; Get the mode
1CD5: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
1CD7: 55 24 01 MOV   [0x24],0x1         (0116)     mov     [USBFS_EndpointAPIStatus+1], EVENT_PENDING ; For the API
1CDA: 18       POP   A                  (0117)     pop     A
1CDB: 7E       RETI                     (0118)     reti
                                        (0119) ENDIF
                                        (0120) 
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;  FUNCTION NAME: USBFS_EP2_ISR
                                        (0123) ;
                                        (0124) ;  DESCRIPTION:    Handle the Endpoint 2 event by updating the data toggle
                                        (0125) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0126) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) export  USBFS_EP2_ISR
                                        (0129) export _USBFS_EP2_ISR
                                        (0130)  USBFS_EP2_ISR:
                                        (0131) _USBFS_EP2_ISR:
                                        (0132) 
                                        (0133)    ;@PSoC_UserCode_BODY_EP2@ (Do not change this line.)
                                        (0134)    ;---------------------------------------------------
                                        (0135)    ; Insert your custom code below this banner
                                        (0136)    ;---------------------------------------------------
                                        (0137)    ;   NOTE: interrupt service routines must preserve
                                        (0138)    ;   the values of the A and X CPU registers.
                                        (0139) STD_EP2:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0140)                         ; endpoint handling code
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert your custom code above this banner
                                        (0143)    ;---------------------------------------------------
                                        (0144)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0145) 
                                        (0146) IF  STD_EP2
1CDC: 08       PUSH  A                  (0147)     push    A
1CDD: 36 1E 04 XOR   [0x1E],0x4         (0148)     xor     [USBFS_EPDataToggle], 4 ; Update EP2 data toggle
1CE0: 71 10    OR    F,0x10             
                                        (0149)     M8C_SetBank1
1CE2: 5D C5    MOV   A,REG[0xC5]        (0150)     mov     A, reg[USBFS_EP2MODE]      ; Get the mode
1CE4: 70 EF    AND   F,0xEF             
                                        (0151)     M8C_SetBank0
1CE6: 55 25 01 MOV   [0x25],0x1         (0152)     mov     [USBFS_EndpointAPIStatus + 2], EVENT_PENDING ; For the API
1CE9: 18       POP   A                  (0153)     pop     A
1CEA: 7E       RETI                     (0154)     reti
                                        (0155) ENDIF
                                        (0156) 
                                        (0157) 
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: USBFS_EP3_ISR
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:    Handle the Endpoint 3 event by updating the data toggle
                                        (0162) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0163) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  USBFS_EP3_ISR:
                                        (0166) _USBFS_EP3_ISR:
                                        (0167) 
                                        (0168)    ;@PSoC_UserCode_BODY_EP3@ (Do not change this line.)
                                        (0169)    ;---------------------------------------------------
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers.
                                        (0174) STD_EP3:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0175)                         ; endpoint handling code
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ; Insert your custom code above this banner
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0180) 
                                        (0181) IF  STD_EP3
1CEB: 08       PUSH  A                  (0182)     push    A
1CEC: 36 1E 08 XOR   [0x1E],0x8         (0183)     xor     [USBFS_EPDataToggle], 8 ; Update EP3 data toggle
1CEF: 71 10    OR    F,0x10             
                                        (0184)     M8C_SetBank1
1CF1: 5D C6    MOV   A,REG[0xC6]        (0185)     mov     A, reg[USBFS_EP3MODE]      ; Get the mode
1CF3: 70 EF    AND   F,0xEF             
                                        (0186)     M8C_SetBank0
1CF5: 55 26 01 MOV   [0x26],0x1         (0187)     mov     [USBFS_EndpointAPIStatus + 3], EVENT_PENDING ; For the API
1CF8: 18       POP   A                  (0188)     pop     A
1CF9: 7E       RETI                     (0189)     reti
                                        (0190) ENDIF
                                        (0191) 
                                        (0192) 
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: USBFS_EP4_ISR
                                        (0195) ;
                                        (0196) ;  DESCRIPTION:    Handle the Endpoint 4 event by updating the data toggle
                                        (0197) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0198) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200)  USBFS_EP4_ISR:
                                        (0201) _USBFS_EP4_ISR:
                                        (0202) 
                                        (0203)    ;@PSoC_UserCode_BODY_EP4@ (Do not change this line.)
                                        (0204)    ;---------------------------------------------------
                                        (0205)    ; Insert your custom code below this banner
                                        (0206)    ;---------------------------------------------------
                                        (0207)    ;   NOTE: interrupt service routines must preserve
                                        (0208)    ;   the values of the A and X CPU registers.
                                        (0209) STD_EP4:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0210)                         ; endpoint handling code
                                        (0211)    ;---------------------------------------------------
                                        (0212)    ; Insert your custom code above this banner
                                        (0213)    ;---------------------------------------------------
                                        (0214)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0215) 
                                        (0216) IF  STD_EP4
1CFA: 08       PUSH  A                  (0217)     push    A
1CFB: 36 1E 10 XOR   [0x1E],0x10        (0218)     xor     [USBFS_EPDataToggle], 16 ; Update EP4 data toggle
1CFE: 71 10    OR    F,0x10             
                                        (0219)     M8C_SetBank1
1D00: 5D C7    MOV   A,REG[0xC7]        (0220)     mov     A, reg[USBFS_EP4MODE]      ; Get the mode
1D02: 70 EF    AND   F,0xEF             
                                        (0221)     M8C_SetBank0
1D04: 55 27 01 MOV   [0x27],0x1         (0222)     mov     [USBFS_EndpointAPIStatus + 4], EVENT_PENDING ; For the API
1D07: 18       POP   A                  (0223)     pop     A
1D08: 7E       RETI                     (0224)     reti
                                        (0225) ENDIF
                                        (0226) 
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: USBFS_RESET_ISR
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:    Handle the USB Bus Reset Interrupt
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) export  USBFS_RESET_ISR
                                        (0234) export _USBFS_RESET_ISR
                                        (0235)  USBFS_RESET_ISR:
                                        (0236) _USBFS_RESET_ISR:
                                        (0237) ;   mov     [USBFS_Configuration], 0
                                        (0238) ;   mov     [USBFS_DeviceStatus], 0
                                        (0239) ;   mov     [USBFS_InterfaceSetting], 0
                                        (0240) ;   mov     [USBFS_EndpointStatus], 0
                                        (0241) ;   mov     [USBFS_TransferType], 0
                                        (0242) ;   mov     [USBFS_fDataPending], 0
                                        (0243) ;   mov     reg[USBFS_EP0MODE], USB_MODE_STALL_IN_OUT ; ACK Setup/Stall IN/OUT
                                        (0244) ;   mov     reg[USBFS_EP1MODE], 0
                                        (0245) ;   mov     reg[USBFS_EP2MODE], 0
                                        (0246) ;   mov     reg[USBFS_EP3MODE], 0
                                        (0247) ;   mov     reg[USBFS_EP4MODE], 0
                                        (0248) ;   mov     X, USB_MAX_EP_NUMBER       ; Set up loop to clear all of the endpoint data items
                                        (0249) ;.loop:
                                        (0250) ;   mov     [X + USBFS_EPDataToggle], 0  ; Or in the toggle
                                        (0251) ;   dec     X                          ; Are we done?
                                        (0252) ;   jnz     .loop                      ; Jump to do another endpoint
                                        (0253) 
                                        (0254) ;   mov     reg[USBFS_ADDR], USB_ADDR_ENABLE ; Enable Address 0
                                        (0255) 
                                        (0256)    ;@PSoC_UserCode_BODY_USB_RESET@ (Do not change this line.)
                                        (0257)    ;---------------------------------------------------
                                        (0258)    ; Insert your custom code below this banner
                                        (0259)    ;---------------------------------------------------
                                        (0260)    ;   NOTE: interrupt service routines must preserve
                                        (0261)    ;   the values of the A and X CPU registers.
                                        (0262) 
                                        (0263) STD_USB_RESET:    EQU     1 ; Set this equate to 0 to remove the standard
                                        (0264)                             ; USB reset handling code below
                                        (0265) 
                                        (0266)    ;---------------------------------------------------
                                        (0267)    ; Insert your custom code above this banner
                                        (0268)    ;---------------------------------------------------
                                        (0269)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0270) 
                                        (0271) IF  STD_USB_RESET
1D09: 08       PUSH  A                  (0272) 	push 	A
1D0A: 10       PUSH  X                  (0273) 	push    X
1D0B: 5D D0    MOV   A,REG[0xD0]        
1D0D: 08       PUSH  A                  
1D0E: 5D D3    MOV   A,REG[0xD3]        
1D10: 08       PUSH  A                  
1D11: 5D D4    MOV   A,REG[0xD4]        
1D13: 08       PUSH  A                  
1D14: 5D D5    MOV   A,REG[0xD5]        
1D16: 08       PUSH  A                  
1D17: 71 10    OR    F,0x10             
                                        (0274)     ISR_PRESERVE_PAGE_POINTERS
                                        (0275) 	M8C_SetBank1
1D19: 5D C1    MOV   A,REG[0xC1]        (0276) 	mov		A, reg[USBFS_USB_CR1]		          ; Get the RegEnable
1D1B: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
1D1D: 21 03    AND   A,0x3              (0278) 	and 	A, 0x03                          ; mask off the RegEnable and EnableLock bits
1D1F: 5C       MOV   X,A                (0279) 	mov		X, A                             ; save value in X
1D20: 51 00    MOV   A,[0x0]            (0280)     mov     A, [USBFS_bCurrentDevice]     ; Select the current device
1D22: 70 3F    AND   F,0x3F             
1D24: 71 C0    OR    F,0xC0             
                                        (0281)     RAM_RESTORE_NATIVE_PAGING
1D26: 7C 0F 52 LCALL _USBFS_Start       (0282) 	lcall   _USBFS_Start     ; Restart USB
1D29: 18       POP   A                  
1D2A: 60 D5    MOV   REG[0xD5],A        
1D2C: 18       POP   A                  
1D2D: 60 D4    MOV   REG[0xD4],A        
1D2F: 18       POP   A                  
1D30: 60 D3    MOV   REG[0xD3],A        
1D32: 18       POP   A                  
1D33: 60 D0    MOV   REG[0xD0],A        
                                        (0283)     ISR_RESTORE_PAGE_POINTERS
1D35: 20       POP   X                  (0284)     pop X
1D36: 18       POP   A                  (0285)     pop A
                                        (0286) 
                                        (0287) ENDIF
                                        (0288) 
1D37: 7E       RETI                     (0289) 	reti
                                        (0290) 
                                        (0291) 
                                        (0292) 
                                        (0293)  USBFS_SOF_ISR:
                                        (0294) _USBFS_SOF_ISR:
                                        (0295) 
                                        (0296)    ;@PSoC_UserCode_BODY_6@ (Do not change this line.)
                                        (0297)    ;---------------------------------------------------
                                        (0298)    ; Insert your custom assembly code below this banner
                                        (0299)    ;---------------------------------------------------
                                        (0300)    ;   NOTE: interrupt service routines must preserve
                                        (0301)    ;   the values of the A and X CPU registers.
                                        (0302)    
                                        (0303)    ;---------------------------------------------------
                                        (0304)    ; Insert your custom assembly code above this banner
                                        (0305)    ;---------------------------------------------------
                                        (0306)    
                                        (0307)    ;---------------------------------------------------
                                        (0308)    ; Insert a lcall to a C function below this banner
                                        (0309)    ; and un-comment the lines between these banners
                                        (0310)    ;---------------------------------------------------
                                        (0311)    
                                        (0312)    ;PRESERVE_CPU_CONTEXT
                                        (0313)    ;lcall _My_C_Function
                                        (0314)    ;RESTORE_CPU_CONTEXT
                                        (0315)    
                                        (0316)    ;---------------------------------------------------
                                        (0317)    ; Insert a lcall to a C function above this banner
                                        (0318)    ; and un-comment the lines between these banners
                                        (0319)    ;---------------------------------------------------
                                        (0320)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0321) 
1D38: 7E       RETI                     (0322)    reti
                                        (0323) 
                                        (0324)  USBFS_WAKEUP_ISR:
                                        (0325) _USBFS_WAKEUP_ISR:
                                        (0326) 
                                        (0327)    ;@PSoC_UserCode_BODY_7@ (Do not change this line.)
                                        (0328)    ;---------------------------------------------------
                                        (0329)    ; Insert your custom assembly code below this banner
                                        (0330)    ;---------------------------------------------------
                                        (0331)    ;   NOTE: interrupt service routines must preserve
                                        (0332)    ;   the values of the A and X CPU registers.
                                        (0333)    
                                        (0334)    ;---------------------------------------------------
                                        (0335)    ; Insert your custom assembly code above this banner
                                        (0336)    ;---------------------------------------------------
                                        (0337)    
                                        (0338)    ;---------------------------------------------------
                                        (0339)    ; Insert a lcall to a C function below this banner
                                        (0340)    ; and un-comment the lines between these banners
                                        (0341)    ;---------------------------------------------------
                                        (0342)    
                                        (0343)    ;PRESERVE_CPU_CONTEXT
                                        (0344)    ;lcall _My_C_Function
                                        (0345)    ;RESTORE_CPU_CONTEXT
                                        (0346)    
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ; Insert a lcall to a C function above this banner
                                        (0349)    ; and un-comment the lines between these banners
                                        (0350)    ;---------------------------------------------------
                                        (0351)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0352) 
1D39: 7E       RETI                     (0353)    reti
                                        (0354) 
                                        (0355) ; End of File USBFS.asm
_cstrcmpLMM:
    1E21: 62 D0 00 MOV   REG[0xD0],0x0
    1E24: 10       PUSH  X
    1E25: 4F       MOV   X,SP
    1E26: 52 F9    MOV   A,[X-7]
    1E28: 60 D4    MOV   REG[0xD4],A
    1E2A: 80 03    JMP   0x1E2E
_cstrcmp:
    1E2C: 10       PUSH  X
    1E2D: 4F       MOV   X,SP
    1E2E: 52 FA    MOV   A,[X-6]
    1E30: 53 A2    MOV   [__r2],A
    1E32: 10       PUSH  X
    1E33: 52 FB    MOV   A,[X-5]
    1E35: 59 FC    MOV   X,[X-4]
    1E37: 28       ROMX  
    1E38: 53 A3    MOV   [__r1],A
    1E3A: 20       POP   X
    1E3B: 77 FC    INC   [X-4]
    1E3D: 0F FB 00 ADC   [X-5],0x0
    1E40: 3E A2    MVI   A,[__r2]
    1E42: 14 A3    SUB   [__r1],A
    1E44: B0 05    JNZ   0x1E4A
    1E46: 39 00    CMP   A,0x0
    1E48: BF E9    JNZ   0x1E32
    1E4A: 55 A4 00 MOV   [__r0],0x0
    1E4D: 47 A3 80 TST   [__r1],0x80
    1E50: A0 04    JZ    0x1E55
    1E52: 55 A4 FF MOV   [__r0],0xFF
    1E55: 20       POP   X
    1E56: 7F       RET   
_strlenLMM:
    1E57: 62 D0 00 MOV   REG[0xD0],0x0
    1E5A: 10       PUSH  X
    1E5B: 4F       MOV   X,SP
    1E5C: 52 FB    MOV   A,[X-5]
    1E5E: 60 D4    MOV   REG[0xD4],A
    1E60: 80 03    JMP   0x1E64
_strlen:
    1E62: 10       PUSH  X
    1E63: 4F       MOV   X,SP
    1E64: 55 A3 00 MOV   [__r1],0x0
    1E67: 55 A4 00 MOV   [__r0],0x0
    1E6A: 52 FC    MOV   A,[X-4]
    1E6C: 53 A2    MOV   [__r2],A
    1E6E: 3E A2    MVI   A,[__r2]
    1E70: 39 00    CMP   A,0x0
    1E72: A0 08    JZ    0x1E7B
    1E74: 76 A3    INC   [__r1]
    1E76: 0E A4 00 ADC   [__r0],0x0
    1E79: 8F F4    JMP   0x1E6E
    1E7B: 20       POP   X
    1E7C: 7F       RET   
__plcall:
    1E7D: 53 9C    MOV   [__rX],A
    1E7F: 28       ROMX  
    1E80: 08       PUSH  A
    1E81: 51 9C    MOV   A,[__rX]
    1E83: 75       INC   X
    1E84: 09 00    ADC   A,0x0
    1E86: 28       ROMX  
    1E87: 08       PUSH  A
    1E88: 7F       RET   
_atoi:
    1E89: 10       PUSH  X
    1E8A: 4F       MOV   X,SP
    1E8B: 38 04    ADD   SP,0x4
    1E8D: 80 06    JMP   0x1E94
    1E8F: 77 FC    INC   [X-4]
    1E91: 0F FB 00 ADC   [X-5],0x0
    1E94: 62 D0 00 MOV   REG[0xD0],0x0
    1E97: 52 FC    MOV   A,[X-4]
    1E99: 53 A3    MOV   [__r1],A
    1E9B: 52 FB    MOV   A,[X-5]
    1E9D: 60 D4    MOV   REG[0xD4],A
    1E9F: 3E A3    MVI   A,[__r1]
    1EA1: 53 A3    MOV   [__r1],A
    1EA3: 50 00    MOV   A,0x0
    1EA5: 08       PUSH  A
    1EA6: 51 A3    MOV   A,[__r1]
    1EA8: 08       PUSH  A
    1EA9: 7C 27 4A LCALL _isspace
    1EAC: 38 FE    ADD   SP,0xFE
    1EAE: 62 D0 00 MOV   REG[0xD0],0x0
    1EB1: 3C A4 00 CMP   [__r0],0x0
    1EB4: BF DA    JNZ   0x1E8F
    1EB6: 3C A3 00 CMP   [__r1],0x0
    1EB9: BF D5    JNZ   0x1E8F
    1EBB: 56 03 00 MOV   [X+3],0x0
    1EBE: 56 02 00 MOV   [X+2],0x0
    1EC1: 62 D0 00 MOV   REG[0xD0],0x0
    1EC4: 52 FC    MOV   A,[X-4]
    1EC6: 53 A3    MOV   [__r1],A
    1EC8: 52 FB    MOV   A,[X-5]
    1ECA: 60 D4    MOV   REG[0xD4],A
    1ECC: 3E A3    MVI   A,[__r1]
    1ECE: 39 2D    CMP   A,0x2D
    1ED0: B0 0E    JNZ   0x1EDF
    1ED2: 56 03 01 MOV   [X+3],0x1
    1ED5: 56 02 00 MOV   [X+2],0x0
    1ED8: 77 FC    INC   [X-4]
    1EDA: 0F FB 00 ADC   [X-5],0x0
    1EDD: 80 17    JMP   0x1EF5
    1EDF: 62 D0 00 MOV   REG[0xD0],0x0
    1EE2: 52 FC    MOV   A,[X-4]
    1EE4: 53 A3    MOV   [__r1],A
    1EE6: 52 FB    MOV   A,[X-5]
    1EE8: 60 D4    MOV   REG[0xD4],A
    1EEA: 3E A3    MVI   A,[__r1]
    1EEC: 39 2B    CMP   A,0x2B
    1EEE: B0 06    JNZ   0x1EF5
    1EF0: 77 FC    INC   [X-4]
    1EF2: 0F FB 00 ADC   [X-5],0x0
    1EF5: 56 01 00 MOV   [X+1],0x0
    1EF8: 56 00 00 MOV   [X+0],0x0
    1EFB: 80 7B    JMP   0x1F77
    1EFD: 62 D0 00 MOV   REG[0xD0],0x0
    1F00: 52 FC    MOV   A,[X-4]
    1F02: 53 A3    MOV   [__r1],A
    1F04: 52 FB    MOV   A,[X-5]
    1F06: 53 A4    MOV   [__r0],A
    1F08: 51 A3    MOV   A,[__r1]
    1F0A: 01 01    ADD   A,0x1
    1F0C: 54 FC    MOV   [X-4],A
    1F0E: 51 A4    MOV   A,[__r0]
    1F10: 09 00    ADC   A,0x0
    1F12: 54 FB    MOV   [X-5],A
    1F14: 52 01    MOV   A,[X+1]
    1F16: 53 A1    MOV   [__r3],A
    1F18: 52 00    MOV   A,[X+0]
    1F1A: 53 A2    MOV   [__r2],A
    1F1C: 55 9F 0A MOV   [__r5],0xA
    1F1F: 55 A0 00 MOV   [__r4],0x0
    1F22: 55 9C 00 MOV   [__rX],0x0
    1F25: 55 9B 00 MOV   [__rY],0x0
    1F28: 3C A0 00 CMP   [__r4],0x0
    1F2B: B0 06    JNZ   0x1F32
    1F2D: 3C 9F 00 CMP   [__r5],0x0
    1F30: A0 1A    JZ    0x1F4B
    1F32: 70 FB    AND   F,0xFB
    1F34: 6E A0    RRC   [__r4]
    1F36: 6E 9F    RRC   [__r5]
    1F38: D0 0C    JNC   0x1F45
    1F3A: 62 D0 00 MOV   REG[0xD0],0x0
    1F3D: 51 A1    MOV   A,[__r3]
    1F3F: 04 9C    ADD   [__rX],A
    1F41: 51 A2    MOV   A,[__r2]
    1F43: 0C 9B    ADC   [__rY],A
    1F45: 65 A1    ASL   [__r3]
    1F47: 6B A2    RLC   [__r2]
    1F49: 8F DE    JMP   0x1F28
    1F4B: 5F A1 9C MOV   [__r3],[__rX]
    1F4E: 5F A2 9B MOV   [__r2],[__rY]
    1F51: 62 D0 00 MOV   REG[0xD0],0x0
    1F54: 51 A4    MOV   A,[__r0]
    1F56: 60 D4    MOV   REG[0xD4],A
    1F58: 3E A3    MVI   A,[__r1]
    1F5A: 53 A3    MOV   [__r1],A
    1F5C: 55 A4 00 MOV   [__r0],0x0
    1F5F: 51 A1    MOV   A,[__r3]
    1F61: 02 A3    ADD   A,[__r1]
    1F63: 53 A3    MOV   [__r1],A
    1F65: 51 A2    MOV   A,[__r2]
    1F67: 0A A4    ADC   A,[__r0]
    1F69: 53 A4    MOV   [__r0],A
    1F6B: 51 A3    MOV   A,[__r1]
    1F6D: 11 30    SUB   A,0x30
    1F6F: 54 01    MOV   [X+1],A
    1F71: 51 A4    MOV   A,[__r0]
    1F73: 19 00    SBB   A,0x0
    1F75: 54 00    MOV   [X+0],A
    1F77: 62 D0 00 MOV   REG[0xD0],0x0
    1F7A: 52 FC    MOV   A,[X-4]
    1F7C: 53 A3    MOV   [__r1],A
    1F7E: 52 FB    MOV   A,[X-5]
    1F80: 60 D4    MOV   REG[0xD4],A
    1F82: 3E A3    MVI   A,[__r1]
    1F84: 53 A3    MOV   [__r1],A
    1F86: 50 00    MOV   A,0x0
    1F88: 08       PUSH  A
    1F89: 51 A3    MOV   A,[__r1]
    1F8B: 08       PUSH  A
    1F8C: 7C 27 08 LCALL _isdigit
    1F8F: 38 FE    ADD   SP,0xFE
    1F91: 62 D0 00 MOV   REG[0xD0],0x0
    1F94: 3C A4 00 CMP   [__r0],0x0
    1F97: BF 65    JNZ   0x1EFD
    1F99: 3C A3 00 CMP   [__r1],0x0
    1F9C: BF 60    JNZ   0x1EFD
    1F9E: 3D 02 00 CMP   [X+2],0x0
    1FA1: B0 06    JNZ   0x1FA8
    1FA3: 3D 03 00 CMP   [X+3],0x0
    1FA6: A0 14    JZ    0x1FBB
    1FA8: 62 D0 00 MOV   REG[0xD0],0x0
    1FAB: 52 01    MOV   A,[X+1]
    1FAD: 73       CPL   A
    1FAE: 11 FF    SUB   A,0xFF
    1FB0: 53 A3    MOV   [__r1],A
    1FB2: 52 00    MOV   A,[X+0]
    1FB4: 73       CPL   A
    1FB5: 19 FF    SBB   A,0xFF
    1FB7: 53 A4    MOV   [__r0],A
    1FB9: 80 0C    JMP   0x1FC6
    1FBB: 62 D0 00 MOV   REG[0xD0],0x0
    1FBE: 52 01    MOV   A,[X+1]
    1FC0: 53 A3    MOV   [__r1],A
    1FC2: 52 00    MOV   A,[X+0]
    1FC4: 53 A4    MOV   [__r0],A
    1FC6: 38 FC    ADD   SP,0xFC
    1FC8: 20       POP   X
    1FC9: 7F       RET   
_itoa:
    1FCA: 10       PUSH  X
    1FCB: 4F       MOV   X,SP
    1FCC: 38 09    ADD   SP,0x9
    1FCE: 52 FA    MOV   A,[X-6]
    1FD0: 54 03    MOV   [X+3],A
    1FD2: 52 F9    MOV   A,[X-7]
    1FD4: 54 02    MOV   [X+2],A
    1FD6: 3D F9 00 CMP   [X-7],0x0
    1FD9: B0 2F    JNZ   0x2009
    1FDB: 3D FA 00 CMP   [X-6],0x0
    1FDE: B0 2A    JNZ   0x2009
    1FE0: 62 D0 00 MOV   REG[0xD0],0x0
    1FE3: 52 FC    MOV   A,[X-4]
    1FE5: 53 A3    MOV   [__r1],A
    1FE7: 52 FB    MOV   A,[X-5]
    1FE9: 60 D5    MOV   REG[0xD5],A
    1FEB: 50 30    MOV   A,0x30
    1FED: 3F A3    MVI   [__r1],A
    1FEF: 52 FC    MOV   A,[X-4]
    1FF1: 01 01    ADD   A,0x1
    1FF3: 53 A3    MOV   [__r1],A
    1FF5: 52 FB    MOV   A,[X-5]
    1FF7: 09 00    ADC   A,0x0
    1FF9: 60 D5    MOV   REG[0xD5],A
    1FFB: 50 00    MOV   A,0x0
    1FFD: 3F A3    MVI   [__r1],A
    1FFF: 52 FC    MOV   A,[X-4]
    2001: 53 A3    MOV   [__r1],A
    2003: 52 FB    MOV   A,[X-5]
    2005: 53 A4    MOV   [__r0],A
    2007: 81 97    JMP   0x219F
    2009: 52 FA    MOV   A,[X-6]
    200B: 11 00    SUB   A,0x0
    200D: 52 F9    MOV   A,[X-7]
    200F: 31 80    XOR   A,0x80
    2011: 19 80    SBB   A,0x80
    2013: D0 29    JNC   0x203D
    2015: 3D F7 00 CMP   [X-9],0x0
    2018: B0 24    JNZ   0x203D
    201A: 3D F8 0A CMP   [X-8],0xA
    201D: B0 1F    JNZ   0x203D
    201F: 56 06 01 MOV   [X+6],0x1
    2022: 62 D0 00 MOV   REG[0xD0],0x0
    2025: 52 03    MOV   A,[X+3]
    2027: 73       CPL   A
    2028: 53 A3    MOV   [__r1],A
    202A: 52 02    MOV   A,[X+2]
    202C: 73       CPL   A
    202D: 53 A4    MOV   [__r0],A
    202F: 51 A3    MOV   A,[__r1]
    2031: 01 01    ADD   A,0x1
    2033: 54 03    MOV   [X+3],A
    2035: 51 A4    MOV   A,[__r0]
    2037: 09 00    ADC   A,0x0
    2039: 54 02    MOV   [X+2],A
    203B: 80 04    JMP   0x2040
    203D: 56 06 00 MOV   [X+6],0x0
    2040: 52 FC    MOV   A,[X-4]
    2042: 54 01    MOV   [X+1],A
    2044: 52 FB    MOV   A,[X-5]
    2046: 54 00    MOV   [X+0],A
    2048: 62 D0 00 MOV   REG[0xD0],0x0
    204B: 52 F7    MOV   A,[X-9]
    204D: 08       PUSH  A
    204E: 52 F8    MOV   A,[X-8]
    2050: 08       PUSH  A
    2051: 52 02    MOV   A,[X+2]
    2053: 08       PUSH  A
    2054: 52 03    MOV   A,[X+3]
    2056: 08       PUSH  A
    2057: 7C 1D 3A LCALL 0x1D3A
    205A: 38 FE    ADD   SP,0xFE
    205C: 18       POP   A
    205D: 53 A3    MOV   [__r1],A
    205F: 18       POP   A
    2060: 53 A4    MOV   [__r0],A
    2062: 51 A3    MOV   A,[__r1]
    2064: 54 08    MOV   [X+8],A
    2066: 51 A4    MOV   A,[__r0]
    2068: 54 07    MOV   [X+7],A
    206A: 50 09    MOV   A,0x9
    206C: 13 08    SUB   A,[X+8]
    206E: 52 07    MOV   A,[X+7]
    2070: 31 80    XOR   A,0x80
    2072: 53 9C    MOV   [__rX],A
    2074: 50 80    MOV   A,0x80
    2076: 1A 9C    SBB   A,[__rX]
    2078: C0 28    JC    0x20A1
    207A: 62 D0 00 MOV   REG[0xD0],0x0
    207D: 52 01    MOV   A,[X+1]
    207F: 53 A3    MOV   [__r1],A
    2081: 52 00    MOV   A,[X+0]
    2083: 53 A4    MOV   [__r0],A
    2085: 51 A3    MOV   A,[__r1]
    2087: 01 01    ADD   A,0x1
    2089: 54 01    MOV   [X+1],A
    208B: 51 A4    MOV   A,[__r0]
    208D: 09 00    ADC   A,0x0
    208F: 54 00    MOV   [X+0],A
    2091: 52 08    MOV   A,[X+8]
    2093: 01 30    ADD   A,0x30
    2095: 53 A2    MOV   [__r2],A
    2097: 51 A4    MOV   A,[__r0]
    2099: 60 D5    MOV   REG[0xD5],A
    209B: 51 A2    MOV   A,[__r2]
    209D: 3F A3    MVI   [__r1],A
    209F: 80 26    JMP   0x20C6
    20A1: 62 D0 00 MOV   REG[0xD0],0x0
    20A4: 52 01    MOV   A,[X+1]
    20A6: 53 A3    MOV   [__r1],A
    20A8: 52 00    MOV   A,[X+0]
    20AA: 53 A4    MOV   [__r0],A
    20AC: 51 A3    MOV   A,[__r1]
    20AE: 01 01    ADD   A,0x1
    20B0: 54 01    MOV   [X+1],A
    20B2: 51 A4    MOV   A,[__r0]
    20B4: 09 00    ADC   A,0x0
    20B6: 54 00    MOV   [X+0],A
    20B8: 52 08    MOV   A,[X+8]
    20BA: 01 57    ADD   A,0x57
    20BC: 53 A2    MOV   [__r2],A
    20BE: 51 A4    MOV   A,[__r0]
    20C0: 60 D5    MOV   REG[0xD5],A
    20C2: 51 A2    MOV   A,[__r2]
    20C4: 3F A3    MVI   [__r1],A
    20C6: 52 F7    MOV   A,[X-9]
    20C8: 08       PUSH  A
    20C9: 52 F8    MOV   A,[X-8]
    20CB: 08       PUSH  A
    20CC: 52 02    MOV   A,[X+2]
    20CE: 08       PUSH  A
    20CF: 52 03    MOV   A,[X+3]
    20D1: 08       PUSH  A
    20D2: 62 D0 00 MOV   REG[0xD0],0x0
    20D5: 7C 1D 3A LCALL 0x1D3A
    20D8: 18       POP   A
    20D9: 54 03    MOV   [X+3],A
    20DB: 18       POP   A
    20DC: 54 02    MOV   [X+2],A
    20DE: 38 FE    ADD   SP,0xFE
    20E0: 3D 02 00 CMP   [X+2],0x0
    20E3: BF 64    JNZ   0x2048
    20E5: 3D 03 00 CMP   [X+3],0x0
    20E8: BF 5F    JNZ   0x2048
    20EA: 3D 06 00 CMP   [X+6],0x0
    20ED: A0 20    JZ    0x210E
    20EF: 62 D0 00 MOV   REG[0xD0],0x0
    20F2: 52 01    MOV   A,[X+1]
    20F4: 53 A3    MOV   [__r1],A
    20F6: 52 00    MOV   A,[X+0]
    20F8: 53 A4    MOV   [__r0],A
    20FA: 51 A3    MOV   A,[__r1]
    20FC: 01 01    ADD   A,0x1
    20FE: 54 01    MOV   [X+1],A
    2100: 51 A4    MOV   A,[__r0]
    2102: 09 00    ADC   A,0x0
    2104: 54 00    MOV   [X+0],A
    2106: 51 A4    MOV   A,[__r0]
    2108: 60 D5    MOV   REG[0xD5],A
    210A: 50 2D    MOV   A,0x2D
    210C: 3F A3    MVI   [__r1],A
    210E: 62 D0 00 MOV   REG[0xD0],0x0
    2111: 52 01    MOV   A,[X+1]
    2113: 53 A3    MOV   [__r1],A
    2115: 52 00    MOV   A,[X+0]
    2117: 53 A4    MOV   [__r0],A
    2119: 51 A3    MOV   A,[__r1]
    211B: 01 FF    ADD   A,0xFF
    211D: 54 01    MOV   [X+1],A
    211F: 51 A4    MOV   A,[__r0]
    2121: 09 FF    ADC   A,0xFF
    2123: 54 00    MOV   [X+0],A
    2125: 51 A4    MOV   A,[__r0]
    2127: 60 D5    MOV   REG[0xD5],A
    2129: 50 00    MOV   A,0x0
    212B: 3F A3    MVI   [__r1],A
    212D: 52 FC    MOV   A,[X-4]
    212F: 54 05    MOV   [X+5],A
    2131: 52 FB    MOV   A,[X-5]
    2133: 54 04    MOV   [X+4],A
    2135: 80 54    JMP   0x218A
    2137: 62 D0 00 MOV   REG[0xD0],0x0
    213A: 52 05    MOV   A,[X+5]
    213C: 53 A3    MOV   [__r1],A
    213E: 52 04    MOV   A,[X+4]
    2140: 60 D4    MOV   REG[0xD4],A
    2142: 3E A3    MVI   A,[__r1]
    2144: 54 06    MOV   [X+6],A
    2146: 52 05    MOV   A,[X+5]
    2148: 53 A3    MOV   [__r1],A
    214A: 52 04    MOV   A,[X+4]
    214C: 53 A4    MOV   [__r0],A
    214E: 51 A3    MOV   A,[__r1]
    2150: 01 01    ADD   A,0x1
    2152: 54 05    MOV   [X+5],A
    2154: 51 A4    MOV   A,[__r0]
    2156: 09 00    ADC   A,0x0
    2158: 54 04    MOV   [X+4],A
    215A: 52 01    MOV   A,[X+1]
    215C: 53 A1    MOV   [__r3],A
    215E: 52 00    MOV   A,[X+0]
    2160: 60 D4    MOV   REG[0xD4],A
    2162: 3E A1    MVI   A,[__r3]
    2164: 53 A2    MOV   [__r2],A
    2166: 51 A4    MOV   A,[__r0]
    2168: 60 D5    MOV   REG[0xD5],A
    216A: 51 A2    MOV   A,[__r2]
    216C: 3F A3    MVI   [__r1],A
    216E: 52 01    MOV   A,[X+1]
    2170: 53 A3    MOV   [__r1],A
    2172: 52 00    MOV   A,[X+0]
    2174: 53 A4    MOV   [__r0],A
    2176: 51 A3    MOV   A,[__r1]
    2178: 01 FF    ADD   A,0xFF
    217A: 54 01    MOV   [X+1],A
    217C: 51 A4    MOV   A,[__r0]
    217E: 09 FF    ADC   A,0xFF
    2180: 54 00    MOV   [X+0],A
    2182: 51 A4    MOV   A,[__r0]
    2184: 60 D5    MOV   REG[0xD5],A
    2186: 52 06    MOV   A,[X+6]
    2188: 3F A3    MVI   [__r1],A
    218A: 52 05    MOV   A,[X+5]
    218C: 13 01    SUB   A,[X+1]
    218E: 52 04    MOV   A,[X+4]
    2190: 1B 00    SBB   A,[X+0]
    2192: CF A4    JC    0x2137
    2194: 62 D0 00 MOV   REG[0xD0],0x0
    2197: 52 FC    MOV   A,[X-4]
    2199: 53 A3    MOV   [__r1],A
    219B: 52 FB    MOV   A,[X-5]
    219D: 53 A4    MOV   [__r0],A
    219F: 38 F7    ADD   SP,0xF7
    21A1: 20       POP   X
    21A2: 7F       RET   
_strtol:
    21A3: 10       PUSH  X
    21A4: 4F       MOV   X,SP
    21A5: 38 18    ADD   SP,0x18
    21A7: 56 00 00 MOV   [X+0],0x0
    21AA: 56 01 00 MOV   [X+1],0x0
    21AD: 56 02 00 MOV   [X+2],0x0
    21B0: 56 03 00 MOV   [X+3],0x0
    21B3: 80 06    JMP   0x21BA
    21B5: 77 FC    INC   [X-4]
    21B7: 0F FB 00 ADC   [X-5],0x0
    21BA: 62 D0 00 MOV   REG[0xD0],0x0
    21BD: 52 FC    MOV   A,[X-4]
    21BF: 53 A3    MOV   [__r1],A
    21C1: 52 FB    MOV   A,[X-5]
    21C3: 60 D4    MOV   REG[0xD4],A
    21C5: 3E A3    MVI   A,[__r1]
    21C7: 53 A3    MOV   [__r1],A
    21C9: 50 00    MOV   A,0x0
    21CB: 08       PUSH  A
    21CC: 51 A3    MOV   A,[__r1]
    21CE: 08       PUSH  A
    21CF: 7C 27 4A LCALL _isspace
    21D2: 38 FE    ADD   SP,0xFE
    21D4: 62 D0 00 MOV   REG[0xD0],0x0
    21D7: 3C A4 00 CMP   [__r0],0x0
    21DA: BF DA    JNZ   0x21B5
    21DC: 3C A3 00 CMP   [__r1],0x0
    21DF: BF D5    JNZ   0x21B5
    21E1: 62 D0 00 MOV   REG[0xD0],0x0
    21E4: 52 FC    MOV   A,[X-4]
    21E6: 53 A3    MOV   [__r1],A
    21E8: 52 FB    MOV   A,[X-5]
    21EA: 60 D4    MOV   REG[0xD4],A
    21EC: 3E A3    MVI   A,[__r1]
    21EE: 39 00    CMP   A,0x0
    21F0: A0 31    JZ    0x2222
    21F2: 3D F7 00 CMP   [X-9],0x0
    21F5: B0 06    JNZ   0x21FC
    21F7: 3D F8 00 CMP   [X-8],0x0
    21FA: A0 55    JZ    0x2250
    21FC: 50 01    MOV   A,0x1
    21FE: 13 F8    SUB   A,[X-8]
    2200: 52 F7    MOV   A,[X-9]
    2202: 31 80    XOR   A,0x80
    2204: 62 D0 00 MOV   REG[0xD0],0x0
    2207: 53 9C    MOV   [__rX],A
    2209: 50 80    MOV   A,0x80
    220B: 1A 9C    SBB   A,[__rX]
    220D: D0 14    JNC   0x2222
    220F: 50 24    MOV   A,0x24
    2211: 13 F8    SUB   A,[X-8]
    2213: 52 F7    MOV   A,[X-9]
    2215: 31 80    XOR   A,0x80
    2217: 62 D0 00 MOV   REG[0xD0],0x0
    221A: 53 9C    MOV   [__rX],A
    221C: 50 80    MOV   A,0x80
    221E: 1A 9C    SBB   A,[__rX]
    2220: D0 2F    JNC   0x2250
    2222: 3D F9 00 CMP   [X-7],0x0
    2225: B0 06    JNZ   0x222C
    2227: 3D FA 00 CMP   [X-6],0x0
    222A: A0 14    JZ    0x223F
    222C: 62 D0 00 MOV   REG[0xD0],0x0
    222F: 52 FA    MOV   A,[X-6]
    2231: 53 A3    MOV   [__r1],A
    2233: 52 F9    MOV   A,[X-7]
    2235: 60 D5    MOV   REG[0xD5],A
    2237: 52 FB    MOV   A,[X-5]
    2239: 3F A3    MVI   [__r1],A
    223B: 52 FC    MOV   A,[X-4]
    223D: 3F A3    MVI   [__r1],A
    223F: 62 D0 00 MOV   REG[0xD0],0x0
    2242: 55 A4 00 MOV   [__r0],0x0
    2245: 55 A3 00 MOV   [__r1],0x0
    2248: 55 A2 00 MOV   [__r2],0x0
    224B: 55 A1 00 MOV   [__r3],0x0
    224E: 83 72    JMP   0x25C1
    2250: 56 0B 00 MOV   [X+11],0x0
    2253: 56 0A 00 MOV   [X+10],0x0
    2256: 62 D0 00 MOV   REG[0xD0],0x0
    2259: 52 FC    MOV   A,[X-4]
    225B: 53 A3    MOV   [__r1],A
    225D: 52 FB    MOV   A,[X-5]
    225F: 60 D4    MOV   REG[0xD4],A
    2261: 3E A3    MVI   A,[__r1]
    2263: 39 2D    CMP   A,0x2D
    2265: B0 0E    JNZ   0x2274
    2267: 77 FC    INC   [X-4]
    2269: 0F FB 00 ADC   [X-5],0x0
    226C: 56 0B 01 MOV   [X+11],0x1
    226F: 56 0A 00 MOV   [X+10],0x0
    2272: 80 17    JMP   0x228A
    2274: 62 D0 00 MOV   REG[0xD0],0x0
    2277: 52 FC    MOV   A,[X-4]
    2279: 53 A3    MOV   [__r1],A
    227B: 52 FB    MOV   A,[X-5]
    227D: 60 D4    MOV   REG[0xD4],A
    227F: 3E A3    MVI   A,[__r1]
    2281: 39 2B    CMP   A,0x2B
    2283: B0 06    JNZ   0x228A
    2285: 77 FC    INC   [X-4]
    2287: 0F FB 00 ADC   [X-5],0x0
    228A: 62 D0 00 MOV   REG[0xD0],0x0
    228D: 52 FC    MOV   A,[X-4]
    228F: 53 A3    MOV   [__r1],A
    2291: 52 FB    MOV   A,[X-5]
    2293: 60 D4    MOV   REG[0xD4],A
    2295: 3E A3    MVI   A,[__r1]
    2297: 39 30    CMP   A,0x30
    2299: B0 4A    JNZ   0x22E4
    229B: 52 FC    MOV   A,[X-4]
    229D: 01 01    ADD   A,0x1
    229F: 53 A3    MOV   [__r1],A
    22A1: 52 FB    MOV   A,[X-5]
    22A3: 09 00    ADC   A,0x0
    22A5: 60 D4    MOV   REG[0xD4],A
    22A7: 3E A3    MVI   A,[__r1]
    22A9: 53 A3    MOV   [__r1],A
    22AB: 55 A4 00 MOV   [__r0],0x0
    22AE: 3C A4 00 CMP   [__r0],0x0
    22B1: B0 05    JNZ   0x22B7
    22B3: 39 58    CMP   A,0x58
    22B5: A0 0E    JZ    0x22C4
    22B7: 62 D0 00 MOV   REG[0xD0],0x0
    22BA: 3C A4 00 CMP   [__r0],0x0
    22BD: B0 26    JNZ   0x22E4
    22BF: 3C A3 78 CMP   [__r1],0x78
    22C2: B0 21    JNZ   0x22E4
    22C4: 3D F7 00 CMP   [X-9],0x0
    22C7: B0 06    JNZ   0x22CE
    22C9: 3D F8 10 CMP   [X-8],0x10
    22CC: A0 0B    JZ    0x22D8
    22CE: 3D F7 00 CMP   [X-9],0x0
    22D1: B0 12    JNZ   0x22E4
    22D3: 3D F8 00 CMP   [X-8],0x0
    22D6: B0 0D    JNZ   0x22E4
    22D8: 56 F8 10 MOV   [X-8],0x10
    22DB: 56 F7 00 MOV   [X-9],0x0
    22DE: 07 FC 02 ADD   [X-4],0x2
    22E1: 0F FB 00 ADC   [X-5],0x0
    22E4: 3D F7 00 CMP   [X-9],0x0
    22E7: B0 2D    JNZ   0x2315
    22E9: 3D F8 00 CMP   [X-8],0x0
    22EC: B0 28    JNZ   0x2315
    22EE: 62 D0 00 MOV   REG[0xD0],0x0
    22F1: 52 FC    MOV   A,[X-4]
    22F3: 53 A3    MOV   [__r1],A
    22F5: 52 FB    MOV   A,[X-5]
    22F7: 60 D4    MOV   REG[0xD4],A
    22F9: 3E A3    MVI   A,[__r1]
    22FB: 39 30    CMP   A,0x30
    22FD: B0 09    JNZ   0x2307
    22FF: 56 0F 08 MOV   [X+15],0x8
    2302: 56 0E 00 MOV   [X+14],0x0
    2305: 80 07    JMP   0x230D
    2307: 56 0F 0A MOV   [X+15],0xA
    230A: 56 0E 00 MOV   [X+14],0x0
    230D: 52 0F    MOV   A,[X+15]
    230F: 54 F8    MOV   [X-8],A
    2311: 52 0E    MOV   A,[X+14]
    2313: 54 F7    MOV   [X-9],A
    2315: 52 F8    MOV   A,[X-8]
    2317: 11 0A    SUB   A,0xA
    2319: 52 F7    MOV   A,[X-9]
    231B: 31 80    XOR   A,0x80
    231D: 19 80    SBB   A,0x80
    231F: C0 09    JC    0x2329
    2321: 56 11 39 MOV   [X+17],0x39
    2324: 56 10 00 MOV   [X+16],0x0
    2327: 80 1C    JMP   0x2344
    2329: 62 D0 00 MOV   REG[0xD0],0x0
    232C: 52 F8    MOV   A,[X-8]
    232E: 11 01    SUB   A,0x1
    2330: 53 A3    MOV   [__r1],A
    2332: 52 F7    MOV   A,[X-9]
    2334: 19 00    SBB   A,0x0
    2336: 53 A4    MOV   [__r0],A
    2338: 51 A3    MOV   A,[__r1]
    233A: 01 30    ADD   A,0x30
    233C: 54 11    MOV   [X+17],A
    233E: 51 A4    MOV   A,[__r0]
    2340: 09 00    ADC   A,0x0
    2342: 54 10    MOV   [X+16],A
    2344: 52 11    MOV   A,[X+17]
    2346: 54 09    MOV   [X+9],A
    2348: 52 10    MOV   A,[X+16]
    234A: 54 08    MOV   [X+8],A
    234C: 50 0A    MOV   A,0xA
    234E: 13 F8    SUB   A,[X-8]
    2350: 52 F7    MOV   A,[X-9]
    2352: 31 80    XOR   A,0x80
    2354: 62 D0 00 MOV   REG[0xD0],0x0
    2357: 53 9C    MOV   [__rX],A
    2359: 50 80    MOV   A,0x80
    235B: 1A 9C    SBB   A,[__rX]
    235D: D1 EA    JNC   0x2548
    235F: 62 D0 00 MOV   REG[0xD0],0x0
    2362: 52 F8    MOV   A,[X-8]
    2364: 11 0B    SUB   A,0xB
    2366: 53 A3    MOV   [__r1],A
    2368: 52 F7    MOV   A,[X-9]
    236A: 19 00    SBB   A,0x0
    236C: 53 A4    MOV   [__r0],A
    236E: 51 A3    MOV   A,[__r1]
    2370: 01 61    ADD   A,0x61
    2372: 54 0D    MOV   [X+13],A
    2374: 51 A4    MOV   A,[__r0]
    2376: 09 00    ADC   A,0x0
    2378: 54 0C    MOV   [X+12],A
    237A: 81 CD    JMP   0x2548
    237C: 62 D0 00 MOV   REG[0xD0],0x0
    237F: 52 FC    MOV   A,[X-4]
    2381: 53 A3    MOV   [__r1],A
    2383: 52 FB    MOV   A,[X-5]
    2385: 60 D4    MOV   REG[0xD4],A
    2387: 3E A3    MVI   A,[__r1]
    2389: 53 A3    MOV   [__r1],A
    238B: 50 00    MOV   A,0x0
    238D: 08       PUSH  A
    238E: 51 A3    MOV   A,[__r1]
    2390: 08       PUSH  A
    2391: 7C 27 08 LCALL _isdigit
    2394: 38 FE    ADD   SP,0xFE
    2396: 62 D0 00 MOV   REG[0xD0],0x0
    2399: 3C A4 00 CMP   [__r0],0x0
    239C: B0 06    JNZ   0x23A3
    239E: 3C A3 00 CMP   [__r1],0x0
    23A1: A0 3B    JZ    0x23DD
    23A3: 62 D0 00 MOV   REG[0xD0],0x0
    23A6: 52 FC    MOV   A,[X-4]
    23A8: 53 A3    MOV   [__r1],A
    23AA: 52 FB    MOV   A,[X-5]
    23AC: 60 D4    MOV   REG[0xD4],A
    23AE: 3E A3    MVI   A,[__r1]
    23B0: 53 A3    MOV   [__r1],A
    23B2: 52 09    MOV   A,[X+9]
    23B4: 12 A3    SUB   A,[__r1]
    23B6: 50 00    MOV   A,0x0
    23B8: 31 80    XOR   A,0x80
    23BA: 53 9C    MOV   [__rX],A
    23BC: 52 08    MOV   A,[X+8]
    23BE: 31 80    XOR   A,0x80
    23C0: 1A 9C    SBB   A,[__rX]
    23C2: C0 1A    JC    0x23DD
    23C4: 62 D0 00 MOV   REG[0xD0],0x0
    23C7: 52 FC    MOV   A,[X-4]
    23C9: 53 A3    MOV   [__r1],A
    23CB: 52 FB    MOV   A,[X-5]
    23CD: 60 D4    MOV   REG[0xD4],A
    23CF: 3E A3    MVI   A,[__r1]
    23D1: 11 30    SUB   A,0x30
    23D3: 54 13    MOV   [X+19],A
    23D5: 50 00    MOV   A,0x0
    23D7: 19 00    SBB   A,0x0
    23D9: 54 12    MOV   [X+18],A
    23DB: 80 75    JMP   0x2451
    23DD: 50 0A    MOV   A,0xA
    23DF: 13 F8    SUB   A,[X-8]
    23E1: 52 F7    MOV   A,[X-9]
    23E3: 31 80    XOR   A,0x80
    23E5: 62 D0 00 MOV   REG[0xD0],0x0
    23E8: 53 9C    MOV   [__rX],A
    23EA: 50 80    MOV   A,0x80
    23EC: 1A 9C    SBB   A,[__rX]
    23EE: D1 6A    JNC   0x2559
    23F0: 62 D0 00 MOV   REG[0xD0],0x0
    23F3: 52 FC    MOV   A,[X-4]
    23F5: 53 A3    MOV   [__r1],A
    23F7: 52 FB    MOV   A,[X-5]
    23F9: 60 D4    MOV   REG[0xD4],A
    23FB: 3E A3    MVI   A,[__r1]
    23FD: 53 A3    MOV   [__r1],A
    23FF: 50 00    MOV   A,0x0
    2401: 08       PUSH  A
    2402: 51 A3    MOV   A,[__r1]
    2404: 08       PUSH  A
    2405: 7C 27 CA LCALL _tolower
    2408: 38 FE    ADD   SP,0xFE
    240A: 62 D0 00 MOV   REG[0xD0],0x0
    240D: 51 A3    MOV   A,[__r1]
    240F: 54 13    MOV   [X+19],A
    2411: 51 A4    MOV   A,[__r0]
    2413: 54 12    MOV   [X+18],A
    2415: 51 A3    MOV   A,[__r1]
    2417: 11 61    SUB   A,0x61
    2419: 51 A4    MOV   A,[__r0]
    241B: 31 80    XOR   A,0x80
    241D: 19 80    SBB   A,0x80
    241F: C1 39    JC    0x2559
    2421: 52 0D    MOV   A,[X+13]
    2423: 13 13    SUB   A,[X+19]
    2425: 52 12    MOV   A,[X+18]
    2427: 31 80    XOR   A,0x80
    2429: 62 D0 00 MOV   REG[0xD0],0x0
    242C: 53 9C    MOV   [__rX],A
    242E: 52 0C    MOV   A,[X+12]
    2430: 31 80    XOR   A,0x80
    2432: 1A 9C    SBB   A,[__rX]
    2434: C1 24    JC    0x2559
    2436: 62 D0 00 MOV   REG[0xD0],0x0
    2439: 52 13    MOV   A,[X+19]
    243B: 11 61    SUB   A,0x61
    243D: 53 A3    MOV   [__r1],A
    243F: 52 12    MOV   A,[X+18]
    2441: 19 00    SBB   A,0x0
    2443: 53 A4    MOV   [__r0],A
    2445: 51 A3    MOV   A,[__r1]
    2447: 01 0A    ADD   A,0xA
    2449: 54 13    MOV   [X+19],A
    244B: 51 A4    MOV   A,[__r0]
    244D: 09 00    ADC   A,0x0
    244F: 54 12    MOV   [X+18],A
    2451: 52 00    MOV   A,[X+0]
    2453: 54 04    MOV   [X+4],A
    2455: 52 01    MOV   A,[X+1]
    2457: 54 05    MOV   [X+5],A
    2459: 52 02    MOV   A,[X+2]
    245B: 54 06    MOV   [X+6],A
    245D: 52 03    MOV   A,[X+3]
    245F: 54 07    MOV   [X+7],A
    2461: 62 D0 00 MOV   REG[0xD0],0x0
    2464: 52 13    MOV   A,[X+19]
    2466: 53 A1    MOV   [__r3],A
    2468: 52 12    MOV   A,[X+18]
    246A: 53 A2    MOV   [__r2],A
    246C: 47 A2 80 TST   [__r2],0x80
    246F: A0 09    JZ    0x2479
    2471: 55 A3 FF MOV   [__r1],0xFF
    2474: 55 A4 FF MOV   [__r0],0xFF
    2477: 80 0A    JMP   0x2482
    2479: 62 D0 00 MOV   REG[0xD0],0x0
    247C: 55 A3 00 MOV   [__r1],0x0
    247F: 55 A4 00 MOV   [__r0],0x0
    2482: 62 D0 00 MOV   REG[0xD0],0x0
    2485: 52 F8    MOV   A,[X-8]
    2487: 53 9D    MOV   [__r7],A
    2489: 52 F7    MOV   A,[X-9]
    248B: 53 9E    MOV   [__r6],A
    248D: 47 9E 80 TST   [__r6],0x80
    2490: A0 09    JZ    0x249A
    2492: 55 9F FF MOV   [__r5],0xFF
    2495: 55 A0 FF MOV   [__r4],0xFF
    2498: 80 0A    JMP   0x24A3
    249A: 62 D0 00 MOV   REG[0xD0],0x0
    249D: 55 9F 00 MOV   [__r5],0x0
    24A0: 55 A0 00 MOV   [__r4],0x0
    24A3: 62 D0 00 MOV   REG[0xD0],0x0
    24A6: 51 A0    MOV   A,[__r4]
    24A8: 08       PUSH  A
    24A9: 51 9F    MOV   A,[__r5]
    24AB: 08       PUSH  A
    24AC: 51 9E    MOV   A,[__r6]
    24AE: 08       PUSH  A
    24AF: 51 9D    MOV   A,[__r7]
    24B1: 08       PUSH  A
    24B2: 52 00    MOV   A,[X+0]
    24B4: 08       PUSH  A
    24B5: 52 01    MOV   A,[X+1]
    24B7: 08       PUSH  A
    24B8: 52 02    MOV   A,[X+2]
    24BA: 08       PUSH  A
    24BB: 52 03    MOV   A,[X+3]
    24BD: 08       PUSH  A
    24BE: 7C 1D 9B LCALL 0x1D9B
    24C1: 38 FC    ADD   SP,0xFC
    24C3: 18       POP   A
    24C4: 53 9D    MOV   [__r7],A
    24C6: 18       POP   A
    24C7: 53 9E    MOV   [__r6],A
    24C9: 18       POP   A
    24CA: 53 9F    MOV   [__r5],A
    24CC: 18       POP   A
    24CD: 53 A0    MOV   [__r4],A
    24CF: 51 9D    MOV   A,[__r7]
    24D1: 02 A1    ADD   A,[__r3]
    24D3: 54 03    MOV   [X+3],A
    24D5: 51 9E    MOV   A,[__r6]
    24D7: 0A A2    ADC   A,[__r2]
    24D9: 54 02    MOV   [X+2],A
    24DB: 51 9F    MOV   A,[__r5]
    24DD: 0A A3    ADC   A,[__r1]
    24DF: 54 01    MOV   [X+1],A
    24E1: 51 A0    MOV   A,[__r4]
    24E3: 0A A4    ADC   A,[__r0]
    24E5: 54 00    MOV   [X+0],A
    24E7: 52 03    MOV   A,[X+3]
    24E9: 13 07    SUB   A,[X+7]
    24EB: 52 02    MOV   A,[X+2]
    24ED: 1B 06    SBB   A,[X+6]
    24EF: 52 01    MOV   A,[X+1]
    24F1: 1B 05    SBB   A,[X+5]
    24F3: 52 04    MOV   A,[X+4]
    24F5: 31 80    XOR   A,0x80
    24F7: 53 9C    MOV   [__rX],A
    24F9: 52 00    MOV   A,[X+0]
    24FB: 31 80    XOR   A,0x80
    24FD: 1A 9C    SBB   A,[__rX]
    24FF: D0 43    JNC   0x2543
    2501: 62 D0 00 MOV   REG[0xD0],0x0
    2504: 55 BA 02 MOV   [errno+1],0x2
    2507: 55 B9 00 MOV   [errno],0x0
    250A: 3D 0A 00 CMP   [X+10],0x0
    250D: B0 06    JNZ   0x2514
    250F: 3D 0B 00 CMP   [X+11],0x0
    2512: A0 0F    JZ    0x2522
    2514: 56 14 80 MOV   [X+20],0x80
    2517: 56 15 00 MOV   [X+21],0x0
    251A: 56 16 00 MOV   [X+22],0x0
    251D: 56 17 00 MOV   [X+23],0x0
    2520: 80 0D    JMP   0x252E
    2522: 56 14 7F MOV   [X+20],0x7F
    2525: 56 15 FF MOV   [X+21],0xFF
    2528: 56 16 FF MOV   [X+22],0xFF
    252B: 56 17 FF MOV   [X+23],0xFF
    252E: 62 D0 00 MOV   REG[0xD0],0x0
    2531: 52 14    MOV   A,[X+20]
    2533: 53 A4    MOV   [__r0],A
    2535: 52 15    MOV   A,[X+21]
    2537: 53 A3    MOV   [__r1],A
    2539: 52 16    MOV   A,[X+22]
    253B: 53 A2    MOV   [__r2],A
    253D: 52 17    MOV   A,[X+23]
    253F: 53 A1    MOV   [__r3],A
    2541: 80 7F    JMP   0x25C1
    2543: 77 FC    INC   [X-4]
    2545: 0F FB 00 ADC   [X-5],0x0
    2548: 62 D0 00 MOV   REG[0xD0],0x0
    254B: 52 FC    MOV   A,[X-4]
    254D: 53 A3    MOV   [__r1],A
    254F: 52 FB    MOV   A,[X-5]
    2551: 60 D4    MOV   REG[0xD4],A
    2553: 3E A3    MVI   A,[__r1]
    2555: 39 00    CMP   A,0x0
    2557: BE 24    JNZ   0x237C
    2559: 3D F9 00 CMP   [X-7],0x0
    255C: B0 06    JNZ   0x2563
    255E: 3D FA 00 CMP   [X-6],0x0
    2561: A0 14    JZ    0x2576
    2563: 62 D0 00 MOV   REG[0xD0],0x0
    2566: 52 FA    MOV   A,[X-6]
    2568: 53 A3    MOV   [__r1],A
    256A: 52 F9    MOV   A,[X-7]
    256C: 60 D5    MOV   REG[0xD5],A
    256E: 52 FB    MOV   A,[X-5]
    2570: 3F A3    MVI   [__r1],A
    2572: 52 FC    MOV   A,[X-4]
    2574: 3F A3    MVI   [__r1],A
    2576: 3D 0A 00 CMP   [X+10],0x0
    2579: B0 06    JNZ   0x2580
    257B: 3D 0B 00 CMP   [X+11],0x0
    257E: A0 1F    JZ    0x259E
    2580: 52 03    MOV   A,[X+3]
    2582: 73       CPL   A
    2583: 11 FF    SUB   A,0xFF
    2585: 54 15    MOV   [X+21],A
    2587: 52 02    MOV   A,[X+2]
    2589: 73       CPL   A
    258A: 19 FF    SBB   A,0xFF
    258C: 54 14    MOV   [X+20],A
    258E: 52 01    MOV   A,[X+1]
    2590: 73       CPL   A
    2591: 19 FF    SBB   A,0xFF
    2593: 54 13    MOV   [X+19],A
    2595: 52 00    MOV   A,[X+0]
    2597: 73       CPL   A
    2598: 19 FF    SBB   A,0xFF
    259A: 54 12    MOV   [X+18],A
    259C: 80 11    JMP   0x25AE
    259E: 52 00    MOV   A,[X+0]
    25A0: 54 12    MOV   [X+18],A
    25A2: 52 01    MOV   A,[X+1]
    25A4: 54 13    MOV   [X+19],A
    25A6: 52 02    MOV   A,[X+2]
    25A8: 54 14    MOV   [X+20],A
    25AA: 52 03    MOV   A,[X+3]
    25AC: 54 15    MOV   [X+21],A
    25AE: 62 D0 00 MOV   REG[0xD0],0x0
    25B1: 52 12    MOV   A,[X+18]
    25B3: 53 A4    MOV   [__r0],A
    25B5: 52 13    MOV   A,[X+19]
    25B7: 53 A3    MOV   [__r1],A
    25B9: 52 14    MOV   A,[X+20]
    25BB: 53 A2    MOV   [__r2],A
    25BD: 52 15    MOV   A,[X+21]
    25BF: 53 A1    MOV   [__r3],A
    25C1: 38 E8    ADD   SP,0xE8
    25C3: 20       POP   X
    25C4: 7F       RET   
_utoa:
    25C5: 10       PUSH  X
    25C6: 4F       MOV   X,SP
    25C7: 38 07    ADD   SP,0x7
    25C9: 52 FC    MOV   A,[X-4]
    25CB: 54 01    MOV   [X+1],A
    25CD: 52 FB    MOV   A,[X-5]
    25CF: 54 00    MOV   [X+0],A
    25D1: 62 D0 00 MOV   REG[0xD0],0x0
    25D4: 52 F7    MOV   A,[X-9]
    25D6: 08       PUSH  A
    25D7: 52 F8    MOV   A,[X-8]
    25D9: 08       PUSH  A
    25DA: 52 F9    MOV   A,[X-7]
    25DC: 08       PUSH  A
    25DD: 52 FA    MOV   A,[X-6]
    25DF: 08       PUSH  A
    25E0: 7C 1D 3A LCALL 0x1D3A
    25E3: 38 FE    ADD   SP,0xFE
    25E5: 18       POP   A
    25E6: 53 A3    MOV   [__r1],A
    25E8: 18       POP   A
    25E9: 53 A4    MOV   [__r0],A
    25EB: 51 A3    MOV   A,[__r1]
    25ED: 54 06    MOV   [X+6],A
    25EF: 51 A4    MOV   A,[__r0]
    25F1: 54 05    MOV   [X+5],A
    25F3: 50 09    MOV   A,0x9
    25F5: 13 06    SUB   A,[X+6]
    25F7: 52 05    MOV   A,[X+5]
    25F9: 31 80    XOR   A,0x80
    25FB: 53 9C    MOV   [__rX],A
    25FD: 50 80    MOV   A,0x80
    25FF: 1A 9C    SBB   A,[__rX]
    2601: C0 28    JC    0x262A
    2603: 62 D0 00 MOV   REG[0xD0],0x0
    2606: 52 01    MOV   A,[X+1]
    2608: 53 A3    MOV   [__r1],A
    260A: 52 00    MOV   A,[X+0]
    260C: 53 A4    MOV   [__r0],A
    260E: 51 A3    MOV   A,[__r1]
    2610: 01 01    ADD   A,0x1
    2612: 54 01    MOV   [X+1],A
    2614: 51 A4    MOV   A,[__r0]
    2616: 09 00    ADC   A,0x0
    2618: 54 00    MOV   [X+0],A
    261A: 52 06    MOV   A,[X+6]
    261C: 01 30    ADD   A,0x30
    261E: 53 A2    MOV   [__r2],A
    2620: 51 A4    MOV   A,[__r0]
    2622: 60 D5    MOV   REG[0xD5],A
    2624: 51 A2    MOV   A,[__r2]
    2626: 3F A3    MVI   [__r1],A
    2628: 80 26    JMP   0x264F
    262A: 62 D0 00 MOV   REG[0xD0],0x0
    262D: 52 01    MOV   A,[X+1]
    262F: 53 A3    MOV   [__r1],A
    2631: 52 00    MOV   A,[X+0]
    2633: 53 A4    MOV   [__r0],A
    2635: 51 A3    MOV   A,[__r1]
    2637: 01 01    ADD   A,0x1
    2639: 54 01    MOV   [X+1],A
    263B: 51 A4    MOV   A,[__r0]
    263D: 09 00    ADC   A,0x0
    263F: 54 00    MOV   [X+0],A
    2641: 52 06    MOV   A,[X+6]
    2643: 01 57    ADD   A,0x57
    2645: 53 A2    MOV   [__r2],A
    2647: 51 A4    MOV   A,[__r0]
    2649: 60 D5    MOV   REG[0xD5],A
    264B: 51 A2    MOV   A,[__r2]
    264D: 3F A3    MVI   [__r1],A
    264F: 52 F7    MOV   A,[X-9]
    2651: 08       PUSH  A
    2652: 52 F8    MOV   A,[X-8]
    2654: 08       PUSH  A
    2655: 52 F9    MOV   A,[X-7]
    2657: 08       PUSH  A
    2658: 52 FA    MOV   A,[X-6]
    265A: 08       PUSH  A
    265B: 62 D0 00 MOV   REG[0xD0],0x0
    265E: 7C 1D 3A LCALL 0x1D3A
    2661: 18       POP   A
    2662: 54 FA    MOV   [X-6],A
    2664: 18       POP   A
    2665: 54 F9    MOV   [X-7],A
    2667: 38 FE    ADD   SP,0xFE
    2669: 3D F9 00 CMP   [X-7],0x0
    266C: BF 64    JNZ   0x25D1
    266E: 3D FA 00 CMP   [X-6],0x0
    2671: BF 5F    JNZ   0x25D1
    2673: 62 D0 00 MOV   REG[0xD0],0x0
    2676: 52 01    MOV   A,[X+1]
    2678: 53 A3    MOV   [__r1],A
    267A: 52 00    MOV   A,[X+0]
    267C: 53 A4    MOV   [__r0],A
    267E: 51 A3    MOV   A,[__r1]
    2680: 01 FF    ADD   A,0xFF
    2682: 54 01    MOV   [X+1],A
    2684: 51 A4    MOV   A,[__r0]
    2686: 09 FF    ADC   A,0xFF
    2688: 54 00    MOV   [X+0],A
    268A: 51 A4    MOV   A,[__r0]
    268C: 60 D5    MOV   REG[0xD5],A
    268E: 50 00    MOV   A,0x0
    2690: 3F A3    MVI   [__r1],A
    2692: 52 FC    MOV   A,[X-4]
    2694: 54 03    MOV   [X+3],A
    2696: 52 FB    MOV   A,[X-5]
    2698: 54 02    MOV   [X+2],A
    269A: 80 54    JMP   0x26EF
    269C: 62 D0 00 MOV   REG[0xD0],0x0
    269F: 52 03    MOV   A,[X+3]
    26A1: 53 A3    MOV   [__r1],A
    26A3: 52 02    MOV   A,[X+2]
    26A5: 60 D4    MOV   REG[0xD4],A
    26A7: 3E A3    MVI   A,[__r1]
    26A9: 54 04    MOV   [X+4],A
    26AB: 52 03    MOV   A,[X+3]
    26AD: 53 A3    MOV   [__r1],A
    26AF: 52 02    MOV   A,[X+2]
    26B1: 53 A4    MOV   [__r0],A
    26B3: 51 A3    MOV   A,[__r1]
    26B5: 01 01    ADD   A,0x1
    26B7: 54 03    MOV   [X+3],A
    26B9: 51 A4    MOV   A,[__r0]
    26BB: 09 00    ADC   A,0x0
    26BD: 54 02    MOV   [X+2],A
    26BF: 52 01    MOV   A,[X+1]
    26C1: 53 A1    MOV   [__r3],A
    26C3: 52 00    MOV   A,[X+0]
    26C5: 60 D4    MOV   REG[0xD4],A
    26C7: 3E A1    MVI   A,[__r3]
    26C9: 53 A2    MOV   [__r2],A
    26CB: 51 A4    MOV   A,[__r0]
    26CD: 60 D5    MOV   REG[0xD5],A
    26CF: 51 A2    MOV   A,[__r2]
    26D1: 3F A3    MVI   [__r1],A
    26D3: 52 01    MOV   A,[X+1]
    26D5: 53 A3    MOV   [__r1],A
    26D7: 52 00    MOV   A,[X+0]
    26D9: 53 A4    MOV   [__r0],A
    26DB: 51 A3    MOV   A,[__r1]
    26DD: 01 FF    ADD   A,0xFF
    26DF: 54 01    MOV   [X+1],A
    26E1: 51 A4    MOV   A,[__r0]
    26E3: 09 FF    ADC   A,0xFF
    26E5: 54 00    MOV   [X+0],A
    26E7: 51 A4    MOV   A,[__r0]
    26E9: 60 D5    MOV   REG[0xD5],A
    26EB: 52 04    MOV   A,[X+4]
    26ED: 3F A3    MVI   [__r1],A
    26EF: 52 03    MOV   A,[X+3]
    26F1: 13 01    SUB   A,[X+1]
    26F3: 52 02    MOV   A,[X+2]
    26F5: 1B 00    SBB   A,[X+0]
    26F7: CF A4    JC    0x269C
    26F9: 62 D0 00 MOV   REG[0xD0],0x0
    26FC: 52 FC    MOV   A,[X-4]
    26FE: 53 A3    MOV   [__r1],A
    2700: 52 FB    MOV   A,[X-5]
    2702: 53 A4    MOV   [__r0],A
    2704: 38 F9    ADD   SP,0xF9
    2706: 20       POP   X
    2707: 7F       RET   
_isdigit:
    2708: 10       PUSH  X
    2709: 4F       MOV   X,SP
    270A: 62 D0 00 MOV   REG[0xD0],0x0
    270D: 52 FC    MOV   A,[X-4]
    270F: 01 01    ADD   A,0x1
    2711: 53 A3    MOV   [__r1],A
    2713: 52 FB    MOV   A,[X-5]
    2715: 09 05    ADC   A,0x5
    2717: 10       PUSH  X
    2718: 58 A3    MOV   X,[__r1]
    271A: 28       ROMX  
    271B: 20       POP   X
    271C: 53 A3    MOV   [__r1],A
    271E: 55 A4 00 MOV   [__r0],0x0
    2721: 26 A3 04 AND   [__r1],0x4
    2724: 26 A4 00 AND   [__r0],0x0
    2727: 20       POP   X
    2728: 7F       RET   
_islower:
    2729: 10       PUSH  X
    272A: 4F       MOV   X,SP
    272B: 62 D0 00 MOV   REG[0xD0],0x0
    272E: 52 FC    MOV   A,[X-4]
    2730: 01 01    ADD   A,0x1
    2732: 53 A3    MOV   [__r1],A
    2734: 52 FB    MOV   A,[X-5]
    2736: 09 05    ADC   A,0x5
    2738: 10       PUSH  X
    2739: 58 A3    MOV   X,[__r1]
    273B: 28       ROMX  
    273C: 20       POP   X
    273D: 53 A3    MOV   [__r1],A
    273F: 55 A4 00 MOV   [__r0],0x0
    2742: 26 A3 02 AND   [__r1],0x2
    2745: 26 A4 00 AND   [__r0],0x0
    2748: 20       POP   X
    2749: 7F       RET   
_isspace:
    274A: 10       PUSH  X
    274B: 4F       MOV   X,SP
    274C: 62 D0 00 MOV   REG[0xD0],0x0
    274F: 52 FC    MOV   A,[X-4]
    2751: 01 01    ADD   A,0x1
    2753: 53 A3    MOV   [__r1],A
    2755: 52 FB    MOV   A,[X-5]
    2757: 09 05    ADC   A,0x5
    2759: 10       PUSH  X
    275A: 58 A3    MOV   X,[__r1]
    275C: 28       ROMX  
    275D: 20       POP   X
    275E: 53 A3    MOV   [__r1],A
    2760: 55 A4 00 MOV   [__r0],0x0
    2763: 26 A3 10 AND   [__r1],0x10
    2766: 26 A4 00 AND   [__r0],0x0
    2769: 20       POP   X
    276A: 7F       RET   
_isupper:
    276B: 10       PUSH  X
    276C: 4F       MOV   X,SP
    276D: 62 D0 00 MOV   REG[0xD0],0x0
    2770: 52 FC    MOV   A,[X-4]
    2772: 01 01    ADD   A,0x1
    2774: 53 A3    MOV   [__r1],A
    2776: 52 FB    MOV   A,[X-5]
    2778: 09 05    ADC   A,0x5
    277A: 10       PUSH  X
    277B: 58 A3    MOV   X,[__r1]
    277D: 28       ROMX  
    277E: 20       POP   X
    277F: 53 A3    MOV   [__r1],A
    2781: 55 A4 00 MOV   [__r0],0x0
    2784: 26 A3 01 AND   [__r1],0x1
    2787: 26 A4 00 AND   [__r0],0x0
    278A: 20       POP   X
    278B: 7F       RET   
_toupper:
    278C: 10       PUSH  X
    278D: 4F       MOV   X,SP
    278E: 52 FB    MOV   A,[X-5]
    2790: 08       PUSH  A
    2791: 52 FC    MOV   A,[X-4]
    2793: 08       PUSH  A
    2794: 7C 27 29 LCALL _islower
    2797: 38 FE    ADD   SP,0xFE
    2799: 62 D0 00 MOV   REG[0xD0],0x0
    279C: 3C A4 00 CMP   [__r0],0x0
    279F: B0 06    JNZ   0x27A6
    27A1: 3C A3 00 CMP   [__r1],0x0
    27A4: A0 18    JZ    0x27BD
    27A6: 62 D0 00 MOV   REG[0xD0],0x0
    27A9: 52 FC    MOV   A,[X-4]
    27AB: 11 61    SUB   A,0x61
    27AD: 53 A3    MOV   [__r1],A
    27AF: 52 FB    MOV   A,[X-5]
    27B1: 19 00    SBB   A,0x0
    27B3: 53 A4    MOV   [__r0],A
    27B5: 06 A3 41 ADD   [__r1],0x41
    27B8: 0E A4 00 ADC   [__r0],0x0
    27BB: 80 0C    JMP   0x27C8
    27BD: 62 D0 00 MOV   REG[0xD0],0x0
    27C0: 52 FC    MOV   A,[X-4]
    27C2: 53 A3    MOV   [__r1],A
    27C4: 52 FB    MOV   A,[X-5]
    27C6: 53 A4    MOV   [__r0],A
    27C8: 20       POP   X
    27C9: 7F       RET   
_tolower:
    27CA: 10       PUSH  X
    27CB: 4F       MOV   X,SP
    27CC: 52 FB    MOV   A,[X-5]
    27CE: 08       PUSH  A
    27CF: 52 FC    MOV   A,[X-4]
    27D1: 08       PUSH  A
    27D2: 7C 27 6B LCALL _isupper
    27D5: 38 FE    ADD   SP,0xFE
    27D7: 62 D0 00 MOV   REG[0xD0],0x0
    27DA: 3C A4 00 CMP   [__r0],0x0
    27DD: B0 06    JNZ   0x27E4
    27DF: 3C A3 00 CMP   [__r1],0x0
    27E2: A0 18    JZ    0x27FB
    27E4: 62 D0 00 MOV   REG[0xD0],0x0
    27E7: 52 FC    MOV   A,[X-4]
    27E9: 11 41    SUB   A,0x41
    27EB: 53 A3    MOV   [__r1],A
    27ED: 52 FB    MOV   A,[X-5]
    27EF: 19 00    SBB   A,0x0
    27F1: 53 A4    MOV   [__r0],A
    27F3: 06 A3 61 ADD   [__r1],0x61
    27F6: 0E A4 00 ADC   [__r0],0x0
    27F9: 80 0C    JMP   0x2806
    27FB: 62 D0 00 MOV   REG[0xD0],0x0
    27FE: 52 FC    MOV   A,[X-4]
    2800: 53 A3    MOV   [__r1],A
    2802: 52 FB    MOV   A,[X-5]
    2804: 53 A4    MOV   [__r0],A
    2806: 20       POP   X
    2807: 7F       RET   
__csdepi:
    2808: 10       PUSH  X
    2809: 4F       MOV   X,SP
    280A: 62 D0 00 MOV   REG[0xD0],0x0
    280D: 51 B8    MOV   A,[commandId+3]
    280F: 08       PUSH  A
    2810: 51 B7    MOV   A,[commandId+2]
    2812: 62 D0 00 MOV   REG[0xD0],0x0
    2815: 53 A4    MOV   [__r0],A
    2817: 18       POP   A
    2818: 53 A3    MOV   [__r1],A
    281A: 01 01    ADD   A,0x1
    281C: 62 D0 00 MOV   REG[0xD0],0x0
    281F: 53 B8    MOV   [commandId+3],A
    2821: 62 D0 00 MOV   REG[0xD0],0x0
    2824: 51 A4    MOV   A,[__r0]
    2826: 09 00    ADC   A,0x0
    2828: 62 D0 00 MOV   REG[0xD0],0x0
    282B: 53 B7    MOV   [commandId+2],A
    282D: 62 D0 00 MOV   REG[0xD0],0x0
    2830: 51 A4    MOV   A,[__r0]
    2832: 60 D5    MOV   REG[0xD5],A
    2834: 52 FC    MOV   A,[X-4]
    2836: 3F A3    MVI   [__r1],A
    2838: 20       POP   X
    2839: 7F       RET   
_csprintf:
    283A: 10       PUSH  X
    283B: 4F       MOV   X,SP
    283C: 38 02    ADD   SP,0x2
    283E: 62 D0 00 MOV   REG[0xD0],0x0
    2841: 52 FC    MOV   A,[X-4]
    2843: 53 B8    MOV   [commandId+3],A
    2845: 52 FB    MOV   A,[X-5]
    2847: 53 B7    MOV   [commandId+2],A
    2849: 62 D0 00 MOV   REG[0xD0],0x0
    284C: 5A A3    MOV   [__r1],X
    284E: 16 A3 07 SUB   [__r1],0x7
    2851: 51 A3    MOV   A,[__r1]
    2853: 54 01    MOV   [X+1],A
    2855: 56 00 07 MOV   [X+0],0x7
    2858: 52 00    MOV   A,[X+0]
    285A: 08       PUSH  A
    285B: 52 01    MOV   A,[X+1]
    285D: 08       PUSH  A
    285E: 52 F9    MOV   A,[X-7]
    2860: 08       PUSH  A
    2861: 52 FA    MOV   A,[X-6]
    2863: 08       PUSH  A
    2864: 50 06    MOV   A,0x6
    2866: 08       PUSH  A
    2867: 50 77    MOV   A,0x77
    2869: 08       PUSH  A
    286A: 7C 28 A3 LCALL __cprint
    286D: 38 FA    ADD   SP,0xFA
    286F: 62 D0 00 MOV   REG[0xD0],0x0
    2872: 51 B8    MOV   A,[commandId+3]
    2874: 08       PUSH  A
    2875: 51 B7    MOV   A,[commandId+2]
    2877: 62 D0 00 MOV   REG[0xD0],0x0
    287A: 53 A4    MOV   [__r0],A
    287C: 18       POP   A
    287D: 53 A3    MOV   [__r1],A
    287F: 51 A4    MOV   A,[__r0]
    2881: 60 D5    MOV   REG[0xD5],A
    2883: 50 00    MOV   A,0x0
    2885: 3F A3    MVI   [__r1],A
    2887: 62 D0 00 MOV   REG[0xD0],0x0
    288A: 51 B8    MOV   A,[commandId+3]
    288C: 13 FC    SUB   A,[X-4]
    288E: 62 D0 00 MOV   REG[0xD0],0x0
    2891: 53 A3    MOV   [__r1],A
    2893: 62 D0 00 MOV   REG[0xD0],0x0
    2896: 51 B7    MOV   A,[commandId+2]
    2898: 1B FB    SBB   A,[X-5]
    289A: 62 D0 00 MOV   REG[0xD0],0x0
    289D: 53 A4    MOV   [__r0],A
    289F: 38 FE    ADD   SP,0xFE
    28A1: 20       POP   X
    28A2: 7F       RET   
__cprint:
    28A3: 10       PUSH  X
    28A4: 4F       MOV   X,SP
    28A5: 38 11    ADD   SP,0x11
    28A7: 56 05 00 MOV   [X+5],0x0
    28AA: 56 04 00 MOV   [X+4],0x0
    28AD: 83 C7    JMP   0x2C75
    28AF: 62 D0 00 MOV   REG[0xD0],0x0
    28B2: 52 FA    MOV   A,[X-6]
    28B4: 53 A3    MOV   [__r1],A
    28B6: 52 F9    MOV   A,[X-7]
    28B8: 10       PUSH  X
    28B9: 58 A3    MOV   X,[__r1]
    28BB: 28       ROMX  
    28BC: 20       POP   X
    28BD: 39 25    CMP   A,0x25
    28BF: A0 23    JZ    0x28E3
    28C1: 52 FA    MOV   A,[X-6]
    28C3: 53 A3    MOV   [__r1],A
    28C5: 52 F9    MOV   A,[X-7]
    28C7: 10       PUSH  X
    28C8: 58 A3    MOV   X,[__r1]
    28CA: 28       ROMX  
    28CB: 20       POP   X
    28CC: 10       PUSH  X
    28CD: 08       PUSH  A
    28CE: 52 FC    MOV   A,[X-4]
    28D0: 53 A3    MOV   [__r1],A
    28D2: 52 FB    MOV   A,[X-5]
    28D4: 58 A3    MOV   X,[__r1]
    28D6: 7C 1E 7D LCALL __plcall
    28D9: 38 FF    ADD   SP,0xFF
    28DB: 20       POP   X
    28DC: 77 05    INC   [X+5]
    28DE: 0F 04 00 ADC   [X+4],0x0
    28E1: 83 8E    JMP   0x2C70
    28E3: 56 0A 00 MOV   [X+10],0x0
    28E6: 56 09 00 MOV   [X+9],0x0
    28E9: 56 07 81 MOV   [X+7],0x81
    28EC: 56 06 00 MOV   [X+6],0x0
    28EF: 56 08 20 MOV   [X+8],0x20
    28F2: 77 FA    INC   [X-6]
    28F4: 0F F9 00 ADC   [X-7],0x0
    28F7: 62 D0 00 MOV   REG[0xD0],0x0
    28FA: 52 FA    MOV   A,[X-6]
    28FC: 53 A3    MOV   [__r1],A
    28FE: 52 F9    MOV   A,[X-7]
    2900: 10       PUSH  X
    2901: 58 A3    MOV   X,[__r1]
    2903: 28       ROMX  
    2904: 20       POP   X
    2905: 54 10    MOV   [X+16],A
    2907: 56 0F 00 MOV   [X+15],0x0
    290A: 52 10    MOV   A,[X+16]
    290C: 11 58    SUB   A,0x58
    290E: 53 9B    MOV   [__rY],A
    2910: 52 0F    MOV   A,[X+15]
    2912: 31 80    XOR   A,0x80
    2914: 19 80    SBB   A,0x80
    2916: 2A 9B    OR    A,[__rY]
    2918: A0 ED    JZ    0x2A06
    291A: D0 22    JNC   0x293D
    291C: 52 10    MOV   A,[X+16]
    291E: 11 45    SUB   A,0x45
    2920: 62 D0 00 MOV   REG[0xD0],0x0
    2923: 53 9B    MOV   [__rY],A
    2925: 52 0F    MOV   A,[X+15]
    2927: 31 80    XOR   A,0x80
    2929: 19 80    SBB   A,0x80
    292B: C0 83    JC    0x29AF
    292D: 2A 9B    OR    A,[__rY]
    292F: A3 38    JZ    0x2C68
    2931: 3D 0F 00 CMP   [X+15],0x0
    2934: B0 06    JNZ   0x293B
    2936: 3D 10 53 CMP   [X+16],0x53
    2939: A2 32    JZ    0x2B6C
    293B: 80 73    JMP   0x29AF
    293D: 3D 0F 00 CMP   [X+15],0x0
    2940: B0 06    JNZ   0x2947
    2942: 3D 10 63 CMP   [X+16],0x63
    2945: A1 F6    JZ    0x2B3C
    2947: 3D 0F 00 CMP   [X+15],0x0
    294A: B0 06    JNZ   0x2951
    294C: 3D 10 64 CMP   [X+16],0x64
    294F: A0 84    JZ    0x29D4
    2951: 3D 0F 00 CMP   [X+15],0x0
    2954: B0 06    JNZ   0x295B
    2956: 3D 10 65 CMP   [X+16],0x65
    2959: A3 0E    JZ    0x2C68
    295B: 3D 0F 00 CMP   [X+15],0x0
    295E: B0 06    JNZ   0x2965
    2960: 3D 10 66 CMP   [X+16],0x66
    2963: A3 04    JZ    0x2C68
    2965: 3D 0F 00 CMP   [X+15],0x0
    2968: B0 06    JNZ   0x296F
    296A: 3D 10 69 CMP   [X+16],0x69
    296D: A0 66    JZ    0x29D4
    296F: 3D 0F 00 CMP   [X+15],0x0
    2972: B0 06    JNZ   0x2979
    2974: 3D 10 6F CMP   [X+16],0x6F
    2977: A0 8E    JZ    0x2A06
    2979: 3D 0F 00 CMP   [X+15],0x0
    297C: B0 06    JNZ   0x2983
    297E: 3D 10 70 CMP   [X+16],0x70
    2981: A0 84    JZ    0x2A06
    2983: 52 10    MOV   A,[X+16]
    2985: 11 63    SUB   A,0x63
    2987: 52 0F    MOV   A,[X+15]
    2989: 31 80    XOR   A,0x80
    298B: 19 80    SBB   A,0x80
    298D: C0 21    JC    0x29AF
    298F: 3D 0F 00 CMP   [X+15],0x0
    2992: B0 06    JNZ   0x2999
    2994: 3D 10 73 CMP   [X+16],0x73
    2997: A2 4A    JZ    0x2BE2
    2999: 3D 0F 00 CMP   [X+15],0x0
    299C: B0 06    JNZ   0x29A3
    299E: 3D 10 75 CMP   [X+16],0x75
    29A1: A0 64    JZ    0x2A06
    29A3: 3D 0F 00 CMP   [X+15],0x0
    29A6: B0 06    JNZ   0x29AD
    29A8: 3D 10 78 CMP   [X+16],0x78
    29AB: A0 5A    JZ    0x2A06
    29AD: 80 01    JMP   0x29AF
    29AF: 62 D0 00 MOV   REG[0xD0],0x0
    29B2: 52 FA    MOV   A,[X-6]
    29B4: 53 A3    MOV   [__r1],A
    29B6: 52 F9    MOV   A,[X-7]
    29B8: 10       PUSH  X
    29B9: 58 A3    MOV   X,[__r1]
    29BB: 28       ROMX  
    29BC: 20       POP   X
    29BD: 10       PUSH  X
    29BE: 08       PUSH  A
    29BF: 52 FC    MOV   A,[X-4]
    29C1: 53 A3    MOV   [__r1],A
    29C3: 52 FB    MOV   A,[X-5]
    29C5: 58 A3    MOV   X,[__r1]
    29C7: 7C 1E 7D LCALL __plcall
    29CA: 38 FF    ADD   SP,0xFF
    29CC: 20       POP   X
    29CD: 77 05    INC   [X+5]
    29CF: 0F 04 00 ADC   [X+4],0x0
    29D2: 82 9D    JMP   0x2C70
    29D4: 07 F8 FE ADD   [X-8],0xFE
    29D7: 0F F7 FF ADC   [X-9],0xFF
    29DA: 62 D0 00 MOV   REG[0xD0],0x0
    29DD: 52 F8    MOV   A,[X-8]
    29DF: 53 A3    MOV   [__r1],A
    29E1: 52 F7    MOV   A,[X-9]
    29E3: 60 D4    MOV   REG[0xD4],A
    29E5: 3E A3    MVI   A,[__r1]
    29E7: 54 0B    MOV   [X+11],A
    29E9: 3E A3    MVI   A,[__r1]
    29EB: 54 0C    MOV   [X+12],A
    29ED: 50 00    MOV   A,0x0
    29EF: 08       PUSH  A
    29F0: 50 0A    MOV   A,0xA
    29F2: 08       PUSH  A
    29F3: 52 0B    MOV   A,[X+11]
    29F5: 08       PUSH  A
    29F6: 52 0C    MOV   A,[X+12]
    29F8: 08       PUSH  A
    29F9: 52 06    MOV   A,[X+6]
    29FB: 08       PUSH  A
    29FC: 52 07    MOV   A,[X+7]
    29FE: 08       PUSH  A
    29FF: 7C 1F CA LCALL _itoa
    2A02: 38 FA    ADD   SP,0xFA
    2A04: 81 2F    JMP   0x2B34
    2A06: 07 F8 FE ADD   [X-8],0xFE
    2A09: 0F F7 FF ADC   [X-9],0xFF
    2A0C: 62 D0 00 MOV   REG[0xD0],0x0
    2A0F: 52 F8    MOV   A,[X-8]
    2A11: 53 A3    MOV   [__r1],A
    2A13: 52 F7    MOV   A,[X-9]
    2A15: 60 D4    MOV   REG[0xD4],A
    2A17: 3E A3    MVI   A,[__r1]
    2A19: 53 A4    MOV   [__r0],A
    2A1B: 3E A3    MVI   A,[__r1]
    2A1D: 54 0C    MOV   [X+12],A
    2A1F: 51 A4    MOV   A,[__r0]
    2A21: 54 0B    MOV   [X+11],A
    2A23: 52 FA    MOV   A,[X-6]
    2A25: 53 A3    MOV   [__r1],A
    2A27: 52 F9    MOV   A,[X-7]
    2A29: 10       PUSH  X
    2A2A: 58 A3    MOV   X,[__r1]
    2A2C: 28       ROMX  
    2A2D: 20       POP   X
    2A2E: 39 75    CMP   A,0x75
    2A30: B0 1A    JNZ   0x2A4B
    2A32: 50 00    MOV   A,0x0
    2A34: 08       PUSH  A
    2A35: 50 0A    MOV   A,0xA
    2A37: 08       PUSH  A
    2A38: 52 0B    MOV   A,[X+11]
    2A3A: 08       PUSH  A
    2A3B: 52 0C    MOV   A,[X+12]
    2A3D: 08       PUSH  A
    2A3E: 52 06    MOV   A,[X+6]
    2A40: 08       PUSH  A
    2A41: 52 07    MOV   A,[X+7]
    2A43: 08       PUSH  A
    2A44: 7C 25 C5 LCALL _utoa
    2A47: 38 FA    ADD   SP,0xFA
    2A49: 80 EA    JMP   0x2B34
    2A4B: 62 D0 00 MOV   REG[0xD0],0x0
    2A4E: 52 FA    MOV   A,[X-6]
    2A50: 53 A3    MOV   [__r1],A
    2A52: 52 F9    MOV   A,[X-7]
    2A54: 10       PUSH  X
    2A55: 58 A3    MOV   X,[__r1]
    2A57: 28       ROMX  
    2A58: 20       POP   X
    2A59: 39 6F    CMP   A,0x6F
    2A5B: B0 1A    JNZ   0x2A76
    2A5D: 50 00    MOV   A,0x0
    2A5F: 08       PUSH  A
    2A60: 50 08    MOV   A,0x8
    2A62: 08       PUSH  A
    2A63: 52 0B    MOV   A,[X+11]
    2A65: 08       PUSH  A
    2A66: 52 0C    MOV   A,[X+12]
    2A68: 08       PUSH  A
    2A69: 52 06    MOV   A,[X+6]
    2A6B: 08       PUSH  A
    2A6C: 52 07    MOV   A,[X+7]
    2A6E: 08       PUSH  A
    2A6F: 7C 25 C5 LCALL _utoa
    2A72: 38 FA    ADD   SP,0xFA
    2A74: 80 BF    JMP   0x2B34
    2A76: 62 D0 00 MOV   REG[0xD0],0x0
    2A79: 52 FA    MOV   A,[X-6]
    2A7B: 53 A3    MOV   [__r1],A
    2A7D: 52 F9    MOV   A,[X-7]
    2A7F: 10       PUSH  X
    2A80: 58 A3    MOV   X,[__r1]
    2A82: 28       ROMX  
    2A83: 20       POP   X
    2A84: 39 70    CMP   A,0x70
    2A86: B0 39    JNZ   0x2AC0
    2A88: 52 07    MOV   A,[X+7]
    2A8A: 53 A3    MOV   [__r1],A
    2A8C: 52 06    MOV   A,[X+6]
    2A8E: 53 A4    MOV   [__r0],A
    2A90: 51 A3    MOV   A,[__r1]
    2A92: 01 01    ADD   A,0x1
    2A94: 54 07    MOV   [X+7],A
    2A96: 51 A4    MOV   A,[__r0]
    2A98: 09 00    ADC   A,0x0
    2A9A: 54 06    MOV   [X+6],A
    2A9C: 51 A4    MOV   A,[__r0]
    2A9E: 60 D5    MOV   REG[0xD5],A
    2AA0: 50 30    MOV   A,0x30
    2AA2: 3F A3    MVI   [__r1],A
    2AA4: 52 07    MOV   A,[X+7]
    2AA6: 53 A3    MOV   [__r1],A
    2AA8: 52 06    MOV   A,[X+6]
    2AAA: 53 A4    MOV   [__r0],A
    2AAC: 51 A3    MOV   A,[__r1]
    2AAE: 01 01    ADD   A,0x1
    2AB0: 54 07    MOV   [X+7],A
    2AB2: 51 A4    MOV   A,[__r0]
    2AB4: 09 00    ADC   A,0x0
    2AB6: 54 06    MOV   [X+6],A
    2AB8: 51 A4    MOV   A,[__r0]
    2ABA: 60 D5    MOV   REG[0xD5],A
    2ABC: 50 78    MOV   A,0x78
    2ABE: 3F A3    MVI   [__r1],A
    2AC0: 50 00    MOV   A,0x0
    2AC2: 08       PUSH  A
    2AC3: 50 10    MOV   A,0x10
    2AC5: 08       PUSH  A
    2AC6: 52 0B    MOV   A,[X+11]
    2AC8: 08       PUSH  A
    2AC9: 52 0C    MOV   A,[X+12]
    2ACB: 08       PUSH  A
    2ACC: 52 06    MOV   A,[X+6]
    2ACE: 08       PUSH  A
    2ACF: 52 07    MOV   A,[X+7]
    2AD1: 08       PUSH  A
    2AD2: 7C 25 C5 LCALL _utoa
    2AD5: 38 FA    ADD   SP,0xFA
    2AD7: 62 D0 00 MOV   REG[0xD0],0x0
    2ADA: 52 FA    MOV   A,[X-6]
    2ADC: 53 A3    MOV   [__r1],A
    2ADE: 52 F9    MOV   A,[X-7]
    2AE0: 10       PUSH  X
    2AE1: 58 A3    MOV   X,[__r1]
    2AE3: 28       ROMX  
    2AE4: 20       POP   X
    2AE5: 39 58    CMP   A,0x58
    2AE7: B0 4C    JNZ   0x2B34
    2AE9: 56 01 81 MOV   [X+1],0x81
    2AEC: 56 00 00 MOV   [X+0],0x0
    2AEF: 80 33    JMP   0x2B23
    2AF1: 62 D0 00 MOV   REG[0xD0],0x0
    2AF4: 52 01    MOV   A,[X+1]
    2AF6: 53 A3    MOV   [__r1],A
    2AF8: 52 00    MOV   A,[X+0]
    2AFA: 60 D4    MOV   REG[0xD4],A
    2AFC: 3E A3    MVI   A,[__r1]
    2AFE: 53 A3    MOV   [__r1],A
    2B00: 50 00    MOV   A,0x0
    2B02: 08       PUSH  A
    2B03: 51 A3    MOV   A,[__r1]
    2B05: 08       PUSH  A
    2B06: 7C 27 8C LCALL _toupper
    2B09: 38 FE    ADD   SP,0xFE
    2B0B: 62 D0 00 MOV   REG[0xD0],0x0
    2B0E: 51 A3    MOV   A,[__r1]
    2B10: 53 A4    MOV   [__r0],A
    2B12: 52 01    MOV   A,[X+1]
    2B14: 53 A1    MOV   [__r3],A
    2B16: 52 00    MOV   A,[X+0]
    2B18: 60 D5    MOV   REG[0xD5],A
    2B1A: 51 A4    MOV   A,[__r0]
    2B1C: 3F A1    MVI   [__r3],A
    2B1E: 77 01    INC   [X+1]
    2B20: 0F 00 00 ADC   [X+0],0x0
    2B23: 62 D0 00 MOV   REG[0xD0],0x0
    2B26: 52 01    MOV   A,[X+1]
    2B28: 53 A3    MOV   [__r1],A
    2B2A: 52 00    MOV   A,[X+0]
    2B2C: 60 D4    MOV   REG[0xD4],A
    2B2E: 3E A3    MVI   A,[__r1]
    2B30: 39 00    CMP   A,0x0
    2B32: BF BE    JNZ   0x2AF1
    2B34: 56 01 81 MOV   [X+1],0x81
    2B37: 56 00 00 MOV   [X+0],0x0
    2B3A: 80 D2    JMP   0x2C0D
    2B3C: 07 F8 FE ADD   [X-8],0xFE
    2B3F: 0F F7 FF ADC   [X-9],0xFF
    2B42: 62 D0 00 MOV   REG[0xD0],0x0
    2B45: 52 F8    MOV   A,[X-8]
    2B47: 53 A3    MOV   [__r1],A
    2B49: 52 F7    MOV   A,[X-9]
    2B4B: 60 D4    MOV   REG[0xD4],A
    2B4D: 3E A3    MVI   A,[__r1]
    2B4F: 3E A3    MVI   A,[__r1]
    2B51: 54 0D    MOV   [X+13],A
    2B53: 10       PUSH  X
    2B54: 52 0D    MOV   A,[X+13]
    2B56: 08       PUSH  A
    2B57: 52 FC    MOV   A,[X-4]
    2B59: 53 A3    MOV   [__r1],A
    2B5B: 52 FB    MOV   A,[X-5]
    2B5D: 58 A3    MOV   X,[__r1]
    2B5F: 7C 1E 7D LCALL __plcall
    2B62: 38 FF    ADD   SP,0xFF
    2B64: 20       POP   X
    2B65: 77 05    INC   [X+5]
    2B67: 0F 04 00 ADC   [X+4],0x0
    2B6A: 81 05    JMP   0x2C70
    2B6C: 07 F8 FE ADD   [X-8],0xFE
    2B6F: 0F F7 FF ADC   [X-9],0xFF
    2B72: 62 D0 00 MOV   REG[0xD0],0x0
    2B75: 52 F8    MOV   A,[X-8]
    2B77: 53 A3    MOV   [__r1],A
    2B79: 52 F7    MOV   A,[X-9]
    2B7B: 60 D4    MOV   REG[0xD4],A
    2B7D: 3E A3    MVI   A,[__r1]
    2B7F: 54 02    MOV   [X+2],A
    2B81: 3E A3    MVI   A,[__r1]
    2B83: 54 03    MOV   [X+3],A
    2B85: 3D 08 2D CMP   [X+8],0x2D
    2B88: B0 45    JNZ   0x2BCE
    2B8A: 10       PUSH  X
    2B8B: 50 2D    MOV   A,0x2D
    2B8D: 08       PUSH  A
    2B8E: 62 D0 00 MOV   REG[0xD0],0x0
    2B91: 52 FC    MOV   A,[X-4]
    2B93: 53 A3    MOV   [__r1],A
    2B95: 52 FB    MOV   A,[X-5]
    2B97: 58 A3    MOV   X,[__r1]
    2B99: 7C 1E 7D LCALL __plcall
    2B9C: 38 FF    ADD   SP,0xFF
    2B9E: 20       POP   X
    2B9F: 77 05    INC   [X+5]
    2BA1: 0F 04 00 ADC   [X+4],0x0
    2BA4: 80 29    JMP   0x2BCE
    2BA6: 62 D0 00 MOV   REG[0xD0],0x0
    2BA9: 52 03    MOV   A,[X+3]
    2BAB: 53 A3    MOV   [__r1],A
    2BAD: 52 02    MOV   A,[X+2]
    2BAF: 10       PUSH  X
    2BB0: 58 A3    MOV   X,[__r1]
    2BB2: 28       ROMX  
    2BB3: 20       POP   X
    2BB4: 10       PUSH  X
    2BB5: 08       PUSH  A
    2BB6: 52 FC    MOV   A,[X-4]
    2BB8: 53 A3    MOV   [__r1],A
    2BBA: 52 FB    MOV   A,[X-5]
    2BBC: 58 A3    MOV   X,[__r1]
    2BBE: 7C 1E 7D LCALL __plcall
    2BC1: 38 FF    ADD   SP,0xFF
    2BC3: 20       POP   X
    2BC4: 77 05    INC   [X+5]
    2BC6: 0F 04 00 ADC   [X+4],0x0
    2BC9: 77 03    INC   [X+3]
    2BCB: 0F 02 00 ADC   [X+2],0x0
    2BCE: 62 D0 00 MOV   REG[0xD0],0x0
    2BD1: 52 03    MOV   A,[X+3]
    2BD3: 53 A3    MOV   [__r1],A
    2BD5: 52 02    MOV   A,[X+2]
    2BD7: 10       PUSH  X
    2BD8: 58 A3    MOV   X,[__r1]
    2BDA: 28       ROMX  
    2BDB: 20       POP   X
    2BDC: 39 00    CMP   A,0x0
    2BDE: BF C7    JNZ   0x2BA6
    2BE0: 80 8F    JMP   0x2C70
    2BE2: 07 F8 FE ADD   [X-8],0xFE
    2BE5: 0F F7 FF ADC   [X-9],0xFF
    2BE8: 62 D0 00 MOV   REG[0xD0],0x0
    2BEB: 52 F8    MOV   A,[X-8]
    2BED: 53 A3    MOV   [__r1],A
    2BEF: 52 F7    MOV   A,[X-9]
    2BF1: 60 D4    MOV   REG[0xD4],A
    2BF3: 3E A3    MVI   A,[__r1]
    2BF5: 54 00    MOV   [X+0],A
    2BF7: 3E A3    MVI   A,[__r1]
    2BF9: 54 01    MOV   [X+1],A
    2BFB: 3D 00 00 CMP   [X+0],0x0
    2BFE: B0 0E    JNZ   0x2C0D
    2C00: 3D 01 00 CMP   [X+1],0x0
    2C03: B0 09    JNZ   0x2C0D
    2C05: 56 03 01 MOV   [X+3],0x1
    2C08: 56 02 06 MOV   [X+2],0x6
    2C0B: 8F 79    JMP   0x2B85
    2C0D: 3D 08 2D CMP   [X+8],0x2D
    2C10: B0 44    JNZ   0x2C55
    2C12: 10       PUSH  X
    2C13: 50 2D    MOV   A,0x2D
    2C15: 08       PUSH  A
    2C16: 62 D0 00 MOV   REG[0xD0],0x0
    2C19: 52 FC    MOV   A,[X-4]
    2C1B: 53 A3    MOV   [__r1],A
    2C1D: 52 FB    MOV   A,[X-5]
    2C1F: 58 A3    MOV   X,[__r1]
    2C21: 7C 1E 7D LCALL __plcall
    2C24: 38 FF    ADD   SP,0xFF
    2C26: 20       POP   X
    2C27: 77 05    INC   [X+5]
    2C29: 0F 04 00 ADC   [X+4],0x0
    2C2C: 80 28    JMP   0x2C55
    2C2E: 62 D0 00 MOV   REG[0xD0],0x0
    2C31: 52 01    MOV   A,[X+1]
    2C33: 53 A3    MOV   [__r1],A
    2C35: 52 00    MOV   A,[X+0]
    2C37: 60 D4    MOV   REG[0xD4],A
    2C39: 3E A3    MVI   A,[__r1]
    2C3B: 10       PUSH  X
    2C3C: 08       PUSH  A
    2C3D: 52 FC    MOV   A,[X-4]
    2C3F: 53 A3    MOV   [__r1],A
    2C41: 52 FB    MOV   A,[X-5]
    2C43: 58 A3    MOV   X,[__r1]
    2C45: 7C 1E 7D LCALL __plcall
    2C48: 38 FF    ADD   SP,0xFF
    2C4A: 20       POP   X
    2C4B: 77 05    INC   [X+5]
    2C4D: 0F 04 00 ADC   [X+4],0x0
    2C50: 77 01    INC   [X+1]
    2C52: 0F 00 00 ADC   [X+0],0x0
    2C55: 62 D0 00 MOV   REG[0xD0],0x0
    2C58: 52 01    MOV   A,[X+1]
    2C5A: 53 A3    MOV   [__r1],A
    2C5C: 52 00    MOV   A,[X+0]
    2C5E: 60 D4    MOV   REG[0xD4],A
    2C60: 3E A3    MVI   A,[__r1]
    2C62: 39 00    CMP   A,0x0
    2C64: BF C9    JNZ   0x2C2E
    2C66: 80 09    JMP   0x2C70
    2C68: 56 03 13 MOV   [X+3],0x13
    2C6B: 56 02 06 MOV   [X+2],0x6
    2C6E: 8F 16    JMP   0x2B85
    2C70: 77 FA    INC   [X-6]
    2C72: 0F F9 00 ADC   [X-7],0x0
    2C75: 62 D0 00 MOV   REG[0xD0],0x0
    2C78: 52 FA    MOV   A,[X-6]
    2C7A: 53 A3    MOV   [__r1],A
    2C7C: 52 F9    MOV   A,[X-7]
    2C7E: 10       PUSH  X
    2C7F: 58 A3    MOV   X,[__r1]
    2C81: 28       ROMX  
    2C82: 20       POP   X
    2C83: 39 00    CMP   A,0x0
    2C85: BC 29    JNZ   0x28AF
    2C87: 52 05    MOV   A,[X+5]
    2C89: 53 A3    MOV   [__r1],A
    2C8B: 52 04    MOV   A,[X+4]
    2C8D: 53 A4    MOV   [__r0],A
    2C8F: 38 EF    ADD   SP,0xEF
    2C91: 20       POP   X
    2C92: 7F       RET   
    2C93: 10       PUSH  X
    2C94: 4F       MOV   X,SP
    2C95: 38 04    ADD   SP,0x4
    2C97: 80 06    JMP   0x2C9E
    2C99: 77 FC    INC   [X-4]
    2C9B: 0F FB 00 ADC   [X-5],0x0
    2C9E: 62 D0 00 MOV   REG[0xD0],0x0
    2CA1: 52 FC    MOV   A,[X-4]
    2CA3: 53 A3    MOV   [__r1],A
    2CA5: 52 FB    MOV   A,[X-5]
    2CA7: 10       PUSH  X
    2CA8: 58 A3    MOV   X,[__r1]
    2CAA: 28       ROMX  
    2CAB: 20       POP   X
    2CAC: 53 A3    MOV   [__r1],A
    2CAE: 50 00    MOV   A,0x0
    2CB0: 08       PUSH  A
    2CB1: 51 A3    MOV   A,[__r1]
    2CB3: 08       PUSH  A
    2CB4: 7C 27 4A LCALL _isspace
    2CB7: 38 FE    ADD   SP,0xFE
    2CB9: 62 D0 00 MOV   REG[0xD0],0x0
    2CBC: 3C A4 00 CMP   [__r0],0x0
    2CBF: BF D9    JNZ   0x2C99
    2CC1: 3C A3 00 CMP   [__r1],0x0
    2CC4: BF D4    JNZ   0x2C99
    2CC6: 56 03 00 MOV   [X+3],0x0
    2CC9: 56 02 00 MOV   [X+2],0x0
    2CCC: 62 D0 00 MOV   REG[0xD0],0x0
    2CCF: 52 FC    MOV   A,[X-4]
    2CD1: 53 A3    MOV   [__r1],A
    2CD3: 52 FB    MOV   A,[X-5]
    2CD5: 10       PUSH  X
    2CD6: 58 A3    MOV   X,[__r1]
    2CD8: 28       ROMX  
    2CD9: 20       POP   X
    2CDA: 39 2D    CMP   A,0x2D
    2CDC: B0 0E    JNZ   0x2CEB
    2CDE: 56 03 01 MOV   [X+3],0x1
    2CE1: 56 02 00 MOV   [X+2],0x0
    2CE4: 77 FC    INC   [X-4]
    2CE6: 0F FB 00 ADC   [X-5],0x0
    2CE9: 80 18    JMP   0x2D02
    2CEB: 62 D0 00 MOV   REG[0xD0],0x0
    2CEE: 52 FC    MOV   A,[X-4]
    2CF0: 53 A3    MOV   [__r1],A
    2CF2: 52 FB    MOV   A,[X-5]
    2CF4: 10       PUSH  X
    2CF5: 58 A3    MOV   X,[__r1]
    2CF7: 28       ROMX  
    2CF8: 20       POP   X
    2CF9: 39 2B    CMP   A,0x2B
    2CFB: B0 06    JNZ   0x2D02
    2CFD: 77 FC    INC   [X-4]
    2CFF: 0F FB 00 ADC   [X-5],0x0
    2D02: 56 01 00 MOV   [X+1],0x0
    2D05: 56 00 00 MOV   [X+0],0x0
    2D08: 80 7C    JMP   0x2D85
    2D0A: 62 D0 00 MOV   REG[0xD0],0x0
    2D0D: 52 FC    MOV   A,[X-4]
    2D0F: 53 A3    MOV   [__r1],A
    2D11: 52 FB    MOV   A,[X-5]
    2D13: 53 A4    MOV   [__r0],A
    2D15: 51 A3    MOV   A,[__r1]
    2D17: 01 01    ADD   A,0x1
    2D19: 54 FC    MOV   [X-4],A
    2D1B: 51 A4    MOV   A,[__r0]
    2D1D: 09 00    ADC   A,0x0
    2D1F: 54 FB    MOV   [X-5],A
    2D21: 52 01    MOV   A,[X+1]
    2D23: 53 A1    MOV   [__r3],A
    2D25: 52 00    MOV   A,[X+0]
    2D27: 53 A2    MOV   [__r2],A
    2D29: 55 9F 0A MOV   [__r5],0xA
    2D2C: 55 A0 00 MOV   [__r4],0x0
    2D2F: 55 9C 00 MOV   [__rX],0x0
    2D32: 55 9B 00 MOV   [__rY],0x0
    2D35: 3C A0 00 CMP   [__r4],0x0
    2D38: B0 06    JNZ   0x2D3F
    2D3A: 3C 9F 00 CMP   [__r5],0x0
    2D3D: A0 1A    JZ    0x2D58
    2D3F: 70 FB    AND   F,0xFB
    2D41: 6E A0    RRC   [__r4]
    2D43: 6E 9F    RRC   [__r5]
    2D45: D0 0C    JNC   0x2D52
    2D47: 62 D0 00 MOV   REG[0xD0],0x0
    2D4A: 51 A1    MOV   A,[__r3]
    2D4C: 04 9C    ADD   [__rX],A
    2D4E: 51 A2    MOV   A,[__r2]
    2D50: 0C 9B    ADC   [__rY],A
    2D52: 65 A1    ASL   [__r3]
    2D54: 6B A2    RLC   [__r2]
    2D56: 8F DE    JMP   0x2D35
    2D58: 5F A1 9C MOV   [__r3],[__rX]
    2D5B: 5F A2 9B MOV   [__r2],[__rY]
    2D5E: 62 D0 00 MOV   REG[0xD0],0x0
    2D61: 51 A4    MOV   A,[__r0]
    2D63: 10       PUSH  X
    2D64: 58 A3    MOV   X,[__r1]
    2D66: 28       ROMX  
    2D67: 20       POP   X
    2D68: 53 A3    MOV   [__r1],A
    2D6A: 55 A4 00 MOV   [__r0],0x0
    2D6D: 51 A1    MOV   A,[__r3]
    2D6F: 02 A3    ADD   A,[__r1]
    2D71: 53 A3    MOV   [__r1],A
    2D73: 51 A2    MOV   A,[__r2]
    2D75: 0A A4    ADC   A,[__r0]
    2D77: 53 A4    MOV   [__r0],A
    2D79: 51 A3    MOV   A,[__r1]
    2D7B: 11 30    SUB   A,0x30
    2D7D: 54 01    MOV   [X+1],A
    2D7F: 51 A4    MOV   A,[__r0]
    2D81: 19 00    SBB   A,0x0
    2D83: 54 00    MOV   [X+0],A
    2D85: 62 D0 00 MOV   REG[0xD0],0x0
    2D88: 52 FC    MOV   A,[X-4]
    2D8A: 53 A3    MOV   [__r1],A
    2D8C: 52 FB    MOV   A,[X-5]
    2D8E: 10       PUSH  X
    2D8F: 58 A3    MOV   X,[__r1]
    2D91: 28       ROMX  
    2D92: 20       POP   X
    2D93: 53 A3    MOV   [__r1],A
    2D95: 50 00    MOV   A,0x0
    2D97: 08       PUSH  A
    2D98: 51 A3    MOV   A,[__r1]
    2D9A: 08       PUSH  A
    2D9B: 7C 27 08 LCALL _isdigit
    2D9E: 38 FE    ADD   SP,0xFE
    2DA0: 62 D0 00 MOV   REG[0xD0],0x0
    2DA3: 3C A4 00 CMP   [__r0],0x0
    2DA6: BF 63    JNZ   0x2D0A
    2DA8: 3C A3 00 CMP   [__r1],0x0
    2DAB: BF 5E    JNZ   0x2D0A
    2DAD: 3D 02 00 CMP   [X+2],0x0
    2DB0: B0 06    JNZ   0x2DB7
    2DB2: 3D 03 00 CMP   [X+3],0x0
    2DB5: A0 14    JZ    0x2DCA
    2DB7: 62 D0 00 MOV   REG[0xD0],0x0
    2DBA: 52 01    MOV   A,[X+1]
    2DBC: 73       CPL   A
    2DBD: 11 FF    SUB   A,0xFF
    2DBF: 53 A3    MOV   [__r1],A
    2DC1: 52 00    MOV   A,[X+0]
    2DC3: 73       CPL   A
    2DC4: 19 FF    SBB   A,0xFF
    2DC6: 53 A4    MOV   [__r0],A
    2DC8: 80 0C    JMP   0x2DD5
    2DCA: 62 D0 00 MOV   REG[0xD0],0x0
    2DCD: 52 01    MOV   A,[X+1]
    2DCF: 53 A3    MOV   [__r1],A
    2DD1: 52 00    MOV   A,[X+0]
    2DD3: 53 A4    MOV   [__r0],A
    2DD5: 38 FC    ADD   SP,0xFC
    2DD7: 20       POP   X
    2DD8: 7F       RET   
